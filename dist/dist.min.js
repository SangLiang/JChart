"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _context = require("./context");

function _default(plugins, options) {
  var globalCtx = (0, _context.initContext)(plugins, options);
  return function (container, data) {
    globalCtx.init(container, data);
    globalCtx.render();
    return globalCtx;
  };
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeRenderCallback = makeRenderCallback;
exports.AnimeNumber = exports.AnimeArray = void 0;

var _easing = require("./easing");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function makeRenderCallback(renderFunc) {
  var d = null;
  return function () {
    if (!d) {
      d = renderFunc;
      requestAnimationFrame(function () {
        d();
        d = null;
      });
    }
  };
}

function animate(_ref, callback) {
  var easingFunc = _ref.easingFunc,
      duration = _ref.duration,
      fps = _ref.fps,
      renderCallback = _ref.renderCallback;
  var start;
  var elapsed;
  var lastFrame = 0;
  var interval = 1000 / fps;
  var animationId = null;

  function step(timestamp) {
    if (start === undefined) {
      start = timestamp;
    }

    elapsed = timestamp - start;

    if (timestamp - lastFrame < interval) {
      animationId = requestAnimationFrame(step);
      return;
    }

    var ratio = easingFunc(elapsed / duration);

    if (ratio >= 1) {
      callback('end');
    } else {
      callback(ratio);
      animationId = requestAnimationFrame(step);
    }

    renderCallback();
    lastFrame = timestamp;
  }

  animationId = requestAnimationFrame(step);
  return {
    stop: function stop() {
      cancelAnimationFrame(animationId);
    }
  };
}

function defaultOnNumberElement(newState, oldState, idx, ratio, currentArray) {
  if (ratio === 'end') {
    currentArray[idx] = newState;
  } else {
    currentArray[idx] = oldState + (oldState - newState) * ratio;
  }
}

var AnimeArray = /*#__PURE__*/function () {
  function AnimeArray(_ref2) {
    var _ref2$startArray = _ref2.startArray,
        startArray = _ref2$startArray === void 0 ? [] : _ref2$startArray,
        _ref2$defaultNumber = _ref2.defaultNumber,
        defaultNumber = _ref2$defaultNumber === void 0 ? 0 : _ref2$defaultNumber,
        _ref2$easingFunc = _ref2.easingFunc,
        easingFunc = _ref2$easingFunc === void 0 ? 'easeInQuad' : _ref2$easingFunc,
        _ref2$fps = _ref2.fps,
        fps = _ref2$fps === void 0 ? 60 : _ref2$fps,
        duration = _ref2.duration,
        key = _ref2.key,
        _ref2$callbackOnEleme = _ref2.callbackOnElement,
        callbackOnElement = _ref2$callbackOnEleme === void 0 ? defaultOnNumberElement : _ref2$callbackOnEleme,
        _ref2$callBackOnMakeU = _ref2.callBackOnMakeUp,
        callBackOnMakeUp = _ref2$callBackOnMakeU === void 0 ? function (v) {
      return v;
    } : _ref2$callBackOnMakeU,
        renderCallback = _ref2.renderCallback;

    _classCallCheck(this, AnimeArray);

    this.__array = startArray;
    this.defaultNumber = defaultNumber;
    this.animeOptions = {
      easingFunc: _easing.EasingFunctions[easingFunc],
      fps: fps,
      duration: duration,
      renderCallback: renderCallback
    };
    this.__anime = null;
    this.key = key;
    this.callbackOnElement = callbackOnElement;
    this.callBackOnMakeUp = callBackOnMakeUp;
  }

  _createClass(AnimeArray, [{
    key: "value",
    get: function get() {
      return this.__array;
    }
  }, {
    key: "animeTo",
    value: function animeTo(newArray) {
      var _this = this;

      if (this.__anime) {
        this.__anime.stop();
      } // let uselessArray = null;


      var sliceLength = null;

      if (this.key) {
        var k = this.key;
        var p = [];
        newArray.forEach(function (elem) {
          var finded = _this.__array.find(function (__elem) {
            return __elem[k] === elem[k];
          });

          if (finded) {
            p.push(finded);
          } else {
            p.push(elem);
          }
        });
        this.__array = p;
      } else {
        var callBackOnMakeUp = this.callBackOnMakeUp;
        var span = newArray.length - this.__array.length;

        if (span > 0) {
          var ratio = this.__array.length > 0 ? newArray.length / this.__array.length : 0;
          var makeup = newArray.slice(this.__array.length);
          this.__array = this.__array.concat(callBackOnMakeUp(makeup, ratio, newArray[0]));
        }

        if (span < 0) {
          var _ratio = newArray.length > 0 ? this.__array.length / newArray.length : 0;

          sliceLength = newArray.length;
          newArray = newArray.concat(callBackOnMakeUp(this.__array.slice(newArray.length), _ratio, this.__array[0]));
        }
      }

      var beginState = this.__array.slice();

      var callbackOnElement = this.callbackOnElement;
      this.__anime = animate(this.animeOptions, function (ratio) {
        var i = 0;
        var l = _this.__array.length;

        for (; i < l; i++) {
          callbackOnElement(newArray[i], beginState[i], i, ratio, _this.__array);
        }

        if (ratio === 'end') {
          if (sliceLength) {
            _this.__array = _this.__array.slice(0, sliceLength);
          }
        }
      });
    }
  }]);

  return AnimeArray;
}();

exports.AnimeArray = AnimeArray;

var AnimeNumber = /*#__PURE__*/function () {
  function AnimeNumber(_ref3) {
    var _ref3$startNumber = _ref3.startNumber,
        startNumber = _ref3$startNumber === void 0 ? 0 : _ref3$startNumber,
        _ref3$easingFunc = _ref3.easingFunc,
        easingFunc = _ref3$easingFunc === void 0 ? 'easeInQuad' : _ref3$easingFunc,
        _ref3$fps = _ref3.fps,
        fps = _ref3$fps === void 0 ? 60 : _ref3$fps,
        duration = _ref3.duration,
        renderCallback = _ref3.renderCallback;

    _classCallCheck(this, AnimeNumber);

    // [number, number ....]
    this.__number = startNumber;
    this.animeOptions = {
      easingFunc: _easing.EasingFunctions[easingFunc],
      fps: fps,
      duration: duration,
      renderCallback: renderCallback
    };
    this.__anime = null;
  }

  _createClass(AnimeNumber, [{
    key: "value",
    get: function get() {
      return this.__number;
    }
  }, {
    key: "animeTo",
    value: function animeTo(newNumber) {
      var _this2 = this;

      if (this.__anime) {
        this.__anime.stop();
      }

      if (newNumber === this.__number) return;
      var span = newNumber - this.__number;
      var lastNumber = this.__number;
      this.__anime = animate(this.animeOptions, function (ratio) {
        if (ratio === 'end') {
          _this2.__number = newNumber;
        } else {
          _this2.__number = lastNumber + span * ratio;
        }
      });
    }
  }]);

  return AnimeNumber;
}();

exports.AnimeNumber = AnimeNumber;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EasingFunctions = void 0;

/*
 * Easing Functions - inspired from http://gizma.com/easing/
 * only considering the t value for the range [0, 1] => [0, 1]
 */
var EasingFunctions = {
  // no easing, no acceleration
  linear: function linear(t) {
    return t;
  },
  linearIv: function linearIv(s) {
    return s;
  },
  // accelerating from zero velocity
  easeInQuad: function easeInQuad(t) {
    return t * t;
  },
  easeInQuadIv: function easeInQuadIv(s) {
    return Math.sqrt(s);
  },
  // decelerating to zero velocity
  easeOutQuad: function easeOutQuad(t) {
    return t * (2 - t);
  },
  //   easeInQuadIv: t => 
  // acceleration until halfway, then deceleration
  easeInOutQuad: function easeInOutQuad(t) {
    return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
  },
  // accelerating from zero velocity 
  easeInCubic: function easeInCubic(t) {
    return t * t * t;
  },
  // decelerating to zero velocity 
  easeOutCubic: function easeOutCubic(t) {
    return --t * t * t + 1;
  },
  // acceleration until halfway, then deceleration 
  easeInOutCubic: function easeInOutCubic(t) {
    return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
  },
  // accelerating from zero velocity 
  easeInQuart: function easeInQuart(t) {
    return t * t * t * t;
  },
  // decelerating to zero velocity 
  easeOutQuart: function easeOutQuart(t) {
    return 1 - --t * t * t * t;
  },
  // acceleration until halfway, then deceleration
  easeInOutQuart: function easeInOutQuart(t) {
    return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
  },
  // accelerating from zero velocity
  easeInQuint: function easeInQuint(t) {
    return t * t * t * t * t;
  },
  // decelerating to zero velocity
  easeOutQuint: function easeOutQuint(t) {
    return 1 + --t * t * t * t * t;
  },
  // acceleration until halfway, then deceleration 
  easeInOutQuint: function easeInOutQuint(t) {
    return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
  }
};
exports.EasingFunctions = EasingFunctions;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = require("lodash");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// import Animation from './Animation';
// export default class Context extends Animation {
CanvasRenderingContext2D.prototype.wrapText = function (text, x, y, maxWidth, lineHeight) {
  if (typeof text !== 'string' || typeof x !== 'number' || typeof y !== 'number') {
    return;
  }

  var context = this;
  var canvas = context.canvas;

  if (typeof maxWidth === 'undefined') {
    maxWidth = canvas && canvas.width || 300;
  }

  if (typeof lineHeight === 'undefined') {
    lineHeight = 20;
  }

  var arrText = text.split(',');
  var line = '';

  for (var n = 0; n < arrText.length; n++) {
    var testLine = (line + arrText[n]).trim();
    var metrics = context.measureText(testLine);
    var testWidth = metrics.width;

    if (testWidth > maxWidth && n > 0) {
      context.fillText(line, x, y);
      line = arrText[n];
      y += lineHeight;
    } else {
      line = testLine;
    }
  }

  context.fillText(line.trim(), x, y);
};

var Context = /*#__PURE__*/function () {
  function Context(context) {
    var capture = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, Context);

    //   super(options.animation);
    this._context = context;
    this._commands = [];
    this._capture = capture;
    this._debug = false;
  }

  _createClass(Context, [{
    key: "handleCommand",
    value: function handleCommand(cmd) {
      if (this._capture) {
        this._commands.push(cmd);
      } else {
        cmd();
      }
    }
  }, {
    key: "clearCommands",
    value: function clearCommands() {
      this._commands = [];
    }
  }, {
    key: "functionCallWithCondition",
    value: function functionCallWithCondition(func, condition) {
      var _this = this;

      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      func = this._context[func];

      var c = function c() {
        if (condition()) {
          func.apply(_this._context, args);
        }
      };

      this.handleCommand(c);
    }
  }, {
    key: "functionCallWithDynamicParameter",
    value: function functionCallWithDynamicParameter(func) {
      var _this2 = this;

      for (var _len2 = arguments.length, argus = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        argus[_key2 - 1] = arguments[_key2];
      }

      func = this._context[func];

      var c = function c() {
        var parameters = argus.map(function (arg) {
          if ((0, _lodash.isFunction)(arg)) {
            return arg();
          }

          return arg;
        }); // // console.log(parameters)

        func.apply(_this2._context, parameters);
      };

      this.handleCommand(c);
    }
  }, {
    key: "functionCallWithLooping",
    value: function functionCallWithLooping(loopTargetFunc, func) {
      var _this3 = this;

      var c = function c() {
        var loopTarget = loopTargetFunc();
        loopTarget.forEach(function (t, idx) {
          func(_this3._context, loopTarget, t, idx);
        });
      };

      this.handleCommand(c);
    }
  }, {
    key: "propertySetWithDynamicParameter",
    value: function propertySetWithDynamicParameter(property, value) {
      var _this4 = this;

      var c = function c() {
        var v;

        if ((0, _lodash.isFunction)(value)) {
          v = value();
        }

        _this4._context[property] = v;
      };

      this.handleCommand(c);
    }
  }, {
    key: "addConditionBlockBegin",
    value: function addConditionBlockBegin(condition) {
      var c = {
        beginCondition: function beginCondition() {
          return condition();
        }
      };
      this.handleCommand(c);
    }
  }, {
    key: "addConditionBlockEnd",
    value: function addConditionBlockEnd() {
      var c = {
        endCondition: true
      };
      this.handleCommand(c);
    }
  }, {
    key: "functionsCallWithDynamicParameter",
    value: function functionsCallWithDynamicParameter(computeValues, operations) {
      var _this5 = this;

      var c = function c() {
        var values = computeValues();
        operations(_this5._context, values);
      };

      this.handleCommand(c);
    }
  }, {
    key: "functionsCall",
    value: function functionsCall(func) {
      var _this6 = this;

      var c = function c() {
        func(_this6._context);
      };

      this.handleCommand(c);
    }
  }, {
    key: "render",
    value: function render() {
      // let start;
      // if (this._debug) {
      //     start = Date.now();
      // }
      var condition = false;

      var _iterator = _createForOfIteratorHelper(this._commands),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var command = _step.value;

          if (command.endCondition) {
            condition = false;
            continue;
          }

          if (command.beginCondition) {
            condition = command.beginCondition();
            continue;
          }

          if (condition) {
            continue;
          }

          command();
        } // this.clearCommands();
        // if (this._debug) {
        //     // console.log(`RENDER_COMPLETE : ${Date.now() - start}ms`);
        // }

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "onStopAnimation",
    value: function onStopAnimation() {
      this.clearCommands();
    }
  }, {
    key: "debug",
    get: function get() {
      return this._debug;
    },
    set: function set(value) {
      this._debug = value;
    }
  }, {
    key: "canvas",
    get: function get() {
      return this._context.canvas;
    }
    /** ***** currentTransform*******/

  }, {
    key: "currentTransform",
    get: function get() {
      return this._context.currentTransform;
    }
    /** ***** direction*******/
    ,
    set: function set(value) {
      var _this7 = this;

      var c = function c() {
        _this7._context.currentTransform = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "direction",
    get: function get() {
      return this._context.direction;
    }
    /** ***** fillStyle*******/
    ,
    set: function set(value) {
      var _this8 = this;

      var c = function c() {
        _this8._context.direction = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "fillStyle",
    get: function get() {
      return this._context.fillStyle;
    }
    /** ***** filter*******/
    ,
    set: function set(value) {
      var _this9 = this;

      var c = function c() {
        _this9._context.fillStyle = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "filter",
    get: function get() {
      return this._context.filter;
    }
    /** ***** font*******/
    ,
    set: function set(value) {
      var _this10 = this;

      var c = function c() {
        _this10._context.filter = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "font",
    get: function get() {
      return this._context.font;
    }
    /** ***** globalAlpha*******/
    ,
    set: function set(value) {
      var _this11 = this;

      var c = function c() {
        _this11._context.font = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "globalAlpha",
    get: function get() {
      return this._context.globalAlpha;
    }
    /** ***** globalCompositeOperation*******/
    ,
    set: function set(value) {
      var _this12 = this;

      var c = function c() {
        _this12._context.globalAlpha = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "globalCompositeOperation",
    get: function get() {
      return this._context.globalCompositeOperation;
    }
    /** ***** imageSmoothingEnabled*******/
    ,
    set: function set(value) {
      var _this13 = this;

      var c = function c() {
        _this13._context.globalCompositeOperation = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "imageSmoothingEnabled",
    get: function get() {
      return this._context.imageSmoothingEnabled;
    }
    /** ***** imageSmoothingQuality*******/
    ,
    set: function set(value) {
      var _this14 = this;

      var c = function c() {
        _this14._context.imageSmoothingEnabled = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "imageSmoothingQuality",
    get: function get() {
      return this._context.imageSmoothingQuality;
    }
    /** ***** lineCap*******/
    ,
    set: function set(value) {
      var _this15 = this;

      var c = function c() {
        _this15._context.imageSmoothingQuality = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "lineCap",
    get: function get() {
      return this._context.lineCap;
    }
    /** ***** lineDashOffset*******/
    ,
    set: function set(value) {
      var _this16 = this;

      var c = function c() {
        _this16._context.lineCap = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "lineDashOffset",
    get: function get() {
      return this._context.lineDashOffset;
    }
    /** ***** lineJoin*******/
    ,
    set: function set(value) {
      var _this17 = this;

      var c = function c() {
        _this17._context.lineDashOffset = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "lineJoin",
    get: function get() {
      return this._context.lineJoin;
    }
    /** ***** lineWidth*******/
    ,
    set: function set(value) {
      var _this18 = this;

      var c = function c() {
        _this18._context.lineJoin = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "lineWidth",
    get: function get() {
      return this._context.lineWidth;
    }
    /** ***** miterLimit*******/
    ,
    set: function set(value) {
      var _this19 = this;

      var c = function c() {
        _this19._context.lineWidth = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "miterLimit",
    get: function get() {
      return this._context.miterLimit;
    }
    /** ***** shadowBlur*******/
    ,
    set: function set(value) {
      var _this20 = this;

      var c = function c() {
        _this20._context.miterLimit = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "shadowBlur",
    get: function get() {
      return this._context.shadowBlur;
    }
    /** ***** shadowColor*******/
    ,
    set: function set(value) {
      var _this21 = this;

      var c = function c() {
        _this21._context.shadowBlur = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "shadowColor",
    get: function get() {
      return this._context.shadowColor;
    }
    /** ***** shadowOffsetX*******/
    ,
    set: function set(value) {
      var _this22 = this;

      var c = function c() {
        _this22._context.shadowColor = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "shadowOffsetX",
    get: function get() {
      return this._context.shadowOffsetX;
    }
    /** ***** shadowOffsetY*******/
    ,
    set: function set(value) {
      var _this23 = this;

      var c = function c() {
        _this23._context.shadowOffsetX = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "shadowOffsetY",
    get: function get() {
      return this._context.shadowOffsetY;
    },
    set: function set(value) {
      var _this24 = this;

      var c = function c() {
        _this24._context.shadowOffsetY = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "strokeStyle",
    get: function get() {
      return this._context.strokeStyle;
    }
    /** ***** textAlign*******/
    ,
    set: function set(value) {
      var _this25 = this;

      var c = function c() {
        _this25._context.strokeStyle = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "textAlign",
    get: function get() {
      return this._context.textAlign;
    }
    /** ***** textBaseline*******/
    ,
    set: function set(value) {
      var _this26 = this;

      var c = function c() {
        _this26._context.textAlign = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "textBaseline",
    get: function get() {
      return this._context.textBaseline;
    },
    set: function set(value) {
      var _this27 = this;

      var c = function c() {
        _this27._context.textBaseline = value;
      };

      this.handleCommand(c);
    }
  }, {
    key: "addHitRegion",
    value: function addHitRegion() {
      var _this28 = this;

      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var c = function c() {
        var _this28$_context;

        (_this28$_context = _this28._context).addHitRegion.apply(_this28$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "arc",
    value: function arc() {
      var _this29 = this;

      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      var c = function c() {
        var _this29$_context;

        (_this29$_context = _this29._context).arc.apply(_this29$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "arcTo",
    value: function arcTo() {
      var _this30 = this;

      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      var c = function c() {
        var _this30$_context;

        (_this30$_context = _this30._context).arcTo.apply(_this30$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "beginPath",
    value: function beginPath() {
      var _this31 = this;

      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      var c = function c() {
        var _this31$_context;

        (_this31$_context = _this31._context).beginPath.apply(_this31$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "bezierCurveTo",
    value: function bezierCurveTo() {
      var _this32 = this;

      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      var c = function c() {
        var _this32$_context;

        (_this32$_context = _this32._context).bezierCurveTo.apply(_this32$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "clearHitRegions",
    value: function clearHitRegions() {
      var _this33 = this;

      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      var c = function c() {
        var _this33$_context;

        (_this33$_context = _this33._context).clearHitRegions.apply(_this33$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "clearRect",
    value: function clearRect() {
      var _this34 = this;

      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      var c = function c() {
        var _this34$_context;

        (_this34$_context = _this34._context).clearRect.apply(_this34$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "clip",
    value: function clip() {
      var _this35 = this;

      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      var c = function c() {
        var _this35$_context;

        (_this35$_context = _this35._context).clip.apply(_this35$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "closePath",
    value: function closePath() {
      var _this36 = this;

      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }

      var c = function c() {
        var _this36$_context;

        (_this36$_context = _this36._context).closePath.apply(_this36$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "createImageData",
    value: function createImageData() {
      var _this37 = this;

      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }

      var c = function c() {
        var _this37$_context;

        (_this37$_context = _this37._context).createImageData.apply(_this37$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "createLinearGradient",
    value: function createLinearGradient() {
      var _this38 = this;

      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        args[_key13] = arguments[_key13];
      }

      var c = function c() {
        var _this38$_context;

        (_this38$_context = _this38._context).createLinearGradient.apply(_this38$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "createPattern",
    value: function createPattern() {
      var _this39 = this;

      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        args[_key14] = arguments[_key14];
      }

      var c = function c() {
        var _this39$_context;

        (_this39$_context = _this39._context).createPattern.apply(_this39$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "createRadialGradient",
    value: function createRadialGradient() {
      var _this40 = this;

      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
        args[_key15] = arguments[_key15];
      }

      var c = function c() {
        var _this40$_context;

        (_this40$_context = _this40._context).createRadialGradient.apply(_this40$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "drawFocusIfNeeded",
    value: function drawFocusIfNeeded() {
      var _this41 = this;

      for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }

      var c = function c() {
        var _this41$_context;

        (_this41$_context = _this41._context).drawFocusIfNeeded.apply(_this41$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "drawImage",
    value: function drawImage() {
      var _this42 = this;

      for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
        args[_key17] = arguments[_key17];
      }

      var c = function c() {
        var _this42$_context;

        (_this42$_context = _this42._context).drawImage.apply(_this42$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "drawWidgetAsOnScreen",
    value: function drawWidgetAsOnScreen() {
      var _this43 = this;

      for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
        args[_key18] = arguments[_key18];
      }

      var c = function c() {
        var _this43$_context;

        (_this43$_context = _this43._context).drawWidgetAsOnScreen.apply(_this43$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "drawWindow",
    value: function drawWindow() {
      var _this44 = this;

      for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
        args[_key19] = arguments[_key19];
      }

      var c = function c() {
        var _this44$_context;

        (_this44$_context = _this44._context).drawWindow.apply(_this44$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "ellipse",
    value: function ellipse() {
      var _this45 = this;

      for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
        args[_key20] = arguments[_key20];
      }

      var c = function c() {
        var _this45$_context;

        (_this45$_context = _this45._context).ellipse.apply(_this45$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "fill",
    value: function fill() {
      var _this46 = this;

      for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
        args[_key21] = arguments[_key21];
      }

      var c = function c() {
        var _this46$_context;

        (_this46$_context = _this46._context).fill.apply(_this46$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "fillRect",
    value: function fillRect() {
      var _this47 = this;

      for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
        args[_key22] = arguments[_key22];
      }

      var c = function c() {
        var _this47$_context;

        (_this47$_context = _this47._context).fillRect.apply(_this47$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "fillText",
    value: function fillText() {
      var _this48 = this;

      for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
        args[_key23] = arguments[_key23];
      }

      var c = function c() {
        var _this48$_context;

        (_this48$_context = _this48._context).fillText.apply(_this48$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "getImageData",
    value: function getImageData() {
      var _this49 = this;

      for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
        args[_key24] = arguments[_key24];
      }

      var c = function c() {
        var _this49$_context;

        (_this49$_context = _this49._context).getImageData.apply(_this49$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "getLineDash",
    value: function getLineDash() {
      var _this50 = this;

      for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
        args[_key25] = arguments[_key25];
      }

      var c = function c() {
        var _this50$_context;

        (_this50$_context = _this50._context).getLineDash.apply(_this50$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "isPointInPath",
    value: function isPointInPath() {
      var _this51 = this;

      for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
        args[_key26] = arguments[_key26];
      }

      var c = function c() {
        var _this51$_context;

        (_this51$_context = _this51._context).isPointInPath.apply(_this51$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "isPointInStroke",
    value: function isPointInStroke() {
      var _this52 = this;

      for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {
        args[_key27] = arguments[_key27];
      }

      var c = function c() {
        var _this52$_context;

        (_this52$_context = _this52._context).isPointInStroke.apply(_this52$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "lineTo",
    value: function lineTo() {
      var _this53 = this;

      for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {
        args[_key28] = arguments[_key28];
      }

      var c = function c() {
        var _this53$_context;

        (_this53$_context = _this53._context).lineTo.apply(_this53$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "wrapText",
    value: function wrapText() {
      var _this54 = this;

      for (var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++) {
        args[_key29] = arguments[_key29];
      }

      var c = function c() {
        var _this54$_context;

        (_this54$_context = _this54._context).wrapText.apply(_this54$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "moveTo",
    value: function moveTo() {
      var _this55 = this;

      for (var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++) {
        args[_key30] = arguments[_key30];
      }

      var c = function c() {
        var _this55$_context;

        (_this55$_context = _this55._context).moveTo.apply(_this55$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "putImageData",
    value: function putImageData() {
      var _this56 = this;

      for (var _len31 = arguments.length, args = new Array(_len31), _key31 = 0; _key31 < _len31; _key31++) {
        args[_key31] = arguments[_key31];
      }

      var c = function c() {
        var _this56$_context;

        (_this56$_context = _this56._context).putImageData.apply(_this56$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "quadraticCurveTo",
    value: function quadraticCurveTo() {
      var _this57 = this;

      for (var _len32 = arguments.length, args = new Array(_len32), _key32 = 0; _key32 < _len32; _key32++) {
        args[_key32] = arguments[_key32];
      }

      var c = function c() {
        var _this57$_context;

        (_this57$_context = _this57._context).quadraticCurveTo.apply(_this57$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "rect",
    value: function rect() {
      var _this58 = this;

      for (var _len33 = arguments.length, args = new Array(_len33), _key33 = 0; _key33 < _len33; _key33++) {
        args[_key33] = arguments[_key33];
      }

      var c = function c() {
        var _this58$_context;

        (_this58$_context = _this58._context).rect.apply(_this58$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "removeHitRegion",
    value: function removeHitRegion() {
      var _this59 = this;

      for (var _len34 = arguments.length, args = new Array(_len34), _key34 = 0; _key34 < _len34; _key34++) {
        args[_key34] = arguments[_key34];
      }

      var c = function c() {
        var _this59$_context;

        (_this59$_context = _this59._context).removeHitRegion.apply(_this59$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "resetTransform",
    value: function resetTransform() {
      var _this60 = this;

      for (var _len35 = arguments.length, args = new Array(_len35), _key35 = 0; _key35 < _len35; _key35++) {
        args[_key35] = arguments[_key35];
      }

      var c = function c() {
        var _this60$_context;

        (_this60$_context = _this60._context).resetTransform.apply(_this60$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "restore",
    value: function restore() {
      var _this61 = this;

      for (var _len36 = arguments.length, args = new Array(_len36), _key36 = 0; _key36 < _len36; _key36++) {
        args[_key36] = arguments[_key36];
      }

      var c = function c() {
        var _this61$_context;

        (_this61$_context = _this61._context).restore.apply(_this61$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "rotate",
    value: function rotate() {
      var _this62 = this;

      for (var _len37 = arguments.length, args = new Array(_len37), _key37 = 0; _key37 < _len37; _key37++) {
        args[_key37] = arguments[_key37];
      }

      var c = function c() {
        var _this62$_context;

        (_this62$_context = _this62._context).rotate.apply(_this62$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "save",
    value: function save() {
      var _this63 = this;

      for (var _len38 = arguments.length, args = new Array(_len38), _key38 = 0; _key38 < _len38; _key38++) {
        args[_key38] = arguments[_key38];
      }

      var c = function c() {
        var _this63$_context;

        (_this63$_context = _this63._context).save.apply(_this63$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "scale",
    value: function scale() {
      var _this64 = this;

      for (var _len39 = arguments.length, args = new Array(_len39), _key39 = 0; _key39 < _len39; _key39++) {
        args[_key39] = arguments[_key39];
      }

      var c = function c() {
        var _this64$_context;

        (_this64$_context = _this64._context).scale.apply(_this64$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "scrollPathIntoView",
    value: function scrollPathIntoView() {
      var _this65 = this;

      for (var _len40 = arguments.length, args = new Array(_len40), _key40 = 0; _key40 < _len40; _key40++) {
        args[_key40] = arguments[_key40];
      }

      var c = function c() {
        var _this65$_context;

        (_this65$_context = _this65._context).scrollPathIntoView.apply(_this65$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "setLineDash",
    value: function setLineDash() {
      var _this66 = this;

      for (var _len41 = arguments.length, args = new Array(_len41), _key41 = 0; _key41 < _len41; _key41++) {
        args[_key41] = arguments[_key41];
      }

      var c = function c() {
        var _this66$_context;

        (_this66$_context = _this66._context).setLineDash.apply(_this66$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "setTransform",
    value: function setTransform() {
      var _this67 = this;

      for (var _len42 = arguments.length, args = new Array(_len42), _key42 = 0; _key42 < _len42; _key42++) {
        args[_key42] = arguments[_key42];
      }

      var c = function c() {
        var _this67$_context;

        (_this67$_context = _this67._context).setTransform.apply(_this67$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "stroke",
    value: function stroke() {
      var _this68 = this;

      for (var _len43 = arguments.length, args = new Array(_len43), _key43 = 0; _key43 < _len43; _key43++) {
        args[_key43] = arguments[_key43];
      }

      var c = function c() {
        var _this68$_context;

        (_this68$_context = _this68._context).stroke.apply(_this68$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "strokeRect",
    value: function strokeRect() {
      var _this69 = this;

      for (var _len44 = arguments.length, args = new Array(_len44), _key44 = 0; _key44 < _len44; _key44++) {
        args[_key44] = arguments[_key44];
      }

      var c = function c() {
        var _this69$_context;

        (_this69$_context = _this69._context).strokeRect.apply(_this69$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "strokeText",
    value: function strokeText() {
      var _this70 = this;

      for (var _len45 = arguments.length, args = new Array(_len45), _key45 = 0; _key45 < _len45; _key45++) {
        args[_key45] = arguments[_key45];
      }

      var c = function c() {
        var _this70$_context;

        (_this70$_context = _this70._context).strokeText.apply(_this70$_context, args);
      };

      this.handleCommand(c);
    }
  }, {
    key: "transform",
    value: function transform() {
      var _this71 = this;

      for (var _len46 = arguments.length, args = new Array(_len46), _key46 = 0; _key46 < _len46; _key46++) {
        args[_key46] = arguments[_key46];
      }

      var c = function c() {
        var _this71$_context;

        (_this71$_context = _this71._context).transform.apply(_this71$_context, args);
      };

      this.handleCommand(c);
    } // getTransform() {
    //     let c = () => {
    //         // console.log(this._context.getTransform());
    //     };
    //     this.handleCommand(c);
    // }

  }, {
    key: "translate",
    value: function translate() {
      var _this72 = this;

      for (var _len47 = arguments.length, args = new Array(_len47), _key47 = 0; _key47 < _len47; _key47++) {
        args[_key47] = arguments[_key47];
      }

      var c = function c() {
        var _this72$_context;

        (_this72$_context = _this72._context).translate.apply(_this72$_context, args);
      };

      this.handleCommand(c);
    }
  }]);

  return Context;
}();

exports["default"] = Context;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _tapable = require("tapable");

var _reactivity = require("@vue/reactivity");

var _schedule = require("../schedule");

var _data = _interopRequireDefault(require("./layers/data"));

var _coordinate = _interopRequireDefault(require("./layers/coordinate"));

var _chart = _interopRequireDefault(require("./layers/chart"));

var _overlayer = _interopRequireDefault(require("./layers/overlayer"));

var _utils = require("./utils");

var _contextProxy = _interopRequireDefault(require("../context-api/context-proxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var GlobalContext = /*#__PURE__*/function () {
  function GlobalContext() {
    _classCallCheck(this, GlobalContext);

    var _initSchedule = (0, _schedule.initSchedule)(),
        queueJob = _initSchedule.queueJob,
        nextTick = _initSchedule.nextTick;

    this.effect = function (fn) {
      (0, _reactivity.effect)(fn, {
        scheduler: queueJob
      });
    };

    this.$nextTick = nextTick; // this.globalData = globalData;

    this.boundingBox = (0, _reactivity.reactive)({
      width: 0,
      height: 0
    });
    this.DPRMat = null;
    this.DPR = 0;
    this.theme = {
      getColor: undefined,
      fontSize: undefined
    };
    this._mouse = (0, _reactivity.reactive)({
      x: undefined,
      y: undefined,
      event: undefined
    });
    this.Layout = (0, _reactivity.reactive)({
      translateMtx: undefined,
      translateMtxInvert: undefined,
      spanHorizontal: undefined,
      rawSpanHorizontal: undefined,
      spanVertical: undefined,
      xStep: undefined,
      xScaler: undefined,
      yStep: undefined,
      yScaler: undefined,
      left: undefined,
      top: undefined,
      right: undefined,
      bottom: undefined,
      xFloat: undefined
    });
    this.hooks = Object.freeze({
      initTheme: new _tapable.SyncHook(['container']),
      beforeInitGlobalLayout: new _tapable.SyncHook(['container', 'layoutContext']),
      initGlobalLayout: new _tapable.SyncHook(['container', 'layoutContext']),
      afterDataAndLayoutReady: new _tapable.SyncHook(),
      initCanvas: new _tapable.SyncHook(['canvas']),
      initContext: new _tapable.SyncHook(['context', 'canvasElem', 'container'])
    });
    this.globalData = new _data["default"]();
    this.Coordinate = new _coordinate["default"]();
    this.Chart = new _chart["default"]();
    this.Overlayer = new _overlayer["default"]();
  }

  _createClass(GlobalContext, [{
    key: "init",
    value: function init(container, dataOptions) {
      var _this = this;

      this.hooks.initTheme.call(container);
      this.container = container;
      this.globalData.init(dataOptions);
      var layoutContext = {
        canvasWrapper: null,
        legendWrapper: null
      };
      this.hooks.beforeInitGlobalLayout.call(container, layoutContext);
      this.hooks.initGlobalLayout.call(container, layoutContext);
      this.hooks.afterDataAndLayoutReady.call();
      this.initContext(layoutContext.canvasWrapper, function (ContextProxy, canvas) {
        _this.Coordinate.context2d = ContextProxy;
        _this.Coordinate.canvasElm = canvas;

        _this.Coordinate.init();
      });
      this.initContext(layoutContext.canvasWrapper, function (ContextProxy, canvas) {
        _this.Chart.context2d = ContextProxy;
        _this.Chart.canvasElm = canvas;

        _this.Chart.init();
      });
      this.initContext(layoutContext.canvasWrapper, function (ContextProxy, canvas) {
        _this.Overlayer.context2d = ContextProxy;
        _this.Overlayer.canvasElm = canvas;

        _this.Overlayer.init(layoutContext.canvasWrapper);
      });
    }
  }, {
    key: "initContext",
    value: function initContext(container, callback) {
      var _createCanvas = (0, _utils.createCanvas)(container),
          context2d = _createCanvas.context2d,
          canvas = _createCanvas.canvas;

      this.hooks.initCanvas.call(canvas);
      var ContextProxy = new _contextProxy["default"](context2d, true);
      this.hooks.initContext.call(ContextProxy, canvas, container);
      callback(ContextProxy, canvas);
    }
  }, {
    key: "setTransform",
    value: function setTransform(ctx) {
      var mtx = this.Coordinate.transformMeta.transformMtx;
      ctx.setTransform(mtx[0], mtx[1], mtx[2], mtx[3], mtx[4], mtx[5]);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      this.effect(function () {
        var _this2$Coordinate = _this2.Coordinate,
            context2d = _this2$Coordinate.context2d,
            canvasElm = _this2$Coordinate.canvasElm;
        (0, _utils.clearCanvas)(context2d, canvasElm);

        _this2.setTransform(context2d);

        _this2.Coordinate.render();
      });
      this.effect(function () {
        console.log('render begin');
        var _this2$Chart = _this2.Chart,
            context2d = _this2$Chart.context2d,
            canvasElm = _this2$Chart.canvasElm;
        (0, _utils.clearCanvas)(context2d, canvasElm);

        _this2.setTransform(context2d);

        _this2.Chart.render();
      });
      this.effect(function () {
        var _this2$Overlayer = _this2.Overlayer,
            context2d = _this2$Overlayer.context2d,
            canvasElm = _this2$Overlayer.canvasElm;
        (0, _utils.clearCanvas)(context2d, canvasElm);

        _this2.setTransform(context2d);

        _this2.Overlayer.render();
      });
      this.Coordinate.afterRender();
      this.Chart.afterRender();
      this.Overlayer.afterRender();
    }
  }, {
    key: "resetData",
    value: function resetData(options) {
      this.globalData.resetData(options);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      (0, _utils.destroyCanvas)(this.container, this.Overlayer.canvasElm);
      (0, _utils.destroyCanvas)(this.container, this.Chart.canvasElm);
      (0, _utils.destroyCanvas)(this.container, this.Coordinate.canvasElm);
    }
  }]);

  return GlobalContext;
}();

var _default = GlobalContext;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initContext = initContext;

var _globalContext = _interopRequireDefault(require("./global-context"));

var _DPIPlugin = _interopRequireDefault(require("../plugins/inner/DPIPlugin"));

var _ThemePlugin = _interopRequireDefault(require("../plugins/inner/ThemePlugin"));

var _LayoutPlugin = _interopRequireDefault(require("../plugins/inner/LayoutPlugin"));

var _EventListenerPlugin = _interopRequireDefault(require("../plugins/inner/EventListenerPlugin"));

var _GlobalLayoutPlugin = _interopRequireDefault(require("../plugins/inner/GlobalLayoutPlugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function initContext(plugins) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var globalCtx = new _globalContext["default"]();
  var innerPlugins = [new _ThemePlugin["default"](options.theme), new _LayoutPlugin["default"](options.layout), new _EventListenerPlugin["default"](), new _GlobalLayoutPlugin["default"](), new _DPIPlugin["default"]()];
  plugins = innerPlugins.concat(plugins);
  plugins.forEach(function (plugin) {
    plugin.apply(globalCtx);
  });
  return globalCtx;
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCanvas = createCanvas;
exports.clearCanvas = clearCanvas;
exports.setTransform = setTransform;
exports.destroyCanvas = destroyCanvas;

function createCanvas(container) {
  var canvasElem = document.createElement('canvas');
  var rect = container.getBoundingClientRect();
  canvasElem.width = rect.width;
  canvasElem.height = rect.height;
  container.appendChild(canvasElem);
  canvasElem.style.position = 'absolute';
  var context2d = canvasElem.getContext('2d');
  return {
    canvas: canvasElem,
    context2d: context2d
  };
}

function clearCanvas(ctx, canvasElem) {
  ctx.clearCommands && ctx.clearCommands();
  var width = canvasElem.width;
  var height = canvasElem.height;
  ctx.setTransform();
  ctx.clearRect(0, 0, width, height);
}

function setTransform(ctx, mtx) {
  ctx.setTransform(mtx[0], mtx[1], mtx[2], mtx[3], mtx[4], mtx[5]);
}

function destroyCanvas(container, canvas) {
  container.removeChild(canvas);
} // export function createRenderEffect(target, mtx) {
//     const {
//         context2d,
//         canvasElm,
//     } = target;
//     clearCanvas(context2d, canvasElm);
//     setTransform(context2d, mtx);
//     target.render();
// }
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initSchedule = initSchedule;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/** https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/scheduler.ts */
var __DEV__ = true;

function callWithErrorHandling(fn, instance, type, args) {
  var res;

  try {
    res = args ? fn.apply(void 0, _toConsumableArray(args)) : fn();
  } catch (err) {// console.log(err);
  }

  return res;
}

var RECURSION_LIMIT = 50;

function initSchedule() {
  var queue = [];
  var postFlushCbs = []; // const p = Promise.resolve()

  var isFlushing = false;
  var isFlushPending = false; // const p = Promise.resolve();
  // export function nextTick(fn) {
  //   return fn ? p.then(fn) : p
  // }
  // 绘图用到的是 requestAnimationFrame

  function nextTick(fn) {
    return fn ? requestAnimationFrame(function () {
      fn();
    }) : requestAnimationFrame(); // return fn ? p.then(fn) : p
  }

  function queueJob(job) {
    if (!queue.includes(job)) {
      queue.push(job);
      queueFlush();
    }
  }

  function queueFlush() {
    if (!isFlushing && !isFlushPending) {
      isFlushPending = true;
      nextTick(flushJobs);
    }
  }

  function flushPostFlushCbs(seen) {
    if (postFlushCbs.length) {
      var cbs = _toConsumableArray(new Set(postFlushCbs));

      postFlushCbs.length = 0;

      if (__DEV__) {
        seen = seen || new Map();
      }

      for (var i = 0; i < cbs.length; i++) {
        if (__DEV__) {
          checkRecursiveUpdates(seen, cbs[i]);
        }

        cbs[i]();
      }
    }
  }

  var getId = function getId(job) {
    return job.id == null ? Infinity : job.id;
  };

  function flushJobs(seen) {
    isFlushPending = false;
    isFlushing = true;
    var job;

    if (__DEV__) {
      seen = seen || new Map();
    } // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child so its render effect will have smaller
    //    priority number)
    // 2. If a component is unmounted during a parent component's update,
    //    its update can be skipped.
    // Jobs can never be null before flush starts, since they are only invalidated
    // during execution of another flushed job.


    queue.sort(function (a, b) {
      return getId(a) - getId(b);
    });

    while ((job = queue.shift()) !== undefined) {
      if (job === null) {
        continue;
      }

      if (__DEV__) {
        checkRecursiveUpdates(seen, job);
      }

      callWithErrorHandling(job, null, 'SCHEDULER');
    }

    flushPostFlushCbs(seen);
    isFlushing = false; // some postFlushCb queued jobs!
    // keep flushing until it drains.

    if (queue.length || postFlushCbs.length) {
      flushJobs(seen);
    }
  }

  function checkRecursiveUpdates(seen, fn) {
    if (!seen.has(fn)) {
      seen.set(fn, 1);
    } else {
      var count = seen.get(fn);

      if (count > RECURSION_LIMIT) {
        throw new Error('Maximum recursive updates exceeded. ' + "You may have code that is mutating state in your component's " + 'render function or updated hook or watcher source function.');
      } else {
        seen.set(fn, count + 1);
      }
    }
  }

  return {
    queueJob: queueJob,
    nextTick: nextTick
  };
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findMinMax = findMinMax;
exports.decodeStringValues = decodeStringValues;
exports.distToSegmentSquared = distToSegmentSquared;
exports.distToSegment = distToSegment;
exports.bezierPoints = bezierPoints;
exports.distToBezierSegmentSquared = distToBezierSegmentSquared;
exports.pointInPolygon = pointInPolygon;
exports.rountToRange = rountToRange;
exports.getYAxis = getYAxis;
exports.getXAxis = getXAxis;
exports.getXAxisDiscrete = getXAxisDiscrete;
exports.log10 = exports.REFERENCE_TYPE = void 0;

var _lodash = require("lodash");

var _bezierJs = require("bezier-js");

var _bignumber = _interopRequireDefault(require("bignumber.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function findMinMax(data, legend) {
  return {
    max: (0, _lodash.get)((0, _lodash.maxBy)(data, function (o) {
      return (0, _lodash.get)(o, legend, -Infinity);
    }), legend),
    min: (0, _lodash.get)((0, _lodash.minBy)(data, function (o) {
      return (0, _lodash.get)(o, legend, Infinity);
    }), legend)
  };
}

var REFERENCE_TYPE = {
  discrete: 'discrete',
  continuous: 'continuous'
};
exports.REFERENCE_TYPE = REFERENCE_TYPE;

function decodeStringValues(expr) {
  if (typeof expr === 'number') return function () {
    return expr;
  };

  if (typeof expr === 'string') {
    if (expr.endsWith('%')) {
      return function (num) {
        return num * parseFloat(expr) / 100;
      };
    }

    if (expr.endsWith('px')) {
      return function () {
        return parseFloat(expr);
      };
    }
  }

  throw 'type false';
}

function sqr(x) {
  return x * x;
}

function dist2(v, w) {
  return sqr(v[0] - w[0]) + sqr(v[1] - w[1]);
} // p - point
// v - start point of segment
// w - end point of segment


function distToSegmentSquared(p, v, w) {
  var l2 = dist2(v, w);
  if (l2 === 0) return dist2(p, v);
  var t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;
  t = Math.max(0, Math.min(1, t));
  return dist2(p, [v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1])]);
} // p - point
// v - start point of segment
// w - end point of segment


function distToSegment(p, v, w) {
  return Math.sqrt(distToSegmentSquared(p, v, w));
}

function bezierPoints(p1, p2) {
  var span = (p2[0] - p1[0]) / 2;
  return [p1[0] + span, p1[1], p2[0] - span, p2[1], p2[0], p2[1]];
}

function distToBezierSegmentSquared(p, v, w) {
  var bp = bezierPoints(v, w);
  var b = new _bezierJs.Bezier(v[0], v[1], bp[0], bp[1], bp[2], bp[3], bp[4], bp[5]);
  var point = b.project({
    x: p[0],
    y: p[1]
  });
  var d = dist2(p, [point.x, point.y]);
  return d;
}

function pointInPolygon(point, vs) {
  // ray-casting algorithm based on
  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
  var x = point[0],
      y = point[1];
  var inside = false;

  for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
    var xi = vs[i][0],
        yi = vs[i][1];
    var xj = vs[j][0],
        yj = vs[j][1];
    var intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect) inside = !inside;
  }

  return inside;
}

var log10 = Math.log10 || function (x) {
  var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
  // Check for whole powers of 10,
  // which due to floating point rounding error should be corrected.

  var powerOf10 = Math.round(exponent);
  var isPowerOf10 = x === Math.pow(10, powerOf10);
  return isPowerOf10 ? powerOf10 : exponent;
};

exports.log10 = log10;

function convert(n) {
  var order = Math.floor(Math.log(n) / Math.LN10 + 0.000000001); // because float math sucks like that

  return order;
}

function divisors(integer, step) {
  var max = Math.max(integer - step, step);

  for (var i = 0; i < max; i++) {
    var top = step + i;
    var bottom = step - i;

    if (top < integer) {
      if (integer % top === 0) return top;
    }

    if (bottom > 0) {
      if (integer % bottom === 0) return bottom;
    }
  }

  return integer;
}

function rountToRange(yMinMax, step) {
  var min = yMinMax.min,
      max = yMinMax.max;

  if (min === max) {
    var _newStep = divisors(10, step);

    return {
      min: min,
      max: max + 1,
      step: _newStep,
      stepSpan: +new _bignumber["default"](1).dividedBy(_newStep)
    };
  }

  var span = max - min;
  var magnitude = convert(span) - 1;
  var p = new _bignumber["default"](10);
  var exp = +p.exponentiatedBy(magnitude);
  var newMin = +new _bignumber["default"](Math.floor(min / exp)).multipliedBy(exp);
  var newMax = +new _bignumber["default"](Math.ceil(max / exp)).multipliedBy(exp);
  var newSpan = +new _bignumber["default"](newMax).minus(newMin);
  var minsteps = +new _bignumber["default"](newSpan).dividedBy(exp);
  var newStep = divisors(minsteps, step);
  var stepSpan = +new _bignumber["default"](newSpan).dividedBy(newStep); // // console.log(newMin, newMax, newStep, stepSpan)

  return {
    min: newMin,
    max: newMax,
    step: newStep,
    stepSpan: stepSpan
  };
}

function getYAxis(minmax) {
  var i = minmax.min;
  var values = [];

  while (i <= minmax.max) {
    values.push(i);
    i = +new _bignumber["default"](i).plus(minmax.stepSpan);
  }

  return values;
}

function getXAxis(min, max, span) {
  var values = [];
  var p = Math.round((max - min) / span);
  var start = min;

  while (start < max) {
    values.push({
      value: start
    });
    start += p;
  }

  values.push({
    value: max
  });
  return values;
}

function getXAxisDiscrete(ref, span) {
  if (span > ref.length || span === ref.length) {
    return ref.map(function (r, step) {
      return {
        step: step,
        value: r
      };
    });
  }

  var values = [];
  var length = ref.length;
  var step = Math.round(length / (span - 1));
  var i = 0;

  while (ref[i]) {
    values.push({
      // step: i,
      value: ref[i]
    });
    i += step;
  }

  if (i !== length - 1) {
    values.push({
      // step: length - 1,
      value: ref[length - 1]
    });
  }

  return values;
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BaseContext = /*#__PURE__*/function () {
  function BaseContext() {
    _classCallCheck(this, BaseContext);
  }

  _createClass(BaseContext, [{
    key: "context2d",
    get: function get() {
      return this._context2d;
    },
    set: function set(val) {
      if (this._context2d) {
        throw 'you cannot replace context2d!';
      }

      this._context2d = val;
    }
  }, {
    key: "canvasElm",
    get: function get() {
      return this._canvasElm;
    },
    set: function set(val) {
      if (this._canvasElm) {
        throw 'you cannot replace canvasElm!';
      }

      this._canvasElm = val;
    }
  }, {
    key: "canvasCacheImage",
    get: function get() {
      var width = this._canvasElm.width;
      var height = this._canvasElm.height;
      return this.context2d.createImageData(width, height);
    }
  }]);

  return BaseContext;
}();

var _default = BaseContext;
exports["default"] = _default;
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _reactivity = require("@vue/reactivity");

var _tapable = require("tapable");

var _base = _interopRequireDefault(require("./base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Chart = /*#__PURE__*/function (_BaseContext) {
  _inherits(Chart, _BaseContext);

  var _super = _createSuper(Chart);

  function Chart() {
    var _this;

    _classCallCheck(this, Chart);

    _this = _super.call(this);
    _this.hooks = {
      initChart: new _tapable.SyncHook(['context2d']),
      renderChart: new _tapable.SyncHook(['context2d']),
      afterRenderChart: new _tapable.SyncHook(['context2d'])
    };
    _this.chartMeta = (0, _reactivity.reactive)({
      seriesInCoord: [],
      // legend 维度区分的信息   数据经过坐标系变换后的位置
      seriesMeta: [],
      // x 维度纵向的信息   元数据信息
      // legendXInCoord:     {}, // 以x为索引的数据 x: [series1, series2, ... ]
      // xSeries:            [], // x索引列表
      // indexMapping:       [], // legend过滤后序列图
      focused: null // 当前聚焦数据集
      // lastFocused:        undefined, // 上一次聚焦数据集
      // focusSource:        undefined,

    });
    return _this;
  }

  _createClass(Chart, [{
    key: "init",
    value: function init() {
      this.hooks.initChart.call(this.context2d);
    }
  }, {
    key: "render",
    value: function render() {
      this.hooks.renderChart.call(this.context2d);
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.hooks.afterRenderChart.call(this.context2d);
    }
  }]);

  return Chart;
}(_base["default"]);

var _default = Chart;
exports["default"] = _default;
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _reactivity = require("@vue/reactivity");

var _tapable = require("tapable");

var _glMatrix = require("gl-matrix");

var _base = _interopRequireDefault(require("./base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Coordinate = /*#__PURE__*/function (_BaseContext) {
  _inherits(Coordinate, _BaseContext);

  var _super = _createSuper(Coordinate);

  function Coordinate() {
    var _this;

    _classCallCheck(this, Coordinate);

    _this = _super.call(this);
    _this.hooks = {
      initCoord: new _tapable.SyncHook(['context2d']),
      renderCoord: new _tapable.SyncHook(['context2d']),
      afterRenderChart: new _tapable.SyncHook(['context2d'])
    };
    _this.transformMeta = (0, _reactivity.reactive)({
      originVec: _glMatrix.vec2.create(),
      borderVec: _glMatrix.vec2.create(),
      transformMtxRaw: _glMatrix.mat2d.create(),
      transformMtxRawInvert: _glMatrix.mat2d.create(),
      transformMtx: _glMatrix.mat2d.create(),
      transformMtxInvert: _glMatrix.mat2d.create(),
      convertDataToCoordX: undefined,
      convertDataToCoordY: undefined,
      x_scaler: 1,
      xFloat: 0,
      formatFunc: {
        xFormat: function xFormat(x) {
          return x;
        }
      }
    });
    return _this;
  }

  _createClass(Coordinate, [{
    key: "init",
    value: function init() {
      this.hooks.initCoord.call(this.context2d);
    }
  }, {
    key: "render",
    value: function render() {
      this.hooks.renderCoord.call(this.context2d);
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.hooks.afterRenderChart.call(this.context2d);
    }
  }]);

  return Coordinate;
}(_base["default"]);

var _default = Coordinate;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _reactivity = require("@vue/reactivity");

var _tapable = require("tapable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Data = /*#__PURE__*/function () {
  function Data() {
    _classCallCheck(this, Data);

    this.source = (0, _reactivity.reactive)({});
    this.sourceMeta = (0, _reactivity.reactive)({});
    this.hooks = Object.freeze({
      initData: new _tapable.SyncHook(['dataOptions', 'source', 'sourceMeta']),
      // afterInitData: new SyncHook(),
      resetData: new _tapable.SyncHook(['dataOptions', 'source', 'sourceMeta'])
    });
  }

  _createClass(Data, [{
    key: "init",
    value: function init(dataOptions) {
      this.hooks.initData.call(dataOptions, this.source, this.sourceMeta); // this.hooks.afterInitData.call();
    }
  }, {
    key: "resetData",
    value: function resetData(dataOptions) {
      this.hooks.resetData.call(dataOptions, this.source, this.sourceMeta);
    }
  }]);

  return Data;
}();

var _default = Data;
exports["default"] = _default;
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _reactivity = require("@vue/reactivity");

var _tapable = require("tapable");

var _base = _interopRequireDefault(require("./base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Overlayer = /*#__PURE__*/function (_BaseContext) {
  _inherits(Overlayer, _BaseContext);

  var _super = _createSuper(Overlayer);

  function Overlayer() {
    var _this;

    _classCallCheck(this, Overlayer);

    _this = _super.call(this);
    _this.hooks = {
      registOverlayer: new _tapable.SyncHook(),
      initOverlayer: new _tapable.SyncHook(['container', 'context2d']),
      renderOverLayer: new _tapable.SyncHook(['context2d']),
      afterRenderChart: new _tapable.SyncHook(['context2d'])
    };
    _this.overLayerMeta = (0, _reactivity.reactive)({
      focus: undefined // 聚焦的类别

    });
    _this.registedRenderFunction = [];
    _this.initFunctionCache = [];
    _this.tempCache = {};
    return _this;
  }

  _createClass(Overlayer, [{
    key: "registElement",
    value: function registElement() {
      this.hooks.registOverlayer.call();
    }
  }, {
    key: "init",
    value: function init(container) {
      this.hooks.initOverlayer.call(container, this.context2d);
    }
  }, {
    key: "render",
    value: function render() {
      this.hooks.renderOverLayer.call(this.context2d);
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.hooks.afterRenderChart.call(this.context2d);
    }
  }]);

  return Overlayer;
}(_base["default"]);

var _default = Overlayer;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Data1D = /*#__PURE__*/function () {
  function Data1D() {
    _classCallCheck(this, Data1D);
  }

  _createClass(Data1D, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      var name = 'Data1D';
      globalCtx.globalData.hooks.initData.tap(name, function (dataOptions, source, sourceMeta) {
        _this.init(globalCtx, dataOptions, source, sourceMeta);
      });
      globalCtx.globalData.hooks.resetData.tap(name, function (dataOptions, source) {
        _this.resetData(dataOptions, source);
      });
    }
  }, {
    key: "init",
    value: function init(globalCtx, dataOptions, source) {
      Object.assign(source, {
        data: [],
        legend: []
      });
      this.resetData(dataOptions, source);
    }
  }, {
    key: "resetData",
    value: function resetData(dataOptions, source) {
      var s = dataOptions.series;
      Object.assign(source, {
        originSeries: dataOptions.series,
        legend: s.map(function (seri) {
          return {
            name: seri.name,
            disabled: false
          };
        }),
        data: s.map(function (seri) {
          return seri.value;
        })
      });
    }
  }]);

  return Data1D;
}();

var _default = Data1D;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = require("../../shared/utils");

var _lodash = require("lodash");

var _bignumber = _interopRequireDefault(require("bignumber.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Data2D = /*#__PURE__*/function () {
  function Data2D() {
    _classCallCheck(this, Data2D);
  }

  _createClass(Data2D, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      var name = 'Data2D';
      globalCtx.globalData.hooks.initData.tap(name, function (dataOptions, source, sourceMeta) {
        _this.init(globalCtx, dataOptions, source, sourceMeta);
      });
      globalCtx.globalData.hooks.resetData.tap(name, function (dataOptions, source) {
        _this.resetData(dataOptions, source);
      });
    }
  }, {
    key: "init",
    value: function init(globalCtx, dataOptions, source, sourceMeta) {
      Object.assign(source, {
        data: [],
        legend: [],
        reference: {},
        stack: false
      });
      Object.assign(sourceMeta, {
        xMinMax: {},
        yMinMax: {},
        xDataSpan: {},
        yDataSpan: {}
      });
      this.resetData(dataOptions, source);
      this.initEffect(globalCtx, source, sourceMeta);
    }
  }, {
    key: "resetData",
    value: function resetData(dataOptions, source) {
      var s = dataOptions.series;
      var reference = dataOptions.reference;
      var dataLegend = [];
      var ref = s[0].values.map(function (v) {
        return v[0];
      });
      s.forEach(function (_ref) {
        var name = _ref.name;
        dataLegend.push({
          name: name,
          disabled: false
        });
      });
      Object.assign(source, {
        // data: cloneDeep(dataSource),
        originSeries: dataOptions.series,
        legend: (0, _lodash.cloneDeep)(dataLegend),
        reference: Object.assign({
          ref: ref,
          type: _utils.REFERENCE_TYPE.continuous
        }, reference),
        xAxis: dataOptions.xAxis,
        yAxis: dataOptions.yAxis,
        stack: dataOptions.stack
      });
    }
  }, {
    key: "initEffect",
    value: function initEffect(globalCtx, source, sourceMeta) {
      globalCtx.effect(function () {
        console.log('effect init data');
        var originSeries = source.originSeries,
            legend = source.legend,
            xAxis = source.xAxis,
            yAxis = source.yAxis,
            stack = source.stack,
            reference = source.reference;
        var dataSource = [];
        var valueReducer = [];
        originSeries.forEach(function (_ref2, idx) {
          var values = _ref2.values;

          if (stack) {
            var lastValue = [];
            var isLgDisabled = legend[idx].disabled;
            values.forEach(function (value, idx) {
              if (!valueReducer[idx]) {
                valueReducer[idx] = [value[0], new _bignumber["default"](0)];
              }

              lastValue[idx] = [valueReducer[idx][0], +valueReducer[idx][1]];
              valueReducer[idx][1] = valueReducer[idx][1].plus(isLgDisabled ? 0 : +value[1]);
            });
            dataSource.push(valueReducer.map(function (v, i) {
              return [v[0], +v[1], lastValue[i][1], +values[i][1]];
            }));
          } else {
            dataSource.push(values);
          }
        });
        var xSpan = xAxis.span || 5;
        var ySpan = yAxis.span || 3;
        var xmin = typeof xAxis.min === 'number' ? xAxis.min : Infinity;
        var ymin = typeof yAxis.min === 'number' ? yAxis.min : Infinity;
        var xmax = typeof xAxis.max === 'number' ? xAxis.max : -Infinity;
        var ymax = typeof yAxis.max === 'number' ? yAxis.max : -Infinity;
        legend.forEach(function (l, i) {
          if (!l.disabled) {
            var values = dataSource[i];
            values.forEach(function (v) {
              var y = v[1];
              var x = v[0];
              xmin = Math.min(x, xmin);
              xmax = Math.max(x, xmax);
              ymin = Math.min(y, ymin);
              ymax = Math.max(y, ymax);
            });
          }
        });
        var ref = dataSource[0].map(function (v) {
          return v[0];
        });
        console.log(ref);
        var yrange = (0, _utils.rountToRange)({
          min: ymin,
          max: ymax
        }, ySpan);
        var yValues = (0, _utils.getYAxis)(yrange);
        var xValues = reference.type === _utils.REFERENCE_TYPE.continuous ? (0, _utils.getXAxis)(xmin, xmax, xSpan) : (0, _utils.getXAxisDiscrete)(ref, xSpan);
        console.log(xValues, xSpan);
        Object.assign(source, {
          data: (0, _lodash.cloneDeep)(dataSource)
        });
        Object.assign(sourceMeta, {
          yMeta: {
            min: yValues[0],
            max: yValues[yValues.length - 1],
            values: yValues,
            formatter: yAxis.format || function (d) {
              return d;
            }
          },
          xMeta: {
            min: xmin,
            max: xmax,
            values: xValues,
            formatter: xAxis.format || function (d) {
              return d;
            }
          }
        });
      });
    }
  }]);

  return Data2D;
}();

var _default = Data2D;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _glMatrix = require("gl-matrix");

var _utils = require("../../context/utils");

var _anime = require("../../animation/anime");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var cacheCanvas = document.createElement('canvas');
var cachhCanvasContext = cacheCanvas.getContext('2d');

var Coord2D = /*#__PURE__*/function () {
  function Coord2D() {
    _classCallCheck(this, Coord2D);

    this.name = 'Coord2D';
    this.animationContext = {};
  }

  _createClass(Coord2D, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      globalCtx.Coordinate.hooks.initCoord.tap(this.name, function (context2d) {
        _this.init(context2d, globalCtx);
      });
      globalCtx.Coordinate.hooks.renderCoord.tap(this.name, function (context2d) {
        _this.render(context2d, globalCtx);
      });
      globalCtx.Coordinate.hooks.afterRenderChart.tap(this.name, function (context2d) {
        _this.afterRender(context2d, globalCtx);
      });
      globalCtx.hooks.afterDataAndLayoutReady.tap(this.name, function () {
        _this.reFlow(globalCtx);
      });
    }
  }, {
    key: "reFlow",
    value: function reFlow(globalCtx) {
      globalCtx.effect(function () {
        console.log('effect coord2d layout');
        var bounding = globalCtx.Layout.bounding;
        var legend = globalCtx.globalData.source.legend;
        var boundingBox = globalCtx.boundingBox;
        var _globalCtx$globalData = globalCtx.globalData.sourceMeta,
            xMeta = _globalCtx$globalData.xMeta,
            yMeta = _globalCtx$globalData.yMeta;
        var fontSize = globalCtx.theme.fontSize;
        var yTextWidth = 0;
        var textmin = yMeta.formatter(yMeta.min);
        var textmax = yMeta.formatter(yMeta.max);
        cachhCanvasContext.save();
        cachhCanvasContext.font = "".concat(fontSize / 1.4, "px arial");
        cachhCanvasContext.lineWidth = 1.4;
        var ytext = textmin.length > textmax.length ? textmin : textmax;
        yTextWidth = cachhCanvasContext.measureText("".concat(ytext, "000")).width; // console.log(ytext, yTextWidth);

        cachhCanvasContext.restore();
        var spanHorizontal = boundingBox.width - bounding.left - bounding.right - yTextWidth;
        var spanVertical = boundingBox.height - bounding.top - bounding.bottom;
        var data = globalCtx.globalData.source.data;
        var series_size = 0;
        data.forEach(function (d) {
          series_size = Math.max(d.length, series_size);
        });
        var spanHorizontalwithpadding = spanHorizontal - bounding.xFloat * 2;
        var seriesStep = spanHorizontalwithpadding / series_size;

        var mtx = _glMatrix.mat2d.fromValues(1, 0, 0, 1, bounding.left + yTextWidth, bounding.top);

        var imtx = _glMatrix.mat2d.create();

        _glMatrix.mat2d.invert(imtx, mtx);

        Object.assign(globalCtx.Layout, {
          translateMtx: mtx,
          translateMtxInvert: imtx,
          spanHorizontal: spanHorizontal,
          spanVertical: spanVertical,
          seriesStep: seriesStep,
          xStep: (spanHorizontal - bounding.xFloat * 2) / (xMeta.values.length - 1),
          xScaler: (spanHorizontal - bounding.xFloat * 2) / (xMeta.max - xMeta.min),
          yStep: spanVertical / (yMeta.values.length - 1),
          yScaler: spanVertical / (yMeta.max - yMeta.min),
          left: bounding.left + yTextWidth,
          right: boundingBox.width - bounding.left - yTextWidth,
          top: bounding.top,
          bottom: boundingBox.height - bounding.bottom,
          xFloat: bounding.xFloat,
          rawSpanHorizontal: boundingBox.width - bounding.left - bounding.right
        });
        console.log(globalCtx.Layout);
      });
    }
  }, {
    key: "init",
    value: function init(context2d, globalCtx) {
      var _this2 = this;

      var render = context2d.render.bind(context2d);
      var renderCallback = (0, _anime.makeRenderCallback)(render);
      globalCtx.effect(function () {
        console.log('effect init coord');
        var legend = globalCtx.globalData.source.legend;
        var _globalCtx$globalData2 = globalCtx.globalData.sourceMeta,
            xMeta = _globalCtx$globalData2.xMeta,
            yMeta = _globalCtx$globalData2.yMeta; // 没有可显示的legend 不需要重绘坐标系

        var disabledNum = legend.filter(function (l) {
          return l.disabled;
        }).length;
        var legendNum = legend.length;

        if (disabledNum === legendNum) {
          return;
        }

        var _globalCtx$Layout = globalCtx.Layout,
            translateMtx = _globalCtx$Layout.translateMtx,
            translateMtxInvert = _globalCtx$Layout.translateMtxInvert,
            spanHorizontal = _globalCtx$Layout.spanHorizontal,
            spanVertical = _globalCtx$Layout.spanVertical,
            xFloat = _globalCtx$Layout.xFloat,
            xScaler = _globalCtx$Layout.xScaler,
            yScaler = _globalCtx$Layout.yScaler;
        /**
                                          | 1  0  0            |
            mtx = DPRMAT * translateMtx * | 0 -1  spanVertical |
                                          | 0  0  1            |
         */

        var mtx = _glMatrix.mat2d.fromValues(1, 0, 0, -1, 0, spanVertical);

        var imtx = _glMatrix.mat2d.create();

        _glMatrix.mat2d.invert(imtx, mtx);

        _glMatrix.mat2d.multiply(imtx, imtx, translateMtxInvert);

        _glMatrix.mat2d.multiply(mtx, translateMtx, mtx); // widthDPI


        var a = _glMatrix.mat2d.create();

        var ia = _glMatrix.mat2d.create();

        _glMatrix.mat2d.multiply(a, globalCtx.DPRMat, mtx);

        _glMatrix.mat2d.invert(ia, a); // origin point ( left top point )


        var originVec = _glMatrix.vec2.fromValues(0, 0);

        _glMatrix.vec2.transformMat2d(originVec, originVec, imtx); // origin point ( right bottom point )


        var borderVec = _glMatrix.vec2.fromValues(spanHorizontal, spanVertical);

        _glMatrix.vec2.transformMat2d(borderVec, borderVec, imtx);

        var convertDataToCoordX = function convertDataToCoordX(x) {
          return (x - xMeta.min) * xScaler + xFloat;
        };

        var convertDataToCoordY = function convertDataToCoordY(y) {
          return (y - yMeta.min) * yScaler;
        };

        Object.assign(globalCtx.Coordinate.transformMeta, {
          originVec: originVec,
          borderVec: borderVec,
          xAxisY: Math.max(0, convertDataToCoordY(0)),
          transformMtxRaw: _glMatrix.mat2d.clone(mtx),
          transformMtxRawInvert: _glMatrix.mat2d.clone(imtx),
          transformMtx: _glMatrix.mat2d.clone(a),
          transformMtxInvert: _glMatrix.mat2d.clone(ia),
          convertDataToCoordX: convertDataToCoordX,
          convertDataToCoordY: convertDataToCoordY
        });

        if (!_this2.animationContext.yAxis) {
          _this2.animationContext.yAxis = new _anime.AnimeArray({
            startArray: _this2.getNewYAxis(globalCtx),
            duration: 550,
            key: 'name',
            renderCallback: renderCallback,
            callbackOnElement: function callbackOnElement(newState, oldState, idx, ratio, currentArray) {
              if (ratio === 'end') {
                currentArray[idx] = _objectSpread({}, newState);
              } else {
                currentArray[idx] = {
                  name: newState.name,
                  value: oldState.value + (newState.value - oldState.value) * ratio,
                  fontvecX: oldState.fontvecX + (newState.fontvecX - oldState.fontvecX) * ratio,
                  fontvecY: oldState.fontvecY + (newState.fontvecY - oldState.fontvecY) * ratio
                };
              }
            }
          });
          _this2.animationContext.xAxisY = new _anime.AnimeNumber({
            startNumber: Math.max(0, convertDataToCoordY(0)),
            duration: 550,
            renderCallback: renderCallback
          });
        }
      });
    }
  }, {
    key: "getNewYAxis",
    value: function getNewYAxis(globalCtx) {
      var xAxisbottom = globalCtx.theme.fontSize / 2;
      var transformMtxRaw = globalCtx.Coordinate.transformMeta.transformMtxRaw;
      var yStep = globalCtx.Layout.yStep;
      return globalCtx.globalData.sourceMeta.yMeta.values.slice().map(function (target, idx) {
        var value = yStep * idx;

        var vec = _glMatrix.vec2.fromValues(-xAxisbottom, value);

        _glMatrix.vec2.transformMat2d(vec, vec, transformMtxRaw);

        return {
          name: target,
          value: value,
          fontvecX: vec[0],
          fontvecY: vec[1]
        };
      });
    }
  }, {
    key: "drawGrid",
    value: function drawGrid(ctx, globalCtx) {
      var _this3 = this;

      var spanHorizontal = globalCtx.Layout.spanHorizontal;
      ctx.functionCallWithLooping(function () {
        return _this3.animationContext.yAxis.value;
      }, function (ctx, loopTarget, v) {
        ctx.beginPath();
        ctx.moveTo(0, v.value);
        ctx.lineTo(spanHorizontal, v.value);
        ctx.stroke();
      });
    }
  }, {
    key: "drawAxis",
    value: function drawAxis(ctx, globalCtx) {
      var _this4 = this;

      var _globalCtx$globalData3 = globalCtx.globalData.sourceMeta,
          xMeta = _globalCtx$globalData3.xMeta,
          yMeta = _globalCtx$globalData3.yMeta;
      var DPRMat = globalCtx.DPRMat;
      var _globalCtx$Layout2 = globalCtx.Layout,
          spanHorizontal = _globalCtx$Layout2.spanHorizontal,
          spanVertical = _globalCtx$Layout2.spanVertical,
          xStep = _globalCtx$Layout2.xStep;
      var _globalCtx$Coordinate = globalCtx.Coordinate.transformMeta,
          transformMtxRaw = _globalCtx$Coordinate.transformMtxRaw,
          convertDataToCoordX = _globalCtx$Coordinate.convertDataToCoordX;
      var fontSize = globalCtx.theme.fontSize;
      ctx.font = "".concat(fontSize / 1.4, "px arial");
      ctx.strokeStyle = '#999';
      ctx.lineWidth = 1.4;
      ctx.beginPath();
      ctx.functionCallWithDynamicParameter('moveTo', spanHorizontal, function () {
        return _this4.animationContext.xAxisY.value;
      });
      ctx.functionCallWithDynamicParameter('lineTo', 0, function () {
        return _this4.animationContext.xAxisY.value;
      });
      ctx.stroke();
      ctx.lineWidth = 0.7;
      ctx.lineCap = 'round';
      ctx.lineJoin = 'round';
      ctx.textAlign = 'right';
      ctx.textBaseline = 'middle';
      ctx.save();
      (0, _utils.setTransform)(ctx, DPRMat);
      ctx.functionCallWithLooping(function () {
        return _this4.animationContext.yAxis.value;
      }, function (ctx, loopTarget, v) {
        var text = yMeta.formatter(v.name);
        ctx.fillText(text, v.fontvecX, v.fontvecY);
      });
      ctx.restore(); // x轴数字

      ctx.textAlign = 'center';
      ctx.lineWidth = 1;
      ctx.strokeStyle = '#e8e8e8';
      var xValues = xMeta.values;

      for (var i = 0; i < xValues.length; i++) {
        var xValue = xValues[i];
        var value = xValue.value;
        var x = convertDataToCoordX(value);
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, spanVertical);
        ctx.stroke();
        ctx.save();

        var vec = _glMatrix.vec2.fromValues(x, -fontSize);

        _glMatrix.vec2.transformMat2d(vec, vec, transformMtxRaw);

        (0, _utils.setTransform)(ctx, DPRMat);
        var text = xMeta.formatter(value);
        ctx.wrapText(text, vec[0], vec[1], xStep / 2, fontSize);
        ctx.restore();
      }
    }
  }, {
    key: "render",
    value: function render(ctx, globalCtx) {
      var axis = globalCtx.theme.axis;
      ctx.lineWidth = axis.lineWidth;
      ctx.strokeStyle = axis.strokeStyle;
      ctx.save();
      this.drawGrid(ctx, globalCtx);
      this.drawAxis(ctx, globalCtx);
      ctx.restore();
    }
  }, {
    key: "afterRender",
    value: function afterRender(context2d, globalCtx) {
      var _this5 = this;

      globalCtx.effect(function () {
        console.log('after effect coord');

        _this5.animationContext.yAxis.animeTo(_this5.getNewYAxis(globalCtx));

        _this5.animationContext.xAxisY.animeTo(globalCtx.Coordinate.transformMeta.xAxisY);
      });
    }
  }]);

  return Coord2D;
}();

var _default = Coord2D;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _glMatrix = require("gl-matrix");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Geo2D = /*#__PURE__*/function () {
  function Geo2D() {
    _classCallCheck(this, Geo2D);

    this.name = 'Geo2D';
    this.animationContext = {};
  }

  _createClass(Geo2D, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      globalCtx.hooks.afterDataAndLayoutReady.tap(this.name, function () {
        _this.reFlow(globalCtx);
      });
      globalCtx.Coordinate.hooks.initCoord.tap(this.name, function (context2d) {
        _this.init(context2d, globalCtx);
      });
    }
  }, {
    key: "reFlow",
    value: function reFlow(globalCtx) {
      globalCtx.effect(function () {
        console.log('effect Geo2D layout');
        var bounding = globalCtx.Layout.bounding;
        var boundingBox = globalCtx.boundingBox;

        var mtx = _glMatrix.mat2d.fromValues(1, 0, 0, 1, bounding.left, bounding.top);

        var imtx = _glMatrix.mat2d.create();

        _glMatrix.mat2d.invert(imtx, mtx);

        Object.assign(globalCtx.Layout, {
          translateMtx: mtx,
          translateMtxInvert: imtx,
          spanHorizontal: boundingBox.width - bounding.left - bounding.right,
          spanVertical: boundingBox.height - bounding.top - bounding.bottom
        });
      });
    }
  }, {
    key: "init",
    value: function init(context2d, globalCtx) {
      globalCtx.effect(function () {
        console.log('effect init coord');
        var _globalCtx$Layout = globalCtx.Layout,
            translateMtx = _globalCtx$Layout.translateMtx,
            translateMtxInvert = _globalCtx$Layout.translateMtxInvert,
            spanHorizontal = _globalCtx$Layout.spanHorizontal,
            spanVertical = _globalCtx$Layout.spanVertical;
        /**
                                          | 1  0  spanHorizontal/2 |
            mtx = DPRMAT * translateMtx * | 0  1  spanVertical/2   |
                                          | 0  0  1                |
         */

        var mtx = _glMatrix.mat2d.fromValues(1, 0, 0, 1, spanHorizontal / 2, spanVertical / 2);

        var imtx = _glMatrix.mat2d.create();

        _glMatrix.mat2d.invert(imtx, mtx);

        _glMatrix.mat2d.multiply(mtx, translateMtx, mtx);

        _glMatrix.mat2d.multiply(imtx, imtx, translateMtxInvert);

        var a = _glMatrix.mat2d.create();

        var ia = _glMatrix.mat2d.create();

        _glMatrix.mat2d.multiply(a, globalCtx.DPRMat, mtx);

        _glMatrix.mat2d.invert(ia, a);

        var originVec = _glMatrix.vec2.fromValues(spanHorizontal / 2, spanVertical / 2);

        _glMatrix.vec2.transformMat2d(originVec, originVec, imtx);

        Object.assign(globalCtx.Coordinate.transformMeta, {
          originVec: originVec,
          transformMtxRaw: _glMatrix.mat2d.clone(mtx),
          transformMtxRawInvert: _glMatrix.mat2d.clone(imtx),
          transformMtx: _glMatrix.mat2d.clone(a),
          transformMtxInvert: _glMatrix.mat2d.clone(ia)
        });
      });
    }
  }]);

  return Geo2D;
}();

var _default = Geo2D;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _glMatrix = require("gl-matrix");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DPIPlugin = /*#__PURE__*/function () {
  function DPIPlugin() {
    _classCallCheck(this, DPIPlugin);
  }

  _createClass(DPIPlugin, [{
    key: "apply",
    value: function apply(globalCtx) {
      globalCtx.hooks.initCanvas.tap('DPIPlugin', function (canvasElem) {
        globalCtx.effect(function () {
          var dpr = window.devicePixelRatio || 1;
          var rect = globalCtx.boundingBox;
          canvasElem.width = rect.width * dpr;
          canvasElem.height = rect.height * dpr;

          if (!globalCtx.DPRMat) {
            globalCtx.DPR = dpr;
            globalCtx.DPRMat = _glMatrix.mat2d.create();

            _glMatrix.mat2d.multiplyScalar(globalCtx.DPRMat, globalCtx.DPRMat, dpr);
          }

          canvasElem.style.position = "absolute";
          canvasElem.style.left = "0";
          canvasElem.style.top = "0";
          canvasElem.style.width = "".concat(rect.width, "px");
          canvasElem.style.height = "".concat(rect.height, "px");
        });
      });
    }
  }]);

  return DPIPlugin;
}();

var _default = DPIPlugin;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = require("lodash");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var EventListenerPlugin = /*#__PURE__*/function () {
  function EventListenerPlugin() {
    _classCallCheck(this, EventListenerPlugin);

    this.name = 'EventListener';
  }

  _createClass(EventListenerPlugin, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      globalCtx.Overlayer.hooks.initOverlayer.tap(this.name, function () {
        _this.addEventListener(globalCtx);
      });
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(globalCtx) {
      var canvasElem = globalCtx.Overlayer.canvasElm;
      this.bindListener(canvasElem, 'pointerdown', globalCtx);
      this.bindThrottleListener(canvasElem, 'pointermove', globalCtx);
      this.bindListener(canvasElem, 'pointerup', globalCtx); // this.bindListener(canvasElem, 'touchstart', globalCtx);
      // this.bindListener(canvasElem, 'touchmove', globalCtx);
      // this.bindListener(canvasElem, 'touchend', globalCtx);
      // this.bindListener(canvasElem, 'mousedown', globalCtx);
      // this.bindListener(canvasElem, 'mousemove', globalCtx);
      // this.bindListener(canvasElem, 'mouseup', globalCtx);

      this.bindListener(canvasElem, 'mouseenter', globalCtx);
      this.bindListener(canvasElem, 'mouseleave', globalCtx); // globalCtx._mouse = this.mouse;
    }
  }, {
    key: "bindThrottleListener",
    value: function bindThrottleListener(elem, event, globalCtx) {
      elem.addEventListener(event, (0, _lodash.throttle)(function (e) {
        e.preventDefault(); // console.log(e.offsetX, e.offsetY);

        Object.assign(globalCtx._mouse, {
          x: e.offsetX,
          y: e.offsetY,
          deltaY: e.deltaY,
          event: event
        });
      }, 16));
    }
  }, {
    key: "bindListener",
    value: function bindListener(elem, event, globalCtx) {
      elem.addEventListener(event, function (e) {
        e.preventDefault(); // console.log(e.offsetX, e.offsetY);

        Object.assign(globalCtx._mouse, {
          x: e.offsetX,
          y: e.offsetY,
          deltaY: e.deltaY,
          event: event
        });
      }, false);
    }
  }]);

  return EventListenerPlugin;
}();

var _default = EventListenerPlugin;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var GlobalLayoutPlugin = /*#__PURE__*/function () {
  function GlobalLayoutPlugin() {
    _classCallCheck(this, GlobalLayoutPlugin);

    this.name = 'GlobalLayoutPlugin';
  }

  _createClass(GlobalLayoutPlugin, [{
    key: "apply",
    value: function apply(globalCtx) {
      globalCtx.hooks.initGlobalLayout.tap(this.name, function (container, layoutContext) {
        container.style.position = 'relative';
        container.style.display = 'flex';
        container.style['flex-direction'] = 'column';
        container.style['justify-content'] = 'flex-end';
        var chartcontainer = document.createElement('div');
        chartcontainer.setAttribute('style', "\n                flex: 1;\n                width: 100%;\n                position: relative;\n            ");
        container.prepend(chartcontainer);
        layoutContext.canvasWrapper = chartcontainer;
        var box = chartcontainer.getBoundingClientRect();
        globalCtx.boundingBox.width = box.width;
        globalCtx.boundingBox.height = box.height;
      });
    }
  }]);

  return GlobalLayoutPlugin;
}();

var _default = GlobalLayoutPlugin;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DEFAULT_OPTION = {
  left: 0,
  right: 0,
  bottom: 0,
  top: 0
};

var LayoutPlugin = /*#__PURE__*/function () {
  function LayoutPlugin(options) {
    _classCallCheck(this, LayoutPlugin);

    this.name = 'layoutPlugin';
    this.options = Object.assign({}, DEFAULT_OPTION, options);
  }

  _createClass(LayoutPlugin, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      globalCtx.hooks.afterDataAndLayoutReady.tap(this.name, function () {
        globalCtx.effect(function () {
          console.log('effect init layout');
          var _this$options = _this.options,
              left = _this$options.left,
              right = _this$options.right,
              bottom = _this$options.bottom,
              top = _this$options.top,
              _this$options$xFloat = _this$options.xFloat,
              xFloat = _this$options$xFloat === void 0 ? 10 : _this$options$xFloat;
          Object.assign(globalCtx.Layout, {
            bounding: {
              left: left,
              right: right,
              bottom: bottom,
              top: top,
              xFloat: xFloat
            }
          }); // console.log(globalCtx.Layout);
        });
      });
    }
  }]);

  return LayoutPlugin;
}();

var _default = LayoutPlugin;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// import colorString from 'color-string';
var DEFAULT_COLORS = [[103, 170, 245], [255, 174, 60], [78, 201, 171], [245, 131, 122], [158, 156, 246], [30, 192, 216], [138, 205, 78], [237, 139, 204], [135, 206, 232], [97, 218, 198], [198, 156, 246], [137, 170, 247], [134, 187, 231], [245, 196, 80], [135, 206, 232], [239, 216, 22], [92, 208, 133], [241, 126, 248]];

var ThemePlugin = /*#__PURE__*/function () {
  function ThemePlugin() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ThemePlugin);

    this.name = 'ThemePlugin';
    var colors = options.colors,
        disabledOpacity = options.disabledOpacity,
        fadeOpacity = options.fadeOpacity;
    this.colors = colors || DEFAULT_COLORS;
    this.disabledOpacity = disabledOpacity || 0.1;
    this.fadeOpacity = fadeOpacity || 0.4;
  }

  _createClass(ThemePlugin, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      globalCtx.hooks.initTheme.tap(this.name, function (container) {
        var colors = _this.colors,
            disabledOpacity = _this.disabledOpacity,
            fadeOpacity = _this.fadeOpacity;
        var length = colors.length;
        var disabledColors = colors.map(function (c) {
          return [].concat(_toConsumableArray(c), [disabledOpacity]);
        });
        var fadeColors = colors.map(function (c) {
          return [].concat(_toConsumableArray(c), [fadeOpacity]);
        });
        var font = getComputedStyle(container).font;
        var fontSize = parseFloat(font);
        globalCtx.theme = {
          getColor: function getColor(idx) {
            var i = idx % length + 1;
            return {
              color: colors[i],
              disabledColor: disabledColors[i],
              fadeColor: fadeColors[i]
            };
          },
          fontSize: fontSize,
          axis: {
            strokeStyle: '#eee',
            lineWidth: 1
          }
        };
      });
    }
  }]);

  return ThemePlugin;
}();

var _default = ThemePlugin;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _reactivity = require("@vue/reactivity");

var _glMatrix = require("gl-matrix");

var _colorString = _interopRequireDefault(require("color-string"));

var _anime = require("../../animation/anime");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BarChart = /*#__PURE__*/function () {
  function BarChart() {
    _classCallCheck(this, BarChart);

    this.name = 'BarChart'; // this.options = Object.assign({
    //     gap: 5,
    // }, options);

    this.animationContext = {};
  }

  _createClass(BarChart, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      globalCtx.Chart.hooks.initChart.tap(this.name, function (context2d) {
        _this.init(context2d, globalCtx);
      });
      globalCtx.Chart.hooks.renderChart.tap(this.name, function (context2d) {
        _this.render(context2d, globalCtx);
      });
      globalCtx.Chart.hooks.afterRenderChart.tap(this.name, function (context2d) {
        _this.afterRender(context2d, globalCtx);
      });
    }
  }, {
    key: "init",
    value: function init(context2d, globalCtx) {
      var _this2 = this;

      var render = context2d.render.bind(context2d);
      var renderCallback = (0, _anime.makeRenderCallback)(render);
      globalCtx.effect(function () {
        console.log('effect init linechart');
        var _globalCtx$globalData = globalCtx.globalData.source,
            data = _globalCtx$globalData.data,
            legend = _globalCtx$globalData.legend,
            isStack = _globalCtx$globalData.stack;
        var spanHorizontal = globalCtx.Layout.spanHorizontal;
        var _globalCtx$Coordinate = globalCtx.Coordinate.transformMeta,
            convertDataToCoordX = _globalCtx$Coordinate.convertDataToCoordX,
            convertDataToCoordY = _globalCtx$Coordinate.convertDataToCoordY,
            xFloat = _globalCtx$Coordinate.xFloat;
        var getColor = globalCtx.theme.getColor;
        var barWidth;
        var gap;
        var series_size = 0;
        data.forEach(function (d) {
          series_size = Math.max(d.length, series_size);
        });
        var legendLength = legend.filter(function (l) {
          return !l.disabled;
        }).length;
        var spanHorizontalwithpadding = spanHorizontal - xFloat * 2;
        var series_step = spanHorizontalwithpadding / series_size;

        if (isStack) {
          var barLength = series_size + series_size - 1;

          if (barLength > 100) {
            barWidth = spanHorizontalwithpadding / series_size;
            gap = 0;
          } else {
            barWidth = spanHorizontalwithpadding / barLength;
            gap = barWidth / 2;
          }
        } else {
          var _barLength = series_size * legendLength + series_size - 1;

          if (_barLength > 100) {
            barWidth = spanHorizontalwithpadding / series_size / legendLength;
            gap = 0;
          } else {
            barWidth = spanHorizontalwithpadding / _barLength;
            gap = barWidth / 2;
          }
        }

        var seriesInCoord = [];
        var seriesMeta = [];
        var series = data.slice();
        var lid = 0;
        legend.forEach(function (d, sid) {
          var seri = series[sid].slice();
          var theme = getColor(sid);
          var animeArr = [];
          var points = [];
          seri.forEach(function (v) {
            var dx = v[0];
            var dy;
            var dyraw;
            var ref;

            if (isStack) {
              dyraw = v[3];
              dy = v[1];
            } else {
              dy = dyraw = v[1];
            }

            ref = dx;
            var x = convertDataToCoordX(ref);
            var y = convertDataToCoordY(dy);
            var lastY = isStack ? convertDataToCoordY(v[2]) : 0;
            var barx = isStack ? x - gap : x - series_step / 2 + gap + barWidth * lid;
            var p = {
              x: barx,
              y: y,
              lastY: lastY
            };
            var lastp = {
              x: barx,
              y: lastY
            };

            if (!seriesMeta[ref]) {
              seriesMeta[ref] = {
                x: x,
                series: []
              };
            }

            seriesMeta[ref].series.push({
              legend: _objectSpread({}, d),
              p: p,
              dx: dx,
              dy: dyraw,
              theme: theme,
              lastp: lastp,
              barWidth: barWidth
            });
            animeArr.push({
              x: barx,
              y: 0,
              lastY: 0,
              barWidth: barWidth
            });
            points.push({
              x: barx,
              y: y,
              lastY: lastY,
              barWidth: barWidth
            });
          });
          seriesInCoord.push({
            theme: theme,
            legend: _objectSpread({}, d),
            isStack: isStack,
            points: points
          });

          if (!d.disabled) {
            lid++;
          }

          if (!_this2.animationContext[d.name]) {
            _this2.animationContext[d.name] = {
              points: new _anime.AnimeArray({
                startArray: animeArr,
                duration: 550,
                renderCallback: renderCallback,
                callBackOnMakeUp: function callBackOnMakeUp(makeup, ratio, start) {
                  var startx = start ? start.x : 0;
                  console.log(ratio, startx);
                  return makeup.map(function (p) {
                    return {
                      x: (p.x - startx) * ratio,
                      y: 0,
                      lastY: 0,
                      barWidth: barWidth
                    };
                  });
                },
                callbackOnElement: function callbackOnElement(newState, oldState, idx, ratio, currentArray) {
                  if (ratio === 'end') {
                    currentArray[idx] = _objectSpread({}, newState);
                  } else {
                    currentArray[idx] = {
                      x: oldState.x + (newState.x - oldState.x) * ratio,
                      y: oldState.y + (newState.y - oldState.y) * ratio,
                      lastY: oldState.lastY + (newState.lastY - oldState.lastY) * ratio,
                      barWidth: oldState.barWidth + (newState.barWidth - oldState.barWidth) * ratio
                    };
                  }
                }
              }),
              // clipX: new AnimeNumber({
              //     startNumber: 0,
              //     duration: 1000,
              //     renderCallback,
              // }),
              opacity: new _anime.AnimeNumber({
                startNumber: 1,
                duration: 250,
                renderCallback: renderCallback
              }) // subOpacity: new AnimeNumber({
              //     startNumber: 1,
              //     duration: 250,
              //     renderCallback,
              // }),

            };
          }
        });
        Object.assign(globalCtx.Chart.chartMeta, {
          seriesInCoord: seriesInCoord,
          seriesMeta: Object.values(seriesMeta).sort(function (a, b) {
            return a.x - b.x;
          })
        });
      });
      (0, _reactivity.effect)(function () {
        var seriesMeta = globalCtx.Chart.chartMeta.seriesMeta;
        var _globalCtx$_mouse = globalCtx._mouse,
            x = _globalCtx$_mouse.x,
            y = _globalCtx$_mouse.y;
        var _globalCtx$Layout = globalCtx.Layout,
            top = _globalCtx$Layout.top,
            bottom = _globalCtx$Layout.bottom,
            seriesStep = _globalCtx$Layout.seriesStep;
        var transformMtxRawInvert = globalCtx.Coordinate.transformMeta.transformMtxRawInvert;

        if (y > bottom || y < top) {
          globalCtx.Chart.chartMeta.focused = null;
          return;
        }

        var vec = _glMatrix.vec2.fromValues(x, y);

        _glMatrix.vec2.transformMat2d(vec, vec, transformMtxRawInvert);

        var meta = (0, _utils.findDataInBarSeries)(vec[0], vec[1], seriesMeta, seriesStep);

        if (meta) {
          globalCtx.Chart.chartMeta.focused = meta;
        } else {
          globalCtx.Chart.chartMeta.focused = null;
        }
      });
    }
  }, {
    key: "render",
    value: function render(ctx, globalCtx) {
      var _this3 = this;

      var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;
      seriesInCoord.forEach(function (_ref) {
        var theme = _ref.theme,
            legend = _ref.legend;
        ctx.addConditionBlockBegin(function () {
          return legend.disabled;
        });
        var lgname = legend.name;
        var currentAnimeContext = _this3.animationContext[lgname];
        ctx.save();
        ctx.lineWidth = 1;
        ctx.functionsCall(function (ctx) {
          ctx.fillStyle = ctx.strokeStyle = _colorString["default"].to.rgb([].concat(_toConsumableArray(theme.color.slice(0, 3)), [currentAnimeContext.opacity.value]));
          var data = currentAnimeContext.points.value;

          for (var l = 0; l < data.length; l++) {
            var p = data[l];
            ctx.fillRect(p.x, p.lastY, p.barWidth, p.y - p.lastY);
            ctx.strokeRect(p.x, p.lastY, p.barWidth, p.y - p.lastY);
          }
        });
        ctx.restore();
        ctx.addConditionBlockEnd();
      });
    }
  }, {
    key: "afterRender",
    value: function afterRender(context2d, globalCtx) {
      var _this4 = this;

      globalCtx.effect(function () {
        var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;
        seriesInCoord.forEach(function (_ref2) {
          var legend = _ref2.legend,
              points = _ref2.points;

          _this4.animationContext[legend.name].points.animeTo(points.slice());
        });
      });
      globalCtx.effect(function () {
        var focused = globalCtx.Chart.chartMeta.focused;
        var legend = globalCtx.globalData.source.legend;
        legend.filter(function (l) {
          return !l.disabled;
        }).forEach(function (l) {
          var name = l.name;
          var curr = _this4.animationContext[name];

          if (focused && focused.currLegend) {
            if (name === focused.currLegend.name) {
              curr.opacity.animeTo(1);
            } else {
              curr.opacity.animeTo(0.6);
            }
          } else {
            curr.opacity.animeTo(1);
          }
        });
      });
    }
  }]);

  return BarChart;
}();

var _default = BarChart;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _colorString = _interopRequireDefault(require("color-string"));

var _reactivity = require("@vue/reactivity");

var _glMatrix = require("gl-matrix");

var _anime = require("../../animation/anime");

var _utils = require("../../shared/utils");

var _utils2 = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LineChart = /*#__PURE__*/function () {
  function LineChart(options) {
    _classCallCheck(this, LineChart);

    this.name = 'LineChart';
    this.options = Object.assign({
      smooth: false,
      pointRadius: 0,
      fill: false
    }, options);
    this.animationContext = {};
  }

  _createClass(LineChart, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      globalCtx.Chart.hooks.initChart.tap(this.name, function (context2d) {
        _this.init(context2d, globalCtx);
      });
      globalCtx.Chart.hooks.renderChart.tap(this.name, function (context2d) {
        _this.render(context2d, globalCtx);
      });
      globalCtx.Chart.hooks.afterRenderChart.tap(this.name, function (context2d) {
        _this.afterRender(context2d, globalCtx);
      });
    }
  }, {
    key: "init",
    value: function init(context2d, globalCtx) {
      var _this2 = this;

      var render = context2d.render.bind(context2d);
      var renderCallback = (0, _anime.makeRenderCallback)(render);
      globalCtx.effect(function () {
        console.log('effect init linechart');
        var _globalCtx$globalData = globalCtx.globalData.source,
            data = _globalCtx$globalData.data,
            legend = _globalCtx$globalData.legend,
            isStack = _globalCtx$globalData.stack; // const {
        //     spanHorizontal,
        // } = globalCtx.Layout;

        var _globalCtx$Coordinate = globalCtx.Coordinate.transformMeta,
            convertDataToCoordX = _globalCtx$Coordinate.convertDataToCoordX,
            convertDataToCoordY = _globalCtx$Coordinate.convertDataToCoordY;
        var getColor = globalCtx.theme.getColor;
        var seriesInCoord = [];
        var seriesMeta = [];
        var series = data.slice();
        legend.slice().forEach(function (d, sid) {
          var seri = series[sid].slice();
          var theme = getColor(sid);
          var animeArr = [];
          var points = [];
          seri.forEach(function (v) {
            var dx = v[0];
            var dy;
            var dyraw;
            var ref;

            if (isStack) {
              dyraw = v[3];
              dy = v[1];
            } else {
              dy = dyraw = v[1];
            }

            ref = dx;
            var x = convertDataToCoordX(ref);
            var y = convertDataToCoordY(dy);
            var lastY = isStack ? convertDataToCoordY(v[2]) : 0;
            var p = {
              x: x,
              y: y,
              lastY: lastY
            };
            var lastp = {
              x: x,
              y: lastY
            };

            if (!seriesMeta[ref]) {
              seriesMeta[ref] = {
                x: x,
                series: []
              };
            }

            seriesMeta[ref].series.push({
              legend: _objectSpread({}, d),
              p: p,
              dx: dx,
              dy: dyraw,
              theme: theme,
              lastp: lastp
            });
            animeArr.push({
              x: x,
              y: y,
              lastY: lastY
            });
            points.push({
              x: x,
              y: y,
              lastY: lastY
            });
          });
          seriesInCoord.push({
            theme: theme,
            legend: _objectSpread({}, d),
            isStack: isStack,
            points: points
          });

          if (!_this2.animationContext[d.name]) {
            _this2.animationContext[d.name] = {
              points: new _anime.AnimeArray({
                startArray: animeArr,
                duration: 550,
                renderCallback: renderCallback,
                callBackOnMakeUp: function callBackOnMakeUp(makeup, ratio) {
                  return makeup.map(function (p) {
                    return {
                      x: p.x * ratio,
                      y: p.y,
                      lastY: p.lastY
                    };
                  });
                },
                callbackOnElement: function callbackOnElement(newState, oldState, idx, ratio, currentArray) {
                  if (ratio === 'end') {
                    currentArray[idx] = _objectSpread({}, newState);
                  } else {
                    currentArray[idx] = {
                      x: oldState.x + (newState.x - oldState.x) * ratio,
                      y: oldState.y + (newState.y - oldState.y) * ratio,
                      lastY: oldState.lastY + (newState.lastY - oldState.lastY) * ratio
                    };
                  }
                }
              }),
              clipX: new _anime.AnimeNumber({
                startNumber: 0,
                duration: 1000,
                renderCallback: renderCallback
              }),
              opacity: new _anime.AnimeNumber({
                startNumber: 0.4,
                duration: 250,
                renderCallback: renderCallback
              }),
              subOpacity: new _anime.AnimeNumber({
                startNumber: 1,
                duration: 250,
                renderCallback: renderCallback
              })
            };
          }
        });
        Object.assign(globalCtx.Chart.chartMeta, {
          seriesInCoord: seriesInCoord,
          seriesMeta: Object.values(seriesMeta).sort(function (a, b) {
            return a.x - b.x;
          })
        });
      });
      (0, _reactivity.effect)(function () {
        // 避免主图多次重绘
        var seriesMeta = globalCtx.Chart.chartMeta.seriesMeta;
        var _globalCtx$_mouse = globalCtx._mouse,
            x = _globalCtx$_mouse.x,
            y = _globalCtx$_mouse.y;
        var _globalCtx$Layout = globalCtx.Layout,
            top = _globalCtx$Layout.top,
            bottom = _globalCtx$Layout.bottom;
        var _globalCtx$Coordinate2 = globalCtx.Coordinate.transformMeta,
            transformMtxRawInvert = _globalCtx$Coordinate2.transformMtxRawInvert,
            xAxisY = _globalCtx$Coordinate2.xAxisY;
        var stack = globalCtx.globalData.source.stack;

        if (y > bottom || y < top) {
          globalCtx.Chart.chartMeta.focused = null;
          return;
        }

        var vec = _glMatrix.vec2.fromValues(x, y);

        _glMatrix.vec2.transformMat2d(vec, vec, transformMtxRawInvert);

        var segment = (0, _utils2.findDataInSeries)(vec[0], seriesMeta);

        if (segment) {
          var _vec = _slicedToArray(vec, 2),
              _x = _vec[0],
              _y = _vec[1];

          var curr = segment.curr,
              next = segment.next;
          var l = curr.series.length;
          var cs = curr.series;
          var ns = next.series;
          var sfocus = null;

          if (stack && _this2.options.fill) {
            for (var i = 0; i < l; i++) {
              var b1 = [cs[i].p.x, cs[i].p.y];
              var b2 = cs[i - 1] ? [cs[i - 1].p.x, cs[i - 1].p.y] : [curr.x, xAxisY];
              var c1 = [ns[i].p.x, ns[i].p.y];
              var c2 = ns[i - 1] ? [ns[i - 1].p.x, ns[i - 1].p.y] : [next.x, xAxisY];

              if ((0, _utils.pointInPolygon)([_x, _y], [b2, b1, c1, c2])) {
                sfocus = i;
              }
            }
          } else {
            for (var _i2 = 0; _i2 < l; _i2++) {
              if (!ns[_i2]) continue;
              var b = cs[_i2].p;
              var c = ns[_i2].p;
              var func = _this2.options.smooth ? _utils.distToBezierSegmentSquared : _utils.distToSegmentSquared;
              var distance = func(vec, [b.x, b.y], [c.x, c.y]);

              if (distance < 100) {
                sfocus = _i2;
              }
            }
          }

          var belong = segment[segment.belong];
          var meta = {
            belong: belong,
            mouse: {
              x: _x,
              y: _y
            }
          };

          if (sfocus !== null) {
            meta.currLegend = curr.series[sfocus].legend;
          }

          globalCtx.Chart.chartMeta.focused = meta;
        } else {
          globalCtx.Chart.chartMeta.focused = null;
        }
      });
    }
  }, {
    key: "drawSeriesLine",
    value: function drawSeriesLine(ctx, data, smooth, getPoint) {
      for (var l = 0; l < data.length - 1; l++) {
        var p2 = data[l + 1];

        if (smooth) {
          var p1 = data[l];
          var points = (0, _utils.bezierPoints)(getPoint(p1), getPoint(p2));
          ctx.bezierCurveTo.apply(ctx, _toConsumableArray(points));
        } else {
          ctx.lineTo.apply(ctx, getPoint(p2));
        }
      }
    }
  }, {
    key: "drawLine",
    value: function drawLine(lgname, theme, spanVertical, ctx, xAxisY, isStack) {
      var _this3 = this;

      var currentAnimeContext = this.animationContext[lgname];
      var _this$options = this.options,
          smooth = _this$options.smooth,
          fill = _this$options.fill;
      ctx.beginPath();
      ctx.functionCallWithDynamicParameter('rect', 0, 0, function () {
        return currentAnimeContext.clipX.value;
      }, spanVertical);
      ctx.clip();
      ctx.beginPath();

      var getP = function getP(p) {
        return [p.x, p.y];
      };

      var getPlast = function getPlast(p) {
        return [p.x, p.lastY];
      };

      ctx.functionsCall(function (ctx) {
        var data = currentAnimeContext.points.value;
        ctx.moveTo(data[0].x, data[0].y);

        _this3.drawSeriesLine(ctx, data, smooth, getP);

        ctx.stroke();

        if (fill) {
          var fillColor = _colorString["default"].to.rgb([].concat(_toConsumableArray(theme.color.slice(0, 3)), [currentAnimeContext.opacity.value]));

          if (isStack) {
            var reversedDATA = data.slice().reverse();
            ctx.lineTo(reversedDATA[0].x, reversedDATA[0].lastY);

            _this3.drawSeriesLine(ctx, reversedDATA, smooth, getPlast);

            ctx.closePath();
          } else {
            ctx.lineTo(data[data.length - 1].x, xAxisY);
            ctx.lineTo(data[0].x, xAxisY);
            ctx.closePath();
          }

          ctx.fillStyle = fillColor;
          ctx.fill();
        }
      });
    }
  }, {
    key: "render",
    value: function render(ctx, globalCtx) {
      var _this4 = this;

      console.log('render');
      var spanVertical = globalCtx.Layout.spanVertical;
      var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;
      var xAxisY = globalCtx.Coordinate.transformMeta.xAxisY;
      seriesInCoord.forEach(function (_ref) {
        var legend = _ref.legend,
            theme = _ref.theme,
            isStack = _ref.isStack;
        ctx.addConditionBlockBegin(function () {
          return legend.disabled;
        });
        var lgname = legend.name;
        var currentAnimeContext = _this4.animationContext[lgname];
        ctx.save();
        ctx.lineWidth = 1;
        ctx.strokeStyle = ctx.fillStyle = _colorString["default"].to.rgb([].concat(_toConsumableArray(theme.color.slice(0, 3)), [currentAnimeContext.subOpacity.value]));

        _this4.drawLine(lgname, theme, spanVertical, ctx, xAxisY, isStack);

        ctx.restore();
        ctx.addConditionBlockEnd();
      });
    }
  }, {
    key: "afterRender",
    value: function afterRender(context2d, globalCtx) {
      var _this5 = this;

      globalCtx.effect(function () {
        var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;
        var spanHorizontal = globalCtx.Layout.spanHorizontal;
        seriesInCoord.forEach(function (_ref2) {
          var legend = _ref2.legend,
              points = _ref2.points;

          _this5.animationContext[legend.name].clipX.animeTo(spanHorizontal);

          _this5.animationContext[legend.name].points.animeTo(points.slice());
        });
      });
      globalCtx.effect(function () {
        var focused = globalCtx.Chart.chartMeta.focused;
        var legend = globalCtx.globalData.source.legend;
        legend.filter(function (l) {
          return !l.disabled;
        }).forEach(function (l) {
          var name = l.name;
          var curr = _this5.animationContext[name];

          if (focused && focused.currLegend) {
            if (name === focused.currLegend.name) {
              curr.opacity.animeTo(0.4);
              curr.subOpacity.animeTo(1);
            } else {
              curr.opacity.animeTo(0.1);
              curr.subOpacity.animeTo(0.6);
            }
          } else {
            curr.opacity.animeTo(0.4);
            curr.subOpacity.animeTo(1);
          }
        });
      });
    }
  }]);

  return LineChart;
}();

var _default = LineChart;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _reactivity = require("@vue/reactivity");

var _glMatrix = require("gl-matrix");

var _colorString = _interopRequireDefault(require("color-string"));

var _lodash = require("lodash");

var _anime = require("../../animation/anime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PieChart = /*#__PURE__*/function () {
  function PieChart() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PieChart);

    this.name = "PieChart";
    this.options = options;
    this.animationContext = {};
  }

  _createClass(PieChart, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      globalCtx.Chart.hooks.initChart.tap(this.name, function (context2d) {
        _this.init(context2d, globalCtx);
      });
      globalCtx.Chart.hooks.renderChart.tap(this.name, function (context2d) {
        _this.render(context2d, globalCtx);
      });
      globalCtx.Chart.hooks.afterRenderChart.tap(this.name, function (context2d) {
        _this.afterRender(context2d, globalCtx);
      });
    }
  }, {
    key: "init",
    value: function init(context2d, globalCtx) {
      var _this2 = this;

      var render = context2d.render.bind(context2d);
      var renderCallback = (0, _anime.makeRenderCallback)(render);
      globalCtx.effect(function () {
        var _globalCtx$globalData = globalCtx.globalData.source,
            data = _globalCtx$globalData.data,
            legend = _globalCtx$globalData.legend;
        var _globalCtx$Layout = globalCtx.Layout,
            spanHorizontal = _globalCtx$Layout.spanHorizontal,
            spanVertical = _globalCtx$Layout.spanVertical;
        var getColor = globalCtx.theme.getColor;
        var padding = 50;
        var radius = (Math.min(spanHorizontal, spanVertical) - padding) / 2;
        _this2.radius = radius;
        var sumup = 0;
        legend.forEach(function (l, sid) {
          if (!l.disabled) {
            sumup += data[sid];
          }
        });
        var seriesInCoord = []; // const seriesMeta = [];

        var accu = 0;
        legend.forEach(function (l, sid) {
          var theme = getColor(sid);
          var spanRadius = 0;
          var p = {
            startAngle: accu,
            middleAngle: accu + spanRadius / 2,
            endAngle: accu + spanRadius,
            radius: radius,
            spanRadius: spanRadius
          };

          if (!l.disabled) {
            var d = data[sid];
            var ratio = d / sumup;
            spanRadius = ratio * Math.PI * 2;
            Object.assign(p, {
              middleAngle: accu + spanRadius / 2,
              endAngle: accu + spanRadius,
              spanRadius: spanRadius
            });
            accu += spanRadius;
          }

          seriesInCoord.push({
            theme: theme,
            radius: radius,
            legend: l,
            p: p
          });
        });

        if (!_this2.animationContext.arcs) {
          var animeArr = legend.map(function () {
            return {
              startAngle: 0,
              middleAngle: 0,
              endAngle: 0,
              spanRadius: 0,
              radius: radius
            };
          });
          _this2.animationContext.arcs = new _anime.AnimeArray({
            startArray: animeArr,
            duration: 550,
            renderCallback: renderCallback,
            callBackOnMakeUp: function callBackOnMakeUp(makeup) {
              return makeup.map(function () {
                return {
                  startAngle: 0,
                  middleAngle: 0,
                  endAngle: 0,
                  radius: radius,
                  spanRadius: 0
                };
              });
            },
            callbackOnElement: function callbackOnElement(newState, oldState, idx, ratio, currentArray) {
              if (ratio === 'end') {
                currentArray[idx] = _objectSpread({}, newState);
              } else {
                currentArray[idx] = {
                  startAngle: oldState.startAngle + (newState.startAngle - oldState.startAngle) * ratio,
                  middleAngle: oldState.middleAngle + (newState.middleAngle - oldState.middleAngle) * ratio,
                  endAngle: oldState.endAngle + (newState.endAngle - oldState.endAngle) * ratio,
                  spanRadius: oldState.spanRadius + (newState.spanRadius - oldState.spanRadius) * ratio,
                  radius: oldState.radius + (newState.radius - oldState.radius) * ratio
                };
              }
            }
          });
        }

        Object.assign(globalCtx.Chart.chartMeta, {
          seriesInCoord: seriesInCoord
        });
      });
      (0, _reactivity.effect)(function () {
        var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;
        var _globalCtx$_mouse = globalCtx._mouse,
            x = _globalCtx$_mouse.x,
            y = _globalCtx$_mouse.y;
        var _globalCtx$Layout2 = globalCtx.Layout,
            top = _globalCtx$Layout2.top,
            bottom = _globalCtx$Layout2.bottom,
            left = _globalCtx$Layout2.left,
            right = _globalCtx$Layout2.right;
        var transformMtxRawInvert = globalCtx.Coordinate.transformMeta.transformMtxRawInvert;

        if (y > bottom || y < top || x < left || x > right) {
          globalCtx.Chart.chartMeta.focused = null;
          return;
        }

        var vec = _glMatrix.vec2.fromValues(x, y);

        _glMatrix.vec2.transformMat2d(vec, vec, transformMtxRawInvert);

        var x1 = vec[0];
        var y1 = vec[1];
        var dist = Math.hypot(x1, y1);

        if (dist > _this2.radius) {
          globalCtx.Chart.chartMeta.focused = undefined;
          return;
        }

        var x2 = 0;
        var y2 = 1;
        var dot = x1 * x2 + y1 * y2;
        var det = x1 * y2 - y1 * x2;
        var angle = Math.atan2(dot, det);

        if (angle < 0) {
          angle = Math.PI * 2 + angle;
        }

        globalCtx.Chart.chartMeta.focused = seriesInCoord.findIndex(function (s) {
          var _s$p = s.p,
              startAngle = _s$p.startAngle,
              endAngle = _s$p.endAngle;
          return angle > startAngle && angle < endAngle;
        });
      });
    }
  }, {
    key: "render",
    value: function render(ctx, globalCtx) {
      var _this3 = this;

      var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;
      var fontSize = globalCtx.theme.fontSize;
      seriesInCoord.forEach(function (_ref, sid) {
        var theme = _ref.theme,
            legend = _ref.legend,
            radius = _ref.radius;
        var textRadius = radius + 20; // const lgname = legend.name;

        ctx.addConditionBlockBegin(function () {
          return _this3.animationContext.arcs.value[sid].spanRadius === 0;
        });
        ctx.functionsCall(function (ctx) {
          ctx.save();
          ctx.beginPath();
          var curArc = _this3.animationContext.arcs.value[sid];
          ctx.fillStyle = ctx.strokeStyle = _colorString["default"].to.rgb(theme.color);
          ctx.moveTo(0, 0);
          ctx.arc(0, 0, curArc.radius, curArc.startAngle, curArc.endAngle);
          ctx.lineTo(0, 0);
          ctx.fill();
          ctx.beginPath();
          ctx.moveTo(0, 0);
          var middleAngle = curArc.middleAngle;
          var sinr = Math.sin(middleAngle);
          var cosr = Math.cos(middleAngle);
          var textx = textRadius * cosr;
          var texty = textRadius * sinr;
          var dir = cosr / Math.abs(cosr);
          var textsx = textx + dir * 20;
          ctx.lineTo(textx, texty);
          ctx.lineTo(textsx, texty);
          ctx.stroke();
          ctx.restore();
          ctx.textAlign = dir > 0 ? 'left' : 'right';
          ctx.fillText("".concat(legend.name), textsx + dir * 10, texty + fontSize / 2);
          ctx.restore();
        });
        ctx.addConditionBlockEnd();
      });
    }
  }, {
    key: "afterRender",
    value: function afterRender(context2d, globalCtx) {
      var _this4 = this;

      globalCtx.effect(function () {
        var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;

        _this4.animationContext.arcs.animeTo(seriesInCoord.map(function (s) {
          return (0, _lodash.clone)(s.p);
        }));
      });
      globalCtx.effect(function () {
        var focused = globalCtx.Chart.chartMeta.focused;
        var legend = globalCtx.globalData.source.legend;
        var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;
        var ps = seriesInCoord.map(function (s) {
          return (0, _lodash.clone)(s.p);
        });
        legend.forEach(function (l, lid) {
          if (focused === lid) {
            ps[lid].radius = _this4.radius * 1.15;
          } else {
            ps[lid].radius = _this4.radius;
          }
        });

        _this4.animationContext.arcs.animeTo(ps);
      });
    }
  }]);

  return PieChart;
}();

var _default = PieChart;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findDataInSeries = findDataInSeries;
exports.findDataInBarSeries = findDataInBarSeries;

function findDataInSeries(x, seriesMeta) {
  for (var i = 0; i < seriesMeta.length - 1; i++) {
    var x1 = seriesMeta[i].x;
    var x2 = seriesMeta[i + 1].x;

    if (x > x1 && x < x2) {
      return {
        belong: x - x1 > x2 - x ? 'next' : 'curr',
        curr: seriesMeta[i],
        next: seriesMeta[i + 1]
      };
    }
  }

  return null;
}

function findDataInBarSeries(x, y, seriesMeta, seriesStep) {
  var halfStep = seriesStep / 2;

  for (var i = 0; i < seriesMeta.length; i++) {
    var currMeta = seriesMeta[i];
    var pre = seriesMeta[i - 1];
    var next = seriesMeta[i + 1];
    var x1 = pre ? pre.x + halfStep : currMeta.x - halfStep;
    var x2 = next ? next.x - halfStep : currMeta.x + halfStep;

    if (x > x1 && x < x2) {
      var series = currMeta.series;
      var currLegend = void 0;

      for (var j = 0; j < series.length; j++) {
        var curSeries = series[j];
        var curPoint = curSeries.p;
        var barWidth = curSeries.barWidth;
        var _x = curPoint.x;
        var ys = curPoint.lastY;
        var y1 = curPoint.y;

        var _x2 = _x + barWidth;

        if (x > _x && x < _x2 && y < y1 && y > ys) {
          currLegend = series[j].legend;
          break;
        }
      }

      return {
        belong: currMeta,
        mouse: {
          x: x,
          y: y
        },
        currLegend: currLegend
      };
    }
  }

  return null;
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _colorString = _interopRequireDefault(require("color-string"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function getDefaultLegendContent(container, disableselect) {
  var element = document.createElement('div');
  element.setAttribute('style', "\n        z-index: 1;\n        max-height: 35%;\n        overflow-y: scroll;\n        line-height: 1em;\n        padding: 5px 20px;\n    ");
  var focused;

  function createLegendElem(meta, legendMeta) {
    var elem = document.createElement('div');
    elem.setAttribute('style', "\n            white-space: nowrap;\n            cursor: pointer;\n            user-select: none;\n            font-size: .8em;\n            line-height: 1em;\n            display: inline-block;\n            padding: 0 .5em;\n        ");
    elem.setAttribute('active', meta.legend.disabled);
    var span = document.createElement('span');
    span.setAttribute('style', "\n            display:inline-block;\n            width:.5em;\n            height:.5em;\n            border-radius:100%;\n            margin-right: .1em;\n            vertical-align: middle;\n            background: ".concat(meta.color[meta.legend.disabled ? 'disable' : 'enable'], "\n        "));
    var name = document.createElement('span');
    name.innerText = meta.legend.name;
    elem.appendChild(span);
    elem.appendChild(name);
    elem.addEventListener('click', function () {
      if (disableselect) {
        meta.legend.disabled = !meta.legend.disabled;
        elem.setAttribute('active', meta.legend.disabled);
        span.style.background = meta.color[meta.legend.disabled ? 'disable' : 'enable'];
      } else {
        if (focused && focused.name === meta.legend.name) {
          legendMeta.forEach(function (l) {
            l.legend.disabled = false;
            elem.setAttribute('active', false);
            span.style.background = meta.color.enable;
          });
          focused = null;
        } else {
          focused = meta.legend;
          legendMeta.forEach(function (l) {
            l.legend.disabled = focused.name !== l.legend.name;
            elem.setAttribute('active', l.legend.disabled);
            span.style.background = meta.color[l.legend.disabled ? 'disable' : 'enable'];
          });
        }
      }
    });
    return elem;
  }

  container.appendChild(element);
  return function (legendMeta) {
    element.innerHTML = '';
    console.log(legendMeta);
    legendMeta.forEach(function (meta) {
      var elem = createLegendElem(meta, legendMeta);
      element.appendChild(elem);
    });
    return element;
  };
}

var Legend = /*#__PURE__*/function () {
  function Legend() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Legend);

    this.name = 'LegendPlugin';
    this.options = options;
  }

  _createClass(Legend, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      globalCtx.hooks.beforeInitGlobalLayout.tap(this.name, function (container, layoutContext) {
        _this.legendContentCallback = _this.options.callback || getDefaultLegendContent(container, _this.options.disableselect);

        _this.init(container, globalCtx, layoutContext);
      }); // globalCtx.Overlayer.hooks.initOverlayer.tap(this.name, container => {
      //     this.init(container, globalCtx);
      // });
    }
  }, {
    key: "init",
    value: function init(container, globalCtx, layoutContext) {
      var _this2 = this;

      globalCtx.effect(function () {
        var legend = globalCtx.globalData.source.legend;
        var getColor = globalCtx.theme.getColor;
        var legendMeta = legend.map(function (l, idx) {
          return {
            legend: l,
            color: {
              enable: _colorString["default"].to.rgb(getColor(idx).color),
              disable: _colorString["default"].to.rgb(getColor(idx).disabledColor)
            }
          };
        });

        var elem = _this2.legendContentCallback && _this2.legendContentCallback(legendMeta);

        layoutContext.legendWrapper = elem;
      });
    }
  }]);

  return Legend;
}();

var _default = Legend;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _colorString = _interopRequireDefault(require("color-string"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function getDefaultFloatContent(container) {
  var element = document.createElement('div');
  element.setAttribute('style', "\n        position:absolute;\n        left:0;\n        top:0;\n        border: 1px solid #ddd;\n        border-radius: 5px;\n        color: #fff;\n        font-size: .8em;\n        z-index: 999;\n        background: rgba(0, 0, 0, 0.6);\n        pointer-events: none;\n    ");
  var title = document.createElement('p');
  element.appendChild(title);
  title.setAttribute('style', "\n     text-align: center;\n    margin: 0;\n    line-height: 1.5em;");
  element.style.display = 'none';
  var tablewrapper = document.createElement('table');
  tablewrapper.setAttribute('style', "\n        color: #fff;\n        font-size: 1em;\n    ");

  function createtr(legend, color, data) {
    var tr = document.createElement('tr');
    var td1 = document.createElement('td');
    td1.setAttribute('style', 'padding: 2px 4px;');
    var colorspan = document.createElement('span');
    colorspan.setAttribute('style', "\n            display:inline-block;\n            width:.8em;\n            height:.8em;\n            border-radius:100%;\n            margin-right:.5em;\n            background:".concat(color, ";"));
    td1.appendChild(colorspan);
    var titlespan = document.createElement('span');
    titlespan.innerText = legend;
    td1.appendChild(titlespan);
    var td2 = document.createElement('td');
    var dataspan = document.createElement('span');
    dataspan.innerText = data;
    td2.appendChild(dataspan);
    tr.appendChild(td1);
    tr.appendChild(td2);
    tr.colorspan = colorspan;
    tr.titlespan = titlespan;
    tr.dataspan = dataspan;
    return tr;
  }

  function editTr(tr, legend, color, data) {
    tr.style.display = 'table-row';
    tr.colorspan.style.background = color;
    tr.titlespan.innerText = legend;
    tr.dataspan.innerText = data;
  }

  element.appendChild(title);
  element.appendChild(tablewrapper);
  container.appendChild(element);
  var trBuffer = [];
  return function (meta) {
    element.style.display = 'block';

    if (!meta.display) {
      element.style.display = 'none';
    } else {
      title.innerText = meta.xDimension;
      element.style.display = 'block';
      element.style.transform = "translate(".concat(meta.x, "px, ").concat(meta.y, "px)");

      for (var idx in meta.series) {
        var s = meta.series[idx];

        if (trBuffer[idx]) {
          editTr(trBuffer[idx], s.name, s.color, s.data);
        } else {
          var trelem = createtr(s.name, s.color, s.data);
          trBuffer[idx] = trelem;
          tablewrapper.appendChild(trelem);
        }
      }

      var span = trBuffer.length - meta.series;

      if (span > 0) {
        trBuffer.slice(meta.series.length).forEach(function (e) {
          e.style.display = 'none';
        });
      }
    }
  };
}

var LineIndicator = /*#__PURE__*/function () {
  function LineIndicator() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LineIndicator);

    this.name = 'LineIndicator';
    this.overlayerAnimeCache = {};
    this.options = Object.assign({
      bar: false
    }, options);
  }

  _createClass(LineIndicator, [{
    key: "apply",
    value: function apply(globalCtx) {
      var _this = this;

      globalCtx.Overlayer.hooks.initOverlayer.tap(this.name, function (container, context2d) {
        _this.floatContentCallback = _this.options.callback || getDefaultFloatContent(container);

        _this.init(container, context2d, globalCtx);
      });
      globalCtx.Overlayer.hooks.renderOverLayer.tap(this.name, function (context2d) {
        _this.render(context2d, globalCtx);
      });
    }
  }, {
    key: "init",
    value: function init(container, ctx, globalCtx) {
      var _this2 = this;

      var render = ctx.render.bind(ctx);
      var _globalCtx$globalData = globalCtx.globalData.sourceMeta,
          xMeta = _globalCtx$globalData.xMeta,
          yMeta = _globalCtx$globalData.yMeta;
      globalCtx.effect(function () {
        var cache = _this2.overlayerAnimeCache;
        var focused = globalCtx.Chart.chartMeta.focused;
        var sv = globalCtx.Layout.spanVertical;
        cache.spanVertical = sv;

        if (!focused) {
          cache.x = null;
          _this2.floatContentCallback && _this2.floatContentCallback({
            display: false
          });
        } else {
          var belong = focused.belong;
          var _globalCtx$_mouse = globalCtx._mouse,
              x = _globalCtx$_mouse.x,
              y = _globalCtx$_mouse.y; // console.log(focused.mouse.x, focused.mouse.y)

          _this2.floatContentCallback && _this2.floatContentCallback({
            display: true,
            x: x,
            y: y,
            xDimension: xMeta.formatter(belong.series[0].dx),
            series: belong.series.filter(function (s) {
              return !s.legend.disabled;
            }).map(function (_ref) {
              var legend = _ref.legend,
                  dy = _ref.dy,
                  theme = _ref.theme;
              return {
                name: legend.name,
                color: _colorString["default"].to.rgb(theme.color),
                data: yMeta.formatter(dy),
                rawData: dy
              };
            })
          });
          cache.x = focused.belong.x;
        }

        render();
      });
    }
  }, {
    key: "render",
    value: function render(ctx, globalCtx) {
      var _this3 = this;

      var bar = this.options.bar;
      var _globalCtx$Layout = globalCtx.Layout,
          seriesStep = _globalCtx$Layout.seriesStep,
          spanVertical = _globalCtx$Layout.spanVertical;
      ctx.addConditionBlockBegin(function () {
        return !_this3.overlayerAnimeCache.x;
      });
      ctx.lineWidth = 2;
      ctx.save();
      ctx.beginPath();
      ctx.functionsCall(function (ctx) {
        if (bar) {
          ctx.fillStyle = 'rgba(233, 233, 233, 0.4)';
          ctx.fillRect(_this3.overlayerAnimeCache.x - seriesStep / 2, 0, seriesStep, spanVertical);
        } else {
          ctx.moveTo(_this3.overlayerAnimeCache.x, 0);
          ctx.lineTo(_this3.overlayerAnimeCache.x, _this3.overlayerAnimeCache.spanVertical);
        }
      });
      ctx.strokeStyle = 'rgb(238, 238, 238)';
      ctx.stroke();
      ctx.restore();
      ctx.addConditionBlockEnd();
    }
  }]);

  return LineIndicator;
}();

var _default = LineIndicator;
exports["default"] = _default;