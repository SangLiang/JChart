(()=>{var __webpack_modules__={210:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/lodash/lodash.js\nvar lodash = __webpack_require__(486);\n;// CONCATENATED MODULE: ./node_modules/bezier-js/src/utils.js\n\n\n// math-inlining.\nconst { abs, cos, sin, acos, atan2, sqrt, pow } = Math;\n\n// cube root function yielding real roots\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n}\n\n// trig constants\nconst pi = Math.PI,\n  tau = 2 * pi,\n  quart = pi / 2,\n  // float precision significant decimal\n  epsilon = 0.000001,\n  // extremas used in bbox calculation and similar algorithms\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n  nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n  // a zero coordinate, which is surprisingly useful\n  ZERO = { x: 0, y: 0, z: 0 };\n\n// Bezier utility functions\nconst utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [\n    -0.0640568928626056260850430826247450385909,\n    0.0640568928626056260850430826247450385909,\n    -0.1911188674736163091586398207570696318404,\n    0.1911188674736163091586398207570696318404,\n    -0.3150426796961633743867932913198102407864,\n    0.3150426796961633743867932913198102407864,\n    -0.4337935076260451384870842319133497124524,\n    0.4337935076260451384870842319133497124524,\n    -0.5454214713888395356583756172183723700107,\n    0.5454214713888395356583756172183723700107,\n    -0.6480936519369755692524957869107476266696,\n    0.6480936519369755692524957869107476266696,\n    -0.7401241915785543642438281030999784255232,\n    0.7401241915785543642438281030999784255232,\n    -0.8200019859739029219539498726697452080761,\n    0.8200019859739029219539498726697452080761,\n    -0.8864155270044010342131543419821967550873,\n    0.8864155270044010342131543419821967550873,\n    -0.9382745520027327585236490017087214496548,\n    0.9382745520027327585236490017087214496548,\n    -0.9747285559713094981983919930081690617411,\n    0.9747285559713094981983919930081690617411,\n    -0.9951872199970213601799974097007368118745,\n    0.9951872199970213601799974097007368118745,\n  ],\n\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [\n    0.1279381953467521569740561652246953718517,\n    0.1279381953467521569740561652246953718517,\n    0.1258374563468282961213753825111836887264,\n    0.1258374563468282961213753825111836887264,\n    0.121670472927803391204463153476262425607,\n    0.121670472927803391204463153476262425607,\n    0.1155056680537256013533444839067835598622,\n    0.1155056680537256013533444839067835598622,\n    0.1074442701159656347825773424466062227946,\n    0.1074442701159656347825773424466062227946,\n    0.0976186521041138882698806644642471544279,\n    0.0976186521041138882698806644642471544279,\n    0.086190161531953275917185202983742667185,\n    0.086190161531953275917185202983742667185,\n    0.0733464814110803057340336152531165181193,\n    0.0733464814110803057340336152531165181193,\n    0.0592985849154367807463677585001085845412,\n    0.0592985849154367807463677585001085845412,\n    0.0442774388174198061686027482113382288593,\n    0.0442774388174198061686027482113382288593,\n    0.0285313886289336631813078159518782864491,\n    0.0285313886289336631813078159518782864491,\n    0.0123412297999871995468056670700372915759,\n    0.0123412297999871995468056670700372915759,\n  ],\n\n  arcfn: function (t, derivativeFn) {\n    const d = derivativeFn(t);\n    let l = d.x * d.x + d.y * d.y;\n    if (typeof d.z !== "undefined") {\n      l += d.z * d.z;\n    }\n    return sqrt(l);\n  },\n\n  compute: function (t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n\n    const order = points.length - 1;\n\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n\n    const mt = 1 - t;\n    let p = points;\n\n    // constant?\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    }\n\n    // linear?\n    if (order === 1) {\n      const ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n      return ret;\n    }\n\n    // quadratic/cubic curve?\n    if (order < 4) {\n      let mt2 = mt * mt,\n        t2 = t * t,\n        a,\n        b,\n        c,\n        d = 0;\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n      const ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n      return ret;\n    }\n\n    // higher order curves: use de Casteljau\'s computation\n    const dCpts = JSON.parse(JSON.stringify(points));\n    while (dCpts.length > 1) {\n      for (let i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t,\n        };\n        if (typeof dCpts[i].z !== "undefined") {\n          dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n\n  computeWithRatios: function (t, points, ratios, _3d) {\n    const mt = 1 - t,\n      r = ratios,\n      p = points;\n\n    let f1 = r[0],\n      f2 = r[1],\n      f3 = r[2],\n      f4 = r[3],\n      d;\n\n    // spec for linear\n    f1 *= mt;\n    f2 *= t;\n\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to quadratic\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to cubic\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d\n          ? false\n          : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t,\n      };\n    }\n  },\n\n  derive: function (points, _3d) {\n    const dpoints = [];\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      const list = [];\n      for (let j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y),\n        };\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n        list.push(dpt);\n      }\n      dpoints.push(list);\n      p = list;\n    }\n    return dpoints;\n  },\n\n  between: function (v, m, M) {\n    return (\n      (m <= v && v <= M) ||\n      utils.approximately(v, m) ||\n      utils.approximately(v, M)\n    );\n  },\n\n  approximately: function (a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n\n  length: function (derivativeFn) {\n    const z = 0.5,\n      len = utils.Tvalues.length;\n\n    let sum = 0;\n\n    for (let i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n    return z * sum;\n  },\n\n  map: function (v, ds, de, ts, te) {\n    const d1 = de - ds,\n      d2 = te - ts,\n      v2 = v - ds,\n      r = v2 / d1;\n    return ts + d2 * r;\n  },\n\n  lerp: function (r, v1, v2) {\n    const ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y),\n    };\n    if (v1.z !== undefined && v2.z !== undefined) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n    return ret;\n  },\n\n  pointToString: function (p) {\n    let s = p.x + "/" + p.y;\n    if (typeof p.z !== "undefined") {\n      s += "/" + p.z;\n    }\n    return s;\n  },\n\n  pointsToString: function (points) {\n    return "[" + points.map(utils.pointToString).join(", ") + "]";\n  },\n\n  copy: function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n\n  angle: function (o, v1, v2) {\n    const dx1 = v1.x - o.x,\n      dy1 = v1.y - o.y,\n      dx2 = v2.x - o.x,\n      dy2 = v2.y - o.y,\n      cross = dx1 * dy2 - dy1 * dx2,\n      dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n\n  // round as string, to avoid rounding errors\n  round: function (v, d) {\n    const s = "" + v;\n    const pos = s.indexOf(".");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n\n  dist: function (p1, p2) {\n    const dx = p1.x - p2.x,\n      dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n\n  closest: function (LUT, point) {\n    let mdist = pow(2, 63),\n      mpos,\n      d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return { mdist: mdist, mpos: mpos };\n  },\n\n  abcratio: function (t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === "undefined") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const bottom = pow(t, n) + pow(1 - t, n),\n      top = bottom - 1;\n    return abs(top / bottom);\n  },\n\n  projectionratio: function (t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === "undefined") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const top = pow(1 - t, n),\n      bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    const nx =\n        (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (d == 0) {\n      return false;\n    }\n    return { x: nx / d, y: ny / d };\n  },\n\n  lli4: function (p1, p2, p3, p4) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      x3 = p3.x,\n      y3 = p3.y,\n      x4 = p4.x,\n      y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n\n  lli: function (v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n\n  makeline: function (p1, p2) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      dx = (x2 - x1) / 3,\n      dy = (y2 - y1) / 3;\n    return new Bezier(\n      x1,\n      y1,\n      x1 + dx,\n      y1 + dy,\n      x1 + 2 * dx,\n      y1 + 2 * dy,\n      x2,\n      y2\n    );\n  },\n\n  findbbox: function (sections) {\n    let mx = nMax,\n      my = nMax,\n      MX = nMin,\n      MY = nMin;\n    sections.forEach(function (s) {\n      const bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },\n      y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my },\n    };\n  },\n\n  shapeintersections: function (\n    s1,\n    bbox1,\n    s2,\n    bbox2,\n    curveIntersectionThreshold\n  ) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    const intersections = [];\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n\n  makeshape: function (forward, back, curveIntersectionThreshold) {\n    const bpl = back.points.length;\n    const fpl = forward.points.length;\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    const shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end]),\n    };\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(\n        shape,\n        shape.bbox,\n        s2,\n        s2.bbox,\n        curveIntersectionThreshold\n      );\n    };\n    return shape;\n  },\n\n  getminmax: function (curve, d, list) {\n    if (!list) return { min: 0, max: 0 };\n    let min = nMax,\n      max = nMin,\n      t,\n      c;\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n    for (let i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n      if (c[d] < min) {\n        min = c[d];\n      }\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n    return { min: min, mid: (min + max) / 2, max: max, size: max - min };\n  },\n\n  align: function (points, line) {\n    const tx = line.p1.x,\n      ty = line.p1.y,\n      a = -atan2(line.p2.y - ty, line.p2.x - tx),\n      d = function (v) {\n        return {\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a),\n        };\n      };\n    return points.map(d);\n  },\n\n  roots: function (points, line) {\n    line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };\n\n    const order = points.length - 1;\n    const aligned = utils.align(points, line);\n    const reduce = function (t) {\n      return 0 <= t && t <= 1;\n    };\n\n    if (order === 2) {\n      const a = aligned[0].y,\n        b = aligned[1].y,\n        c = aligned[2].y,\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2].filter(reduce);\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n      }\n      return [];\n    }\n\n    // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n    const pa = aligned[0].y,\n      pb = aligned[1].y,\n      pc = aligned[2].y,\n      pd = aligned[3].y;\n\n    let d = -pa + 3 * pb - 3 * pc + pd,\n      a = 3 * pa - 6 * pb + 3 * pc,\n      b = -3 * pa + 3 * pb,\n      c = pa;\n\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        }\n        // linear solution:\n        return [-c / b].filter(reduce);\n      }\n      // quadratic solution:\n      const q = sqrt(b * b - 4 * a * c),\n        a2 = 2 * a;\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n    }\n\n    // at this point, we know we need a cubic solution:\n\n    a /= d;\n    b /= d;\n    c /= d;\n\n    const p = (3 * b - a * a) / 3,\n      p3 = p / 3,\n      q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n      q2 = q / 2,\n      discriminant = q2 * q2 + p3 * p3 * p3;\n\n    let u1, v1, x1, x2, x3;\n    if (discriminant < 0) {\n      const mp3 = -p / 3,\n        mp33 = mp3 * mp3 * mp3,\n        r = sqrt(mp33),\n        t = -q / (2 * r),\n        cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n        phi = acos(cosphi),\n        crtr = crt(r),\n        t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      const sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n\n  droots: function (p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      const a = p[0],\n        b = p[1],\n        c = p[2],\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n      return [];\n    }\n\n    // linear roots are even easier\n    if (p.length === 2) {\n      const a = p[0],\n        b = p[1];\n      if (a !== b) {\n        return [a / (a - b)];\n      }\n      return [];\n    }\n\n    return [];\n  },\n\n  curvature: function (t, d1, d2, _3d, kOnly) {\n    let num,\n      dnm,\n      adk,\n      dk,\n      k = 0,\n      r = 0;\n\n    //\n    // We\'re using the following formula for curvature:\n    //\n    //              x\'y" - y\'x"\n    //   k(t) = ------------------\n    //           (x\'² + y\'²)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y\'z" - y"z\')² + (z\'x" - z"x\')² + (x\'y" - x"y\')²)\n    //   k(t) = -------------------------------------------------------\n    //                     (x\'² + y\'² + z\'²)^(3/2)\n    //\n\n    const d = utils.compute(t, d1);\n    const dd = utils.compute(t, d2);\n    const qdsum = d.x * d.x + d.y * d.y;\n\n    if (_3d) {\n      num = sqrt(\n        pow(d.y * dd.z - dd.y * d.z, 2) +\n          pow(d.z * dd.x - dd.z * d.x, 2) +\n          pow(d.x * dd.y - dd.x * d.y, 2)\n      );\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n\n    if (num === 0 || dnm === 0) {\n      return { k: 0, r: 0 };\n    }\n\n    k = num / dnm;\n    r = dnm / num;\n\n    // We\'re also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we\'re just going to\n    // ballpark it based on an epsilon.\n    if (!kOnly) {\n      // compute k\'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n\n    return { k: k, r: r, dk: dk, adk: adk };\n  },\n\n  inflections: function (points) {\n    if (points.length < 4) return [];\n\n    // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    const p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\n      a = p[2].x * p[1].y,\n      b = p[3].x * p[1].y,\n      c = p[1].x * p[2].y,\n      d = p[3].x * p[2].y,\n      v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n      v2 = 18 * (3 * a - b - 3 * c),\n      v3 = 18 * (c - a);\n\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        let t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n      return [];\n    }\n\n    const trm = v2 * v2 - 4 * v1 * v3,\n      sq = Math.sqrt(trm),\n      d2 = 2 * v1;\n\n    if (utils.approximately(d2, 0)) return [];\n\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n\n  bboxoverlap: function (b1, b2) {\n    const dims = ["x", "y"],\n      len = dims.length;\n\n    for (let i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n    return true;\n  },\n\n  expandbox: function (bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\n    const c1b = c1.bbox(),\n      c2b = c2.bbox(),\n      r = 100000,\n      threshold = curveIntersectionThreshold || 0.5;\n\n    if (\n      c1b.x.size + c1b.y.size < threshold &&\n      c2b.x.size + c2b.y.size < threshold\n    ) {\n      return [\n        (((r * (c1._t1 + c1._t2)) / 2) | 0) / r +\n          "/" +\n          (((r * (c2._t1 + c2._t2)) / 2) | 0) / r,\n      ];\n    }\n\n    let cc1 = c1.split(0.5),\n      cc2 = c2.split(0.5),\n      pairs = [\n        { left: cc1.left, right: cc2.left },\n        { left: cc1.left, right: cc2.right },\n        { left: cc1.right, right: cc2.right },\n        { left: cc1.right, right: cc2.left },\n      ];\n\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n\n    let results = [];\n\n    if (pairs.length === 0) return results;\n\n    pairs.forEach(function (pair) {\n      results = results.concat(\n        utils.pairiteration(pair.left, pair.right, threshold)\n      );\n    });\n\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n\n    return results;\n  },\n\n  getccenter: function (p1, p2, p3) {\n    const dx1 = p2.x - p1.x,\n      dy1 = p2.y - p1.y,\n      dx2 = p3.x - p2.x,\n      dy2 = p3.y - p2.y,\n      dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n      dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n      dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n      dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n      // chord midpoints\n      mx1 = (p1.x + p2.x) / 2,\n      my1 = (p1.y + p2.y) / 2,\n      mx2 = (p2.x + p3.x) / 2,\n      my2 = (p2.y + p3.y) / 2,\n      // midpoint offsets\n      mx1n = mx1 + dx1p,\n      my1n = my1 + dy1p,\n      mx2n = mx2 + dx2p,\n      my2n = my2 + dy2p,\n      // intersection of these lines:\n      arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n      r = utils.dist(arc, p1);\n\n    // arc start/end values, over mid point:\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\n      m = atan2(p2.y - arc.y, p2.x - arc.x),\n      e = atan2(p3.y - arc.y, p3.x - arc.x),\n      _;\n\n    // determine arc direction (cw/ccw correction)\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    }\n    // assign and done.\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n\n  numberSort: function (a, b) {\n    return a - b;\n  },\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/bezier-js/src/poly-bezier.js\n\n\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return (\n      "[" +\n      this.curves\n        .map(function (curve) {\n          return utils.pointsToString(curve.points);\n        })\n        .join(", ") +\n      "]"\n    );\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves\n      .map(function (v) {\n        return v.length();\n      })\n      .reduce(function (a, b) {\n        return a + b;\n      });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/bezier-js/src/bezier.js\n/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\n\n\n\n\n// math-inlining.\nconst { abs: bezier_abs, min, max, cos: bezier_cos, sin: bezier_sin, acos: bezier_acos, sqrt: bezier_sqrt } = Math;\nconst bezier_pi = Math.PI;\n// a zero coordinate, which is surprisingly useful\nconst bezier_ZERO = { x: 0, y: 0, z: 0 };\n\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\nclass Bezier {\n  constructor(coords) {\n    let args =\n      coords && coords.forEach ? coords : Array.from(arguments).slice();\n    let coordlen = false;\n\n    if (typeof args[0] === "object") {\n      coordlen = args.length;\n      const newargs = [];\n      args.forEach(function (point) {\n        ["x", "y", "z"].forEach(function (d) {\n          if (typeof point[d] !== "undefined") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    let higher = false;\n    const len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            "Only new Bezier(point[]) is accepted for 4th and higher order curves"\n          );\n        }\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            "Only new Bezier(point[]) is accepted for 4th and higher order curves"\n          );\n        }\n      }\n    }\n\n    const _3d = (this._3d =\n      (!higher && (len === 9 || len === 12)) ||\n      (coords && coords[0] && typeof coords[0].z !== "undefined"));\n\n    const points = (this.points = []);\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1],\n      };\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n      points.push(point);\n    }\n    const order = (this.order = points.length - 1);\n\n    const dims = (this.dims = ["x", "y"]);\n    if (_3d) dims.push("z");\n    this.dimlen = dims.length;\n\n    const aligned = utils.align(points, { p1: points[0], p2: points[order] });\n    this._linear = !aligned.some((p) => bezier_abs(p.y) > 0.0001);\n\n    this._lut = [];\n\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  static quadraticFromPoints(p1, p2, p3, t) {\n    if (typeof t === "undefined") {\n      t = 0.5;\n    }\n    // shortcuts, although they\'re really dumb\n    if (t === 0) {\n      return new Bezier(p2, p2, p3);\n    }\n    if (t === 1) {\n      return new Bezier(p1, p2, p2);\n    }\n    // real fitting.\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\n    return new Bezier(p1, abc.A, p3);\n  }\n\n  static cubicFromPoints(S, B, E, t, d1) {\n    if (typeof t === "undefined") {\n      t = 0.5;\n    }\n    const abc = Bezier.getABC(3, S, B, E, t);\n    if (typeof d1 === "undefined") {\n      d1 = utils.dist(B, abc.C);\n    }\n    const d2 = (d1 * (1 - t)) / t;\n\n    const selen = utils.dist(S, E),\n      lx = (E.x - S.x) / selen,\n      ly = (E.y - S.y) / selen,\n      bx1 = d1 * lx,\n      by1 = d1 * ly,\n      bx2 = d2 * lx,\n      by2 = d2 * ly;\n    // derivation of new hull coordinates\n    const e1 = { x: B.x - bx1, y: B.y - by1 },\n      e2 = { x: B.x + bx2, y: B.y + by2 },\n      A = abc.A,\n      v1 = { x: A.x + (e1.x - A.x) / (1 - t), y: A.y + (e1.y - A.y) / (1 - t) },\n      v2 = { x: A.x + (e2.x - A.x) / t, y: A.y + (e2.y - A.y) / t },\n      nc1 = { x: S.x + (v1.x - S.x) / t, y: S.y + (v1.y - S.y) / t },\n      nc2 = {\n        x: E.x + (v2.x - E.x) / (1 - t),\n        y: E.y + (v2.y - E.y) / (1 - t),\n      };\n    // ...done\n    return new Bezier(S, nc1, nc2, E);\n  }\n\n  static getUtils() {\n    return utils;\n  }\n\n  getUtils() {\n    return Bezier.getUtils();\n  }\n\n  static get PolyBezier() {\n    return PolyBezier;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return utils.pointsToString(this.points);\n  }\n\n  toSVG() {\n    if (this._3d) return false;\n    const p = this.points,\n      x = p[0].x,\n      y = p[0].y,\n      s = ["M", x, y, this.order === 2 ? "Q" : "C"];\n    for (let i = 1, last = p.length; i < last; i++) {\n      s.push(p[i].x);\n      s.push(p[i].y);\n    }\n    return s.join(" ");\n  }\n\n  setRatios(ratios) {\n    if (ratios.length !== this.points.length) {\n      throw new Error("incorrect number of ratio values");\n    }\n    this.ratios = ratios;\n    this._lut = []; //  invalidate any precomputed LUT\n  }\n\n  verify() {\n    const print = this.coordDigest();\n    if (print !== this._print) {\n      this._print = print;\n      this.update();\n    }\n  }\n\n  coordDigest() {\n    return this.points\n      .map(function (c, pos) {\n        return "" + pos + c.x + c.y + (c.z ? c.z : 0);\n      })\n      .join("");\n  }\n\n  update() {\n    // invalidate any precomputed LUT\n    this._lut = [];\n    this.dpoints = utils.derive(this.points, this._3d);\n    this.computedirection();\n  }\n\n  computedirection() {\n    const points = this.points;\n    const angle = utils.angle(points[0], points[this.order], points[1]);\n    this.clockwise = angle > 0;\n  }\n\n  length() {\n    return utils.length(this.derivative.bind(this));\n  }\n\n  static getABC(order = 2, S, B, E, t = 0.5) {\n    const u = utils.projectionratio(t, order),\n      um = 1 - u,\n      C = {\n        x: u * S.x + um * E.x,\n        y: u * S.y + um * E.y,\n      },\n      s = utils.abcratio(t, order),\n      A = {\n        x: B.x + (B.x - C.x) / s,\n        y: B.y + (B.y - C.y) / s,\n      };\n    return { A, B, C, S, E };\n  }\n\n  getABC(t, B) {\n    B = B || this.get(t);\n    let S = this.points[0];\n    let E = this.points[this.order];\n    return Bezier.getABC(this.order, S, B, E, t);\n  }\n\n  getLUT(steps) {\n    this.verify();\n    steps = steps || 100;\n    if (this._lut.length === steps) {\n      return this._lut;\n    }\n    this._lut = [];\n    // We want a range from 0 to 1 inclusive, so\n    // we decrement and then use <= rather than <:\n    steps--;\n    for (let i = 0, p, t; i < steps; i++) {\n      t = i / (steps - 1);\n      p = this.compute(t);\n      p.t = t;\n      this._lut.push(p);\n    }\n    return this._lut;\n  }\n\n  on(point, error) {\n    error = error || 5;\n    const lut = this.getLUT(),\n      hits = [];\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\n      c = lut[i];\n      if (utils.dist(c, point) < error) {\n        hits.push(c);\n        t += i / lut.length;\n      }\n    }\n    if (!hits.length) return false;\n    return (t /= hits.length);\n  }\n\n  project(point) {\n    // step 1: coarse check\n    const LUT = this.getLUT(),\n      l = LUT.length - 1,\n      closest = utils.closest(LUT, point),\n      mpos = closest.mpos,\n      t1 = (mpos - 1) / l,\n      t2 = (mpos + 1) / l,\n      step = 0.1 / l;\n\n    // step 2: fine check\n    let mdist = closest.mdist,\n      t = t1,\n      ft = t,\n      p;\n    mdist += 1;\n    for (let d; t < t2 + step; t += step) {\n      p = this.compute(t);\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        ft = t;\n      }\n    }\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n    p = this.compute(ft);\n    p.t = ft;\n    p.d = mdist;\n    return p;\n  }\n\n  get(t) {\n    return this.compute(t);\n  }\n\n  point(idx) {\n    return this.points[idx];\n  }\n\n  compute(t) {\n    if (this.ratios) {\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n    }\n    return utils.compute(t, this.points, this._3d, this.ratios);\n  }\n\n  raise() {\n    const p = this.points,\n      np = [p[0]],\n      k = p.length;\n    for (let i = 1, pi, pim; i < k; i++) {\n      pi = p[i];\n      pim = p[i - 1];\n      np[i] = {\n        x: ((k - i) / k) * pi.x + (i / k) * pim.x,\n        y: ((k - i) / k) * pi.y + (i / k) * pim.y,\n      };\n    }\n    np[k] = p[k - 1];\n    return new Bezier(np);\n  }\n\n  derivative(t) {\n    return utils.compute(t, this.dpoints[0], this._3d);\n  }\n\n  dderivative(t) {\n    return utils.compute(t, this.dpoints[1], this._3d);\n  }\n\n  align() {\n    let p = this.points;\n    return new Bezier(utils.align(p, { p1: p[0], p2: p[p.length - 1] }));\n  }\n\n  curvature(t) {\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n  }\n\n  inflections() {\n    return utils.inflections(this.points);\n  }\n\n  normal(t) {\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\n  }\n\n  __normal2(t) {\n    const d = this.derivative(t);\n    const q = bezier_sqrt(d.x * d.x + d.y * d.y);\n    return { x: -d.y / q, y: d.x / q };\n  }\n\n  __normal3(t) {\n    // see http://stackoverflow.com/questions/25453159\n    const r1 = this.derivative(t),\n      r2 = this.derivative(t + 0.01),\n      q1 = bezier_sqrt(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n      q2 = bezier_sqrt(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n    r1.x /= q1;\n    r1.y /= q1;\n    r1.z /= q1;\n    r2.x /= q2;\n    r2.y /= q2;\n    r2.z /= q2;\n    // cross product\n    const c = {\n      x: r2.y * r1.z - r2.z * r1.y,\n      y: r2.z * r1.x - r2.x * r1.z,\n      z: r2.x * r1.y - r2.y * r1.x,\n    };\n    const m = bezier_sqrt(c.x * c.x + c.y * c.y + c.z * c.z);\n    c.x /= m;\n    c.y /= m;\n    c.z /= m;\n    // rotation matrix\n    const R = [\n      c.x * c.x,\n      c.x * c.y - c.z,\n      c.x * c.z + c.y,\n      c.x * c.y + c.z,\n      c.y * c.y,\n      c.y * c.z - c.x,\n      c.x * c.z - c.y,\n      c.y * c.z + c.x,\n      c.z * c.z,\n    ];\n    // normal vector:\n    const n = {\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z,\n    };\n    return n;\n  }\n\n  hull(t) {\n    let p = this.points,\n      _p = [],\n      q = [],\n      idx = 0;\n    q[idx++] = p[0];\n    q[idx++] = p[1];\n    q[idx++] = p[2];\n    if (this.order === 3) {\n      q[idx++] = p[3];\n    }\n    // we lerp between all points at each iteration, until we have 1 point left.\n    while (p.length > 1) {\n      _p = [];\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\n        pt = utils.lerp(t, p[i], p[i + 1]);\n        q[idx++] = pt;\n        _p.push(pt);\n      }\n      p = _p;\n    }\n    return q;\n  }\n\n  split(t1, t2) {\n    // shortcuts\n    if (t1 === 0 && !!t2) {\n      return this.split(t2).left;\n    }\n    if (t2 === 1) {\n      return this.split(t1).right;\n    }\n\n    // no shortcut: use "de Casteljau" iteration.\n    const q = this.hull(t1);\n    const result = {\n      left:\n        this.order === 2\n          ? new Bezier([q[0], q[3], q[5]])\n          : new Bezier([q[0], q[4], q[7], q[9]]),\n      right:\n        this.order === 2\n          ? new Bezier([q[5], q[4], q[2]])\n          : new Bezier([q[9], q[8], q[6], q[3]]),\n      span: q,\n    };\n\n    // make sure we bind _t1/_t2 information!\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);\n\n    // if we have no t2, we\'re done\n    if (!t2) {\n      return result;\n    }\n\n    // if we have a t2, split again:\n    t2 = utils.map(t2, t1, 1, 0, 1);\n    return result.right.split(t2).left;\n  }\n\n  extrema() {\n    const result = {};\n    let roots = [];\n\n    this.dims.forEach(\n      function (dim) {\n        let mfn = function (v) {\n          return v[dim];\n        };\n        let p = this.dpoints[0].map(mfn);\n        result[dim] = utils.droots(p);\n        if (this.order === 3) {\n          p = this.dpoints[1].map(mfn);\n          result[dim] = result[dim].concat(utils.droots(p));\n        }\n        result[dim] = result[dim].filter(function (t) {\n          return t >= 0 && t <= 1;\n        });\n        roots = roots.concat(result[dim].sort(utils.numberSort));\n      }.bind(this)\n    );\n\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n      return roots.indexOf(v) === idx;\n    });\n\n    return result;\n  }\n\n  bbox() {\n    const extrema = this.extrema(),\n      result = {};\n    this.dims.forEach(\n      function (d) {\n        result[d] = utils.getminmax(this, d, extrema[d]);\n      }.bind(this)\n    );\n    return result;\n  }\n\n  overlaps(curve) {\n    const lbbox = this.bbox(),\n      tbbox = curve.bbox();\n    return utils.bboxoverlap(lbbox, tbbox);\n  }\n\n  offset(t, d) {\n    if (typeof d !== "undefined") {\n      const c = this.get(t),\n        n = this.normal(t);\n      const ret = {\n        c: c,\n        n: n,\n        x: c.x + n.x * d,\n        y: c.y + n.y * d,\n      };\n      if (this._3d) {\n        ret.z = c.z + n.z * d;\n      }\n      return ret;\n    }\n    if (this._linear) {\n      const nv = this.normal(0),\n        coords = this.points.map(function (p) {\n          const ret = {\n            x: p.x + t * nv.x,\n            y: p.y + t * nv.y,\n          };\n          if (p.z && nv.z) {\n            ret.z = p.z + t * nv.z;\n          }\n          return ret;\n        });\n      return [new Bezier(coords)];\n    }\n    return this.reduce().map(function (s) {\n      if (s._linear) {\n        return s.offset(t)[0];\n      }\n      return s.scale(t);\n    });\n  }\n\n  simple() {\n    if (this.order === 3) {\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n      if ((a1 > 0 && a2 < 0) || (a1 < 0 && a2 > 0)) return false;\n    }\n    const n1 = this.normal(0);\n    const n2 = this.normal(1);\n    let s = n1.x * n2.x + n1.y * n2.y;\n    if (this._3d) {\n      s += n1.z * n2.z;\n    }\n    return bezier_abs(bezier_acos(s)) < bezier_pi / 3;\n  }\n\n  reduce() {\n    // TODO: examine these var types in more detail...\n    let i,\n      t1 = 0,\n      t2 = 0,\n      step = 0.01,\n      segment,\n      pass1 = [],\n      pass2 = [];\n    // first pass: split on extrema\n    let extrema = this.extrema().values;\n    if (extrema.indexOf(0) === -1) {\n      extrema = [0].concat(extrema);\n    }\n    if (extrema.indexOf(1) === -1) {\n      extrema.push(1);\n    }\n\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n      t2 = extrema[i];\n      segment = this.split(t1, t2);\n      segment._t1 = t1;\n      segment._t2 = t2;\n      pass1.push(segment);\n      t1 = t2;\n    }\n\n    // second pass: further reduce these segments to simple segments\n    pass1.forEach(function (p1) {\n      t1 = 0;\n      t2 = 0;\n      while (t2 <= 1) {\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n          segment = p1.split(t1, t2);\n          if (!segment.simple()) {\n            t2 -= step;\n            if (bezier_abs(t1 - t2) < step) {\n              // we can never form a reduction\n              return [];\n            }\n            segment = p1.split(t1, t2);\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n            pass2.push(segment);\n            t1 = t2;\n            break;\n          }\n        }\n      }\n      if (t1 < 1) {\n        segment = p1.split(t1, 1);\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n        segment._t2 = p1._t2;\n        pass2.push(segment);\n      }\n    });\n    return pass2;\n  }\n\n  scale(d) {\n    const order = this.order;\n    let distanceFn = false;\n    if (typeof d === "function") {\n      distanceFn = d;\n    }\n    if (distanceFn && order === 2) {\n      return this.raise().scale(distanceFn);\n    }\n\n    // TODO: add special handling for degenerate (=linear) curves.\n    const clockwise = this.clockwise;\n    const r1 = distanceFn ? distanceFn(0) : d;\n    const r2 = distanceFn ? distanceFn(1) : d;\n    const v = [this.offset(0, 10), this.offset(1, 10)];\n    const points = this.points;\n    const np = [];\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n    if (!o) {\n      throw new Error("cannot scale this curve. Try reducing it first.");\n    }\n    // move all points by distance \'d\' wrt the origin \'o\'\n\n    // move end points by fixed distance along normal.\n    [0, 1].forEach(function (t) {\n      const p = (np[t * order] = utils.copy(points[t * order]));\n      p.x += (t ? r2 : r1) * v[t].n.x;\n      p.y += (t ? r2 : r1) * v[t].n.y;\n    });\n\n    if (!distanceFn) {\n      // move control points to lie on the intersection of the offset\n      // derivative vector, and the origin-through-control vector\n      [0, 1].forEach((t) => {\n        if (order === 2 && !!t) return;\n        const p = np[t * order];\n        const d = this.derivative(t);\n        const p2 = { x: p.x + d.x, y: p.y + d.y };\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n      });\n      return new Bezier(np);\n    }\n\n    // move control points by "however much necessary to\n    // ensure the correct tangent to endpoint".\n    [0, 1].forEach(function (t) {\n      if (order === 2 && !!t) return;\n      var p = points[t + 1];\n      var ov = {\n        x: p.x - o.x,\n        y: p.y - o.y,\n      };\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n      if (distanceFn && !clockwise) rc = -rc;\n      var m = bezier_sqrt(ov.x * ov.x + ov.y * ov.y);\n      ov.x /= m;\n      ov.y /= m;\n      np[t + 1] = {\n        x: p.x + rc * ov.x,\n        y: p.y + rc * ov.y,\n      };\n    });\n    return new Bezier(np);\n  }\n\n  outline(d1, d2, d3, d4) {\n    d2 = typeof d2 === "undefined" ? d1 : d2;\n    const reduced = this.reduce(),\n      len = reduced.length,\n      fcurves = [];\n\n    let bcurves = [],\n      p,\n      alen = 0,\n      tlen = this.length();\n\n    const graduated = typeof d3 !== "undefined" && typeof d4 !== "undefined";\n\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\n      return function (v) {\n        const f1 = alen / tlen,\n          f2 = (alen + slen) / tlen,\n          d = e - s;\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n      };\n    }\n\n    // form curve oulines\n    reduced.forEach(function (segment) {\n      const slen = segment.length();\n      if (graduated) {\n        fcurves.push(\n          segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen))\n        );\n        bcurves.push(\n          segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen))\n        );\n      } else {\n        fcurves.push(segment.scale(d1));\n        bcurves.push(segment.scale(-d2));\n      }\n      alen += slen;\n    });\n\n    // reverse the "return" outline\n    bcurves = bcurves\n      .map(function (s) {\n        p = s.points;\n        if (p[3]) {\n          s.points = [p[3], p[2], p[1], p[0]];\n        } else {\n          s.points = [p[2], p[1], p[0]];\n        }\n        return s;\n      })\n      .reverse();\n\n    // form the endcaps as lines\n    const fs = fcurves[0].points[0],\n      fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n      bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n      be = bcurves[0].points[0],\n      ls = utils.makeline(bs, fs),\n      le = utils.makeline(fe, be),\n      segments = [ls].concat(fcurves).concat([le]).concat(bcurves),\n      slen = segments.length;\n\n    return new PolyBezier(segments);\n  }\n\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\n    d2 = d2 || d1;\n    const outline = this.outline(d1, d2).curves;\n    const shapes = [];\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\n      const shape = utils.makeshape(\n        outline[i],\n        outline[len - i],\n        curveIntersectionThreshold\n      );\n      shape.startcap.virtual = i > 1;\n      shape.endcap.virtual = i < len / 2 - 1;\n      shapes.push(shape);\n    }\n    return shapes;\n  }\n\n  intersects(curve, curveIntersectionThreshold) {\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\n    if (curve.p1 && curve.p2) {\n      return this.lineIntersects(curve);\n    }\n    if (curve instanceof Bezier) {\n      curve = curve.reduce();\n    }\n    return this.curveintersects(\n      this.reduce(),\n      curve,\n      curveIntersectionThreshold\n    );\n  }\n\n  lineIntersects(line) {\n    const mx = min(line.p1.x, line.p2.x),\n      my = min(line.p1.y, line.p2.y),\n      MX = max(line.p1.x, line.p2.x),\n      MY = max(line.p1.y, line.p2.y);\n    return utils.roots(this.points, line).filter((t) => {\n      var p = this.get(t);\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n    });\n  }\n\n  selfintersects(curveIntersectionThreshold) {\n    // "simple" curves cannot intersect with their direct\n    // neighbour, so for each segment X we check whether\n    // it intersects [0:x-2][x+2:last].\n\n    const reduced = this.reduce(),\n      len = reduced.length - 2,\n      results = [];\n\n    for (let i = 0, result, left, right; i < len; i++) {\n      left = reduced.slice(i, i + 1);\n      right = reduced.slice(i + 2);\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\n      results.push(...result);\n    }\n    return results;\n  }\n\n  curveintersects(c1, c2, curveIntersectionThreshold) {\n    const pairs = [];\n    // step 1: pair off any overlapping segments\n    c1.forEach(function (l) {\n      c2.forEach(function (r) {\n        if (l.overlaps(r)) {\n          pairs.push({ left: l, right: r });\n        }\n      });\n    });\n    // step 2: for each pairing, run through the convergence algorithm.\n    let intersections = [];\n    pairs.forEach(function (pair) {\n      const result = utils.pairiteration(\n        pair.left,\n        pair.right,\n        curveIntersectionThreshold\n      );\n      if (result.length > 0) {\n        intersections = intersections.concat(result);\n      }\n    });\n    return intersections;\n  }\n\n  arcs(errorThreshold) {\n    errorThreshold = errorThreshold || 0.5;\n    return this._iterate(errorThreshold, []);\n  }\n\n  _error(pc, np1, s, e) {\n    const q = (e - s) / 4,\n      c1 = this.get(s + q),\n      c2 = this.get(e - q),\n      ref = utils.dist(pc, np1),\n      d1 = utils.dist(pc, c1),\n      d2 = utils.dist(pc, c2);\n    return bezier_abs(d1 - ref) + bezier_abs(d2 - ref);\n  }\n\n  _iterate(errorThreshold, circles) {\n    let t_s = 0,\n      t_e = 1,\n      safety;\n    // we do a binary search to find the "good `t` closest to no-longer-good"\n    do {\n      safety = 0;\n\n      // step 1: start with the maximum possible arc\n      t_e = 1;\n\n      // points:\n      let np1 = this.get(t_s),\n        np2,\n        np3,\n        arc,\n        prev_arc;\n\n      // booleans:\n      let curr_good = false,\n        prev_good = false,\n        done;\n\n      // numbers:\n      let t_m = t_e,\n        prev_e = 1,\n        step = 0;\n\n      // step 2: find the best possible arc\n      do {\n        prev_good = curr_good;\n        prev_arc = arc;\n        t_m = (t_s + t_e) / 2;\n        step++;\n\n        np2 = this.get(t_m);\n        np3 = this.get(t_e);\n\n        arc = utils.getccenter(np1, np2, np3);\n\n        //also save the t values\n        arc.interval = {\n          start: t_s,\n          end: t_e,\n        };\n\n        let error = this._error(arc, np1, t_s, t_e);\n        curr_good = error <= errorThreshold;\n\n        done = prev_good && !curr_good;\n        if (!done) prev_e = t_e;\n\n        // this arc is fine: we can move \'e\' up to see if we can find a wider arc\n        if (curr_good) {\n          // if e is already at max, then we\'re done for this arc.\n          if (t_e >= 1) {\n            // make sure we cap at t=1\n            arc.interval.end = prev_e = 1;\n            prev_arc = arc;\n            // if we capped the arc segment to t=1 we also need to make sure that\n            // the arc\'s end angle is correct with respect to the bezier end point.\n            if (t_e > 1) {\n              let d = {\n                x: arc.x + arc.r * bezier_cos(arc.e),\n                y: arc.y + arc.r * bezier_sin(arc.e),\n              };\n              arc.e += utils.angle({ x: arc.x, y: arc.y }, d, this.get(1));\n            }\n            break;\n          }\n          // if not, move it up by half the iteration distance\n          t_e = t_e + (t_e - t_s) / 2;\n        } else {\n          // this is a bad arc: we need to move \'e\' down to find a good arc\n          t_e = t_m;\n        }\n      } while (!done && safety++ < 100);\n\n      if (safety >= 100) {\n        break;\n      }\n\n      // console.log("L835: [F] arc found", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n      prev_arc = prev_arc ? prev_arc : arc;\n      circles.push(prev_arc);\n      t_s = prev_e;\n    } while (t_e < 1);\n    return circles;\n  }\n}\n\n\n\n// EXTERNAL MODULE: ./node_modules/bignumber.js/bignumber.js\nvar bignumber = __webpack_require__(431);\nvar bignumber_default = /*#__PURE__*/__webpack_require__.n(bignumber);\n;// CONCATENATED MODULE: ./src/shared/utils.js\n\n\n\nfunction findMinMax(data, legend) {\n  return {\n    max: get(maxBy(data, function (o) {\n      return get(o, legend, -Infinity);\n    }), legend),\n    min: get(minBy(data, function (o) {\n      return get(o, legend, Infinity);\n    }), legend)\n  };\n}\nvar REFERENCE_TYPE = {\n  discrete: \'discrete\',\n  continuous: \'continuous\'\n};\nfunction decodeStringValues(expr) {\n  if (typeof expr === \'number\') return function () {\n    return expr;\n  };\n\n  if (typeof expr === \'string\') {\n    if (expr.endsWith(\'%\')) {\n      return function (num) {\n        return num * parseFloat(expr) / 100;\n      };\n    }\n\n    if (expr.endsWith(\'px\')) {\n      return function () {\n        return parseFloat(expr);\n      };\n    }\n  }\n\n  throw \'type false\';\n}\n\nfunction sqr(x) {\n  return x * x;\n}\n\nfunction dist2(v, w) {\n  return sqr(v[0] - w[0]) + sqr(v[1] - w[1]);\n} // p - point\n// v - start point of segment\n// w - end point of segment\n\n\nfunction distToSegmentSquared(p, v, w) {\n  var l2 = dist2(v, w);\n  if (l2 === 0) return dist2(p, v);\n  var t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n  t = Math.max(0, Math.min(1, t));\n  return dist2(p, [v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1])]);\n} // p - point\n// v - start point of segment\n// w - end point of segment\n\nfunction distToSegment(p, v, w) {\n  return Math.sqrt(distToSegmentSquared(p, v, w));\n}\nfunction bezierPoints(p1, p2) {\n  var span = (p2[0] - p1[0]) / 2;\n  return [p1[0] + span, p1[1], p2[0] - span, p2[1], p2[0], p2[1]];\n}\nfunction distToBezierSegmentSquared(p, v, w) {\n  var bp = bezierPoints(v, w);\n  var b = new Bezier(v[0], v[1], bp[0], bp[1], bp[2], bp[3], bp[4], bp[5]);\n  var point = b.project({\n    x: p[0],\n    y: p[1]\n  });\n  var d = dist2(p, [point.x, point.y]);\n  return d;\n}\nfunction pointInPolygon(point, vs) {\n  // ray-casting algorithm based on\n  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n  var x = point[0],\n      y = point[1];\n  var inside = false;\n\n  for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n    var xi = vs[i][0],\n        yi = vs[i][1];\n    var xj = vs[j][0],\n        yj = vs[j][1];\n    var intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n\n  return inside;\n}\nvar log10 = Math.log10 || function (x) {\n  var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.\n  // Check for whole powers of 10,\n  // which due to floating point rounding error should be corrected.\n\n  var powerOf10 = Math.round(exponent);\n  var isPowerOf10 = x === Math.pow(10, powerOf10);\n  return isPowerOf10 ? powerOf10 : exponent;\n};\n\nfunction convert(n) {\n  var order = Math.floor(Math.log(n) / Math.LN10 + 0.000000001); // because float math sucks like that\n\n  return order;\n}\n\nfunction divisors(integer, step) {\n  var max = Math.max(integer - step, step);\n\n  for (var i = 0; i < max; i++) {\n    var top = step + i;\n    var bottom = step - i;\n\n    if (top < integer) {\n      if (integer % top === 0) return top;\n    }\n\n    if (bottom > 0) {\n      if (integer % bottom === 0) return bottom;\n    }\n  }\n\n  return integer;\n}\n\nfunction rountToRange(yMinMax, step) {\n  var min = yMinMax.min,\n      max = yMinMax.max;\n\n  if (min === max) {\n    var _newStep = divisors(10, step);\n\n    return {\n      min: min,\n      max: max + 1,\n      step: _newStep,\n      stepSpan: +new (bignumber_default())(1).dividedBy(_newStep)\n    };\n  }\n\n  var span = max - min;\n  var magnitude = convert(span) - 1;\n  var p = new (bignumber_default())(10);\n  var exp = +p.exponentiatedBy(magnitude);\n  var newMin = +new (bignumber_default())(Math.floor(min / exp)).multipliedBy(exp);\n  var newMax = +new (bignumber_default())(Math.ceil(max / exp)).multipliedBy(exp);\n  var newSpan = +new (bignumber_default())(newMax).minus(newMin);\n  var minsteps = +new (bignumber_default())(newSpan).dividedBy(exp);\n  var newStep = divisors(minsteps, step);\n  var stepSpan = +new (bignumber_default())(newSpan).dividedBy(newStep); // // console.log(newMin, newMax, newStep, stepSpan)\n\n  return {\n    min: newMin,\n    max: newMax,\n    step: newStep,\n    stepSpan: stepSpan\n  };\n}\nfunction getYAxis(minmax) {\n  var i = minmax.min;\n  var values = [];\n\n  while (i <= minmax.max) {\n    values.push(i);\n    i = +new (bignumber_default())(i).plus(minmax.stepSpan);\n  }\n\n  return values;\n}\nfunction getXAxis(min, max, span) {\n  var values = [];\n  var p = Math.round((max - min) / span);\n  var start = min;\n\n  while (start < max) {\n    values.push({\n      value: start\n    });\n    start += p;\n  }\n\n  values.push({\n    value: max\n  });\n  return values;\n}\nfunction getXAxisDiscrete(ref, span) {\n  if (span > ref.length || span === ref.length) {\n    return ref.map(function (r, step) {\n      return {\n        step: step,\n        value: r\n      };\n    });\n  }\n\n  var values = [];\n  var length = ref.length;\n  var step = Math.round(length / (span - 1));\n  var i = 0;\n\n  while (ref[i]) {\n    values.push({\n      // step: i,\n      value: ref[i]\n    });\n    i += step;\n  }\n\n  if (i !== length - 1) {\n    values.push({\n      // step: length - 1,\n      value: ref[length - 1]\n    });\n  }\n\n  return values;\n}\n;// CONCATENATED MODULE: ./src/plugins/data/2d-data.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\nvar Data2D = /*#__PURE__*/function () {\n  function Data2D() {\n    _classCallCheck(this, Data2D);\n  }\n\n  _createClass(Data2D, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      var name = \'Data2D\';\n      globalCtx.globalData.hooks.initData.tap(name, function (dataOptions, source, sourceMeta) {\n        _this.init(globalCtx, dataOptions, source, sourceMeta);\n      });\n      globalCtx.globalData.hooks.resetData.tap(name, function (dataOptions, source) {\n        _this.resetData(dataOptions, source);\n      });\n    }\n  }, {\n    key: "init",\n    value: function init(globalCtx, dataOptions, source, sourceMeta) {\n      Object.assign(source, {\n        data: [],\n        legend: [],\n        reference: {},\n        stack: false\n      });\n      Object.assign(sourceMeta, {\n        xMinMax: {},\n        yMinMax: {},\n        xDataSpan: {},\n        yDataSpan: {}\n      });\n      this.resetData(dataOptions, source);\n      this.initEffect(globalCtx, source, sourceMeta);\n    }\n  }, {\n    key: "resetData",\n    value: function resetData(dataOptions, source) {\n      var s = dataOptions.series;\n      var reference = dataOptions.reference;\n      var dataLegend = [];\n      var ref = s[0].values.map(function (v) {\n        return v[0];\n      });\n      s.forEach(function (_ref) {\n        var name = _ref.name;\n        dataLegend.push({\n          name: name,\n          disabled: false\n        });\n      });\n      Object.assign(source, {\n        // data: cloneDeep(dataSource),\n        originSeries: dataOptions.series,\n        legend: (0,lodash.cloneDeep)(dataLegend),\n        reference: Object.assign({\n          ref: ref,\n          type: REFERENCE_TYPE.continuous\n        }, reference),\n        xAxis: dataOptions.xAxis,\n        yAxis: dataOptions.yAxis,\n        stack: dataOptions.stack\n      });\n    }\n  }, {\n    key: "initEffect",\n    value: function initEffect(globalCtx, source, sourceMeta) {\n      globalCtx.effect(function () {\n        console.log(\'effect init data\');\n        var originSeries = source.originSeries,\n            legend = source.legend,\n            xAxis = source.xAxis,\n            yAxis = source.yAxis,\n            stack = source.stack,\n            reference = source.reference;\n        var dataSource = [];\n        var valueReducer = [];\n        originSeries.forEach(function (_ref2, idx) {\n          var values = _ref2.values;\n\n          if (stack) {\n            var lastValue = [];\n            var isLgDisabled = legend[idx].disabled;\n            values.forEach(function (value, idx) {\n              if (!valueReducer[idx]) {\n                valueReducer[idx] = [value[0], new (bignumber_default())(0)];\n              }\n\n              lastValue[idx] = [valueReducer[idx][0], +valueReducer[idx][1]];\n              valueReducer[idx][1] = valueReducer[idx][1].plus(isLgDisabled ? 0 : +value[1]);\n            });\n            dataSource.push(valueReducer.map(function (v, i) {\n              return [v[0], +v[1], lastValue[i][1], +values[i][1]];\n            }));\n          } else {\n            dataSource.push(values);\n          }\n        });\n        var xSpan = xAxis.span || 5;\n        var ySpan = yAxis.span || 3;\n        var xmin = typeof xAxis.min === \'number\' ? xAxis.min : Infinity;\n        var ymin = typeof yAxis.min === \'number\' ? yAxis.min : Infinity;\n        var xmax = typeof xAxis.max === \'number\' ? xAxis.max : -Infinity;\n        var ymax = typeof yAxis.max === \'number\' ? yAxis.max : -Infinity;\n        legend.forEach(function (l, i) {\n          if (!l.disabled) {\n            var values = dataSource[i];\n            values.forEach(function (v) {\n              var y = v[1];\n              var x = v[0];\n              xmin = Math.min(x, xmin);\n              xmax = Math.max(x, xmax);\n              ymin = Math.min(y, ymin);\n              ymax = Math.max(y, ymax);\n            });\n          }\n        });\n        var ref = dataSource[0].map(function (v) {\n          return v[0];\n        });\n        console.log(ref);\n        var yrange = rountToRange({\n          min: ymin,\n          max: ymax\n        }, ySpan);\n        var yValues = getYAxis(yrange);\n        var xValues = reference.type === REFERENCE_TYPE.continuous ? getXAxis(xmin, xmax, xSpan) : getXAxisDiscrete(ref, xSpan);\n        console.log(xValues, xSpan);\n        Object.assign(source, {\n          data: (0,lodash.cloneDeep)(dataSource)\n        });\n        Object.assign(sourceMeta, {\n          yMeta: {\n            min: yValues[0],\n            max: yValues[yValues.length - 1],\n            values: yValues,\n            formatter: yAxis.format || function (d) {\n              return d;\n            }\n          },\n          xMeta: {\n            min: xmin,\n            max: xmax,\n            values: xValues,\n            formatter: xAxis.format || function (d) {\n              return d;\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return Data2D;\n}();\n\n/* harmony default export */ const _2d_data = (Data2D);\n;// CONCATENATED MODULE: ./src/plugins/data/1d-data.js\nfunction _1d_data_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _1d_data_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _1d_data_createClass(Constructor, protoProps, staticProps) { if (protoProps) _1d_data_defineProperties(Constructor.prototype, protoProps); if (staticProps) _1d_data_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Data1D = /*#__PURE__*/function () {\n  function Data1D() {\n    _1d_data_classCallCheck(this, Data1D);\n  }\n\n  _1d_data_createClass(Data1D, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      var name = \'Data1D\';\n      globalCtx.globalData.hooks.initData.tap(name, function (dataOptions, source, sourceMeta) {\n        _this.init(globalCtx, dataOptions, source, sourceMeta);\n      });\n      globalCtx.globalData.hooks.resetData.tap(name, function (dataOptions, source) {\n        _this.resetData(dataOptions, source);\n      });\n    }\n  }, {\n    key: "init",\n    value: function init(globalCtx, dataOptions, source) {\n      Object.assign(source, {\n        data: [],\n        legend: []\n      });\n      this.resetData(dataOptions, source);\n    }\n  }, {\n    key: "resetData",\n    value: function resetData(dataOptions, source) {\n      var s = dataOptions.series;\n      Object.assign(source, {\n        originSeries: dataOptions.series,\n        legend: s.map(function (seri) {\n          return {\n            name: seri.name,\n            disabled: false\n          };\n        }),\n        data: s.map(function (seri) {\n          return seri.value;\n        })\n      });\n    }\n  }]);\n\n  return Data1D;\n}();\n\n/* harmony default export */ const _1d_data = (Data1D);\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/common.js\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== \'undefined\' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat2d.js\n\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nfunction create() {\n  var out = new ARRAY_TYPE(6);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nfunction clone(a) {\n  var out = new ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nfunction fromValues(a, b, c, d, tx, ty) {\n  var out = new ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nfunction set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nfunction invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d\'s\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nfunction rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nfunction scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nfunction translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d\'s\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix\'s elements by\r\n * @returns {mat2d} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d\'s after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b\'s elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction mat2d_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nvar mul = (/* unused pure expression or super */ null && (multiply));\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nvar sub = (/* unused pure expression or super */ null && (subtract));\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec2.js\n\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction vec2_create() {\n  var out = new ARRAY_TYPE(2);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction vec2_clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction vec2_fromValues(x, y) {\n  var out = new ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2\'s after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2\'s\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2\'s\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction vec2_length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nfunction normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2\'s\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2\'s\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly \'1\'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly \'0\'\r\n * 4th vector component is implicitly \'1\'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nfunction angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction vec2_str(a) {\n  return "vec2(" + a[0] + ", " + a[1] + ")";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec2_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec2_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nvar len = (/* unused pure expression or super */ null && (vec2_length));\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nvar vec2_sub = (/* unused pure expression or super */ null && (vec2_subtract));\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nvar vec2_mul = (/* unused pure expression or super */ null && (vec2_multiply));\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nvar div = (/* unused pure expression or super */ null && (divide));\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nvar dist = (/* unused pure expression or super */ null && (distance));\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nvar sqrDist = (/* unused pure expression or super */ null && (squaredDistance));\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = (/* unused pure expression or super */ null && (squaredLength));\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = vec2_create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();\n;// CONCATENATED MODULE: ./src/context/utils.js\nfunction createCanvas(container) {\n  var canvasElem = document.createElement(\'canvas\');\n  var rect = container.getBoundingClientRect();\n  canvasElem.width = rect.width;\n  canvasElem.height = rect.height;\n  container.appendChild(canvasElem);\n  canvasElem.style.position = \'absolute\';\n  var context2d = canvasElem.getContext(\'2d\');\n  return {\n    canvas: canvasElem,\n    context2d: context2d\n  };\n}\nfunction clearCanvas(ctx, canvasElem) {\n  ctx.clearCommands && ctx.clearCommands();\n  var width = canvasElem.width;\n  var height = canvasElem.height;\n  ctx.setTransform();\n  ctx.clearRect(0, 0, width, height);\n}\nfunction setTransform(ctx, mtx) {\n  ctx.setTransform(mtx[0], mtx[1], mtx[2], mtx[3], mtx[4], mtx[5]);\n}\nfunction destroyCanvas(container, canvas) {\n  container.removeChild(canvas);\n} // export function createRenderEffect(target, mtx) {\n//     const {\n//         context2d,\n//         canvasElm,\n//     } = target;\n//     clearCanvas(context2d, canvasElm);\n//     setTransform(context2d, mtx);\n//     target.render();\n// }\n;// CONCATENATED MODULE: ./src/animation/easing.js\n/*\n * Easing Functions - inspired from http://gizma.com/easing/\n * only considering the t value for the range [0, 1] => [0, 1]\n */\nvar EasingFunctions = {\n  // no easing, no acceleration\n  linear: function linear(t) {\n    return t;\n  },\n  linearIv: function linearIv(s) {\n    return s;\n  },\n  // accelerating from zero velocity\n  easeInQuad: function easeInQuad(t) {\n    return t * t;\n  },\n  easeInQuadIv: function easeInQuadIv(s) {\n    return Math.sqrt(s);\n  },\n  // decelerating to zero velocity\n  easeOutQuad: function easeOutQuad(t) {\n    return t * (2 - t);\n  },\n  //   easeInQuadIv: t => \n  // acceleration until halfway, then deceleration\n  easeInOutQuad: function easeInOutQuad(t) {\n    return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  },\n  // accelerating from zero velocity \n  easeInCubic: function easeInCubic(t) {\n    return t * t * t;\n  },\n  // decelerating to zero velocity \n  easeOutCubic: function easeOutCubic(t) {\n    return --t * t * t + 1;\n  },\n  // acceleration until halfway, then deceleration \n  easeInOutCubic: function easeInOutCubic(t) {\n    return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n  },\n  // accelerating from zero velocity \n  easeInQuart: function easeInQuart(t) {\n    return t * t * t * t;\n  },\n  // decelerating to zero velocity \n  easeOutQuart: function easeOutQuart(t) {\n    return 1 - --t * t * t * t;\n  },\n  // acceleration until halfway, then deceleration\n  easeInOutQuart: function easeInOutQuart(t) {\n    return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n  },\n  // accelerating from zero velocity\n  easeInQuint: function easeInQuint(t) {\n    return t * t * t * t * t;\n  },\n  // decelerating to zero velocity\n  easeOutQuint: function easeOutQuint(t) {\n    return 1 + --t * t * t * t * t;\n  },\n  // acceleration until halfway, then deceleration \n  easeInOutQuint: function easeInOutQuint(t) {\n    return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n  }\n};\n;// CONCATENATED MODULE: ./src/animation/anime.js\nfunction anime_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction anime_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction anime_createClass(Constructor, protoProps, staticProps) { if (protoProps) anime_defineProperties(Constructor.prototype, protoProps); if (staticProps) anime_defineProperties(Constructor, staticProps); return Constructor; }\n\n\nfunction makeRenderCallback(renderFunc) {\n  var d = null;\n  return function () {\n    if (!d) {\n      d = renderFunc;\n      requestAnimationFrame(function () {\n        d();\n        d = null;\n      });\n    }\n  };\n}\n\nfunction animate(_ref, callback) {\n  var easingFunc = _ref.easingFunc,\n      duration = _ref.duration,\n      fps = _ref.fps,\n      renderCallback = _ref.renderCallback;\n  var start;\n  var elapsed;\n  var lastFrame = 0;\n  var interval = 1000 / fps;\n  var animationId = null;\n\n  function step(timestamp) {\n    if (start === undefined) {\n      start = timestamp;\n    }\n\n    elapsed = timestamp - start;\n\n    if (timestamp - lastFrame < interval) {\n      animationId = requestAnimationFrame(step);\n      return;\n    }\n\n    var ratio = easingFunc(elapsed / duration);\n\n    if (ratio >= 1) {\n      callback(\'end\');\n    } else {\n      callback(ratio);\n      animationId = requestAnimationFrame(step);\n    }\n\n    renderCallback();\n    lastFrame = timestamp;\n  }\n\n  animationId = requestAnimationFrame(step);\n  return {\n    stop: function stop() {\n      cancelAnimationFrame(animationId);\n    }\n  };\n}\n\nfunction defaultOnNumberElement(newState, oldState, idx, ratio, currentArray) {\n  if (ratio === \'end\') {\n    currentArray[idx] = newState;\n  } else {\n    currentArray[idx] = oldState + (oldState - newState) * ratio;\n  }\n}\n\nvar AnimeArray = /*#__PURE__*/function () {\n  function AnimeArray(_ref2) {\n    var _ref2$startArray = _ref2.startArray,\n        startArray = _ref2$startArray === void 0 ? [] : _ref2$startArray,\n        _ref2$defaultNumber = _ref2.defaultNumber,\n        defaultNumber = _ref2$defaultNumber === void 0 ? 0 : _ref2$defaultNumber,\n        _ref2$easingFunc = _ref2.easingFunc,\n        easingFunc = _ref2$easingFunc === void 0 ? \'easeInQuad\' : _ref2$easingFunc,\n        _ref2$fps = _ref2.fps,\n        fps = _ref2$fps === void 0 ? 60 : _ref2$fps,\n        duration = _ref2.duration,\n        key = _ref2.key,\n        _ref2$callbackOnEleme = _ref2.callbackOnElement,\n        callbackOnElement = _ref2$callbackOnEleme === void 0 ? defaultOnNumberElement : _ref2$callbackOnEleme,\n        _ref2$callBackOnMakeU = _ref2.callBackOnMakeUp,\n        callBackOnMakeUp = _ref2$callBackOnMakeU === void 0 ? function (v) {\n      return v;\n    } : _ref2$callBackOnMakeU,\n        renderCallback = _ref2.renderCallback;\n\n    anime_classCallCheck(this, AnimeArray);\n\n    this.__array = startArray;\n    this.defaultNumber = defaultNumber;\n    this.animeOptions = {\n      easingFunc: EasingFunctions[easingFunc],\n      fps: fps,\n      duration: duration,\n      renderCallback: renderCallback\n    };\n    this.__anime = null;\n    this.key = key;\n    this.callbackOnElement = callbackOnElement;\n    this.callBackOnMakeUp = callBackOnMakeUp;\n  }\n\n  anime_createClass(AnimeArray, [{\n    key: "value",\n    get: function get() {\n      return this.__array;\n    }\n  }, {\n    key: "animeTo",\n    value: function animeTo(newArray) {\n      var _this = this;\n\n      if (this.__anime) {\n        this.__anime.stop();\n      } // let uselessArray = null;\n\n\n      var sliceLength = null;\n\n      if (this.key) {\n        var k = this.key;\n        var p = [];\n        newArray.forEach(function (elem) {\n          var finded = _this.__array.find(function (__elem) {\n            return __elem[k] === elem[k];\n          });\n\n          if (finded) {\n            p.push(finded);\n          } else {\n            p.push(elem);\n          }\n        });\n        this.__array = p;\n      } else {\n        var callBackOnMakeUp = this.callBackOnMakeUp;\n        var span = newArray.length - this.__array.length;\n\n        if (span > 0) {\n          var ratio = this.__array.length > 0 ? newArray.length / this.__array.length : 0;\n          var makeup = newArray.slice(this.__array.length);\n          this.__array = this.__array.concat(callBackOnMakeUp(makeup, ratio, newArray[0]));\n        }\n\n        if (span < 0) {\n          var _ratio = newArray.length > 0 ? this.__array.length / newArray.length : 0;\n\n          sliceLength = newArray.length;\n          newArray = newArray.concat(callBackOnMakeUp(this.__array.slice(newArray.length), _ratio, this.__array[0]));\n        }\n      }\n\n      var beginState = this.__array.slice();\n\n      var callbackOnElement = this.callbackOnElement;\n      this.__anime = animate(this.animeOptions, function (ratio) {\n        var i = 0;\n        var l = _this.__array.length;\n\n        for (; i < l; i++) {\n          callbackOnElement(newArray[i], beginState[i], i, ratio, _this.__array);\n        }\n\n        if (ratio === \'end\') {\n          if (sliceLength) {\n            _this.__array = _this.__array.slice(0, sliceLength);\n          }\n        }\n      });\n    }\n  }]);\n\n  return AnimeArray;\n}();\nvar AnimeNumber = /*#__PURE__*/function () {\n  function AnimeNumber(_ref3) {\n    var _ref3$startNumber = _ref3.startNumber,\n        startNumber = _ref3$startNumber === void 0 ? 0 : _ref3$startNumber,\n        _ref3$easingFunc = _ref3.easingFunc,\n        easingFunc = _ref3$easingFunc === void 0 ? \'easeInQuad\' : _ref3$easingFunc,\n        _ref3$fps = _ref3.fps,\n        fps = _ref3$fps === void 0 ? 60 : _ref3$fps,\n        duration = _ref3.duration,\n        renderCallback = _ref3.renderCallback;\n\n    anime_classCallCheck(this, AnimeNumber);\n\n    // [number, number ....]\n    this.__number = startNumber;\n    this.animeOptions = {\n      easingFunc: EasingFunctions[easingFunc],\n      fps: fps,\n      duration: duration,\n      renderCallback: renderCallback\n    };\n    this.__anime = null;\n  }\n\n  anime_createClass(AnimeNumber, [{\n    key: "value",\n    get: function get() {\n      return this.__number;\n    }\n  }, {\n    key: "animeTo",\n    value: function animeTo(newNumber) {\n      var _this2 = this;\n\n      if (this.__anime) {\n        this.__anime.stop();\n      }\n\n      if (newNumber === this.__number) return;\n      var span = newNumber - this.__number;\n      var lastNumber = this.__number;\n      this.__anime = animate(this.animeOptions, function (ratio) {\n        if (ratio === \'end\') {\n          _this2.__number = newNumber;\n        } else {\n          _this2.__number = lastNumber + span * ratio;\n        }\n      });\n    }\n  }]);\n\n  return AnimeNumber;\n}();\n;// CONCATENATED MODULE: ./src/plugins/axis/2d-coord.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _2d_coord_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _2d_coord_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _2d_coord_createClass(Constructor, protoProps, staticProps) { if (protoProps) _2d_coord_defineProperties(Constructor.prototype, protoProps); if (staticProps) _2d_coord_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar cacheCanvas = document.createElement(\'canvas\');\nvar cachhCanvasContext = cacheCanvas.getContext(\'2d\');\n\nvar Coord2D = /*#__PURE__*/function () {\n  function Coord2D() {\n    _2d_coord_classCallCheck(this, Coord2D);\n\n    this.name = \'Coord2D\';\n    this.animationContext = {};\n  }\n\n  _2d_coord_createClass(Coord2D, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      globalCtx.Coordinate.hooks.initCoord.tap(this.name, function (context2d) {\n        _this.init(context2d, globalCtx);\n      });\n      globalCtx.Coordinate.hooks.renderCoord.tap(this.name, function (context2d) {\n        _this.render(context2d, globalCtx);\n      });\n      globalCtx.Coordinate.hooks.afterRenderChart.tap(this.name, function (context2d) {\n        _this.afterRender(context2d, globalCtx);\n      });\n      globalCtx.hooks.afterDataAndLayoutReady.tap(this.name, function () {\n        _this.reFlow(globalCtx);\n      });\n    }\n  }, {\n    key: "reFlow",\n    value: function reFlow(globalCtx) {\n      globalCtx.effect(function () {\n        console.log(\'effect coord2d layout\');\n        var bounding = globalCtx.Layout.bounding;\n        var legend = globalCtx.globalData.source.legend;\n        var boundingBox = globalCtx.boundingBox;\n        var _globalCtx$globalData = globalCtx.globalData.sourceMeta,\n            xMeta = _globalCtx$globalData.xMeta,\n            yMeta = _globalCtx$globalData.yMeta;\n        var fontSize = globalCtx.theme.fontSize;\n        var yTextWidth = 0;\n        var textmin = yMeta.formatter(yMeta.min);\n        var textmax = yMeta.formatter(yMeta.max);\n        cachhCanvasContext.save();\n        cachhCanvasContext.font = "".concat(fontSize / 1.4, "px arial");\n        cachhCanvasContext.lineWidth = 1.4;\n        var ytext = textmin.length > textmax.length ? textmin : textmax;\n        yTextWidth = cachhCanvasContext.measureText("".concat(ytext, "000")).width; // console.log(ytext, yTextWidth);\n\n        cachhCanvasContext.restore();\n        var spanHorizontal = boundingBox.width - bounding.left - bounding.right - yTextWidth;\n        var spanVertical = boundingBox.height - bounding.top - bounding.bottom;\n        var data = globalCtx.globalData.source.data;\n        var series_size = 0;\n        data.forEach(function (d) {\n          series_size = Math.max(d.length, series_size);\n        });\n        var spanHorizontalwithpadding = spanHorizontal - bounding.xFloat * 2;\n        var seriesStep = spanHorizontalwithpadding / series_size;\n        var mtx = fromValues(1, 0, 0, 1, bounding.left + yTextWidth, bounding.top);\n        var imtx = create();\n        invert(imtx, mtx);\n        Object.assign(globalCtx.Layout, {\n          translateMtx: mtx,\n          translateMtxInvert: imtx,\n          spanHorizontal: spanHorizontal,\n          spanVertical: spanVertical,\n          seriesStep: seriesStep,\n          xStep: (spanHorizontal - bounding.xFloat * 2) / (xMeta.values.length - 1),\n          xScaler: (spanHorizontal - bounding.xFloat * 2) / (xMeta.max - xMeta.min),\n          yStep: spanVertical / (yMeta.values.length - 1),\n          yScaler: spanVertical / (yMeta.max - yMeta.min),\n          left: bounding.left + yTextWidth,\n          right: boundingBox.width - bounding.left - yTextWidth,\n          top: bounding.top,\n          bottom: boundingBox.height - bounding.bottom,\n          xFloat: bounding.xFloat,\n          rawSpanHorizontal: boundingBox.width - bounding.left - bounding.right\n        });\n        console.log(globalCtx.Layout);\n      });\n    }\n  }, {\n    key: "init",\n    value: function init(context2d, globalCtx) {\n      var _this2 = this;\n\n      var render = context2d.render.bind(context2d);\n      var renderCallback = makeRenderCallback(render);\n      globalCtx.effect(function () {\n        console.log(\'effect init coord\');\n        var legend = globalCtx.globalData.source.legend;\n        var _globalCtx$globalData2 = globalCtx.globalData.sourceMeta,\n            xMeta = _globalCtx$globalData2.xMeta,\n            yMeta = _globalCtx$globalData2.yMeta; // 没有可显示的legend 不需要重绘坐标系\n\n        var disabledNum = legend.filter(function (l) {\n          return l.disabled;\n        }).length;\n        var legendNum = legend.length;\n\n        if (disabledNum === legendNum) {\n          return;\n        }\n\n        var _globalCtx$Layout = globalCtx.Layout,\n            translateMtx = _globalCtx$Layout.translateMtx,\n            translateMtxInvert = _globalCtx$Layout.translateMtxInvert,\n            spanHorizontal = _globalCtx$Layout.spanHorizontal,\n            spanVertical = _globalCtx$Layout.spanVertical,\n            xFloat = _globalCtx$Layout.xFloat,\n            xScaler = _globalCtx$Layout.xScaler,\n            yScaler = _globalCtx$Layout.yScaler;\n        /**\n                                          | 1  0  0            |\n            mtx = DPRMAT * translateMtx * | 0 -1  spanVertical |\n                                          | 0  0  1            |\n         */\n\n        var mtx = fromValues(1, 0, 0, -1, 0, spanVertical);\n        var imtx = create();\n        invert(imtx, mtx);\n        multiply(imtx, imtx, translateMtxInvert);\n        multiply(mtx, translateMtx, mtx); // widthDPI\n\n        var a = create();\n        var ia = create();\n        multiply(a, globalCtx.DPRMat, mtx);\n        invert(ia, a); // origin point ( left top point )\n\n        var originVec = vec2_fromValues(0, 0);\n        transformMat2d(originVec, originVec, imtx); // origin point ( right bottom point )\n\n        var borderVec = vec2_fromValues(spanHorizontal, spanVertical);\n        transformMat2d(borderVec, borderVec, imtx);\n\n        var convertDataToCoordX = function convertDataToCoordX(x) {\n          return (x - xMeta.min) * xScaler + xFloat;\n        };\n\n        var convertDataToCoordY = function convertDataToCoordY(y) {\n          return (y - yMeta.min) * yScaler;\n        };\n\n        Object.assign(globalCtx.Coordinate.transformMeta, {\n          originVec: originVec,\n          borderVec: borderVec,\n          xAxisY: Math.max(0, convertDataToCoordY(0)),\n          transformMtxRaw: clone(mtx),\n          transformMtxRawInvert: clone(imtx),\n          transformMtx: clone(a),\n          transformMtxInvert: clone(ia),\n          convertDataToCoordX: convertDataToCoordX,\n          convertDataToCoordY: convertDataToCoordY\n        });\n\n        if (!_this2.animationContext.yAxis) {\n          _this2.animationContext.yAxis = new AnimeArray({\n            startArray: _this2.getNewYAxis(globalCtx),\n            duration: 550,\n            key: \'name\',\n            renderCallback: renderCallback,\n            callbackOnElement: function callbackOnElement(newState, oldState, idx, ratio, currentArray) {\n              if (ratio === \'end\') {\n                currentArray[idx] = _objectSpread({}, newState);\n              } else {\n                currentArray[idx] = {\n                  name: newState.name,\n                  value: oldState.value + (newState.value - oldState.value) * ratio,\n                  fontvecX: oldState.fontvecX + (newState.fontvecX - oldState.fontvecX) * ratio,\n                  fontvecY: oldState.fontvecY + (newState.fontvecY - oldState.fontvecY) * ratio\n                };\n              }\n            }\n          });\n          _this2.animationContext.xAxisY = new AnimeNumber({\n            startNumber: Math.max(0, convertDataToCoordY(0)),\n            duration: 550,\n            renderCallback: renderCallback\n          });\n        }\n      });\n    }\n  }, {\n    key: "getNewYAxis",\n    value: function getNewYAxis(globalCtx) {\n      var xAxisbottom = globalCtx.theme.fontSize / 2;\n      var transformMtxRaw = globalCtx.Coordinate.transformMeta.transformMtxRaw;\n      var yStep = globalCtx.Layout.yStep;\n      return globalCtx.globalData.sourceMeta.yMeta.values.slice().map(function (target, idx) {\n        var value = yStep * idx;\n        var vec = vec2_fromValues(-xAxisbottom, value);\n        transformMat2d(vec, vec, transformMtxRaw);\n        return {\n          name: target,\n          value: value,\n          fontvecX: vec[0],\n          fontvecY: vec[1]\n        };\n      });\n    }\n  }, {\n    key: "drawGrid",\n    value: function drawGrid(ctx, globalCtx) {\n      var _this3 = this;\n\n      var spanHorizontal = globalCtx.Layout.spanHorizontal;\n      ctx.functionCallWithLooping(function () {\n        return _this3.animationContext.yAxis.value;\n      }, function (ctx, loopTarget, v) {\n        ctx.beginPath();\n        ctx.moveTo(0, v.value);\n        ctx.lineTo(spanHorizontal, v.value);\n        ctx.stroke();\n      });\n    }\n  }, {\n    key: "drawAxis",\n    value: function drawAxis(ctx, globalCtx) {\n      var _this4 = this;\n\n      var _globalCtx$globalData3 = globalCtx.globalData.sourceMeta,\n          xMeta = _globalCtx$globalData3.xMeta,\n          yMeta = _globalCtx$globalData3.yMeta;\n      var DPRMat = globalCtx.DPRMat;\n      var _globalCtx$Layout2 = globalCtx.Layout,\n          spanHorizontal = _globalCtx$Layout2.spanHorizontal,\n          spanVertical = _globalCtx$Layout2.spanVertical,\n          xStep = _globalCtx$Layout2.xStep;\n      var _globalCtx$Coordinate = globalCtx.Coordinate.transformMeta,\n          transformMtxRaw = _globalCtx$Coordinate.transformMtxRaw,\n          convertDataToCoordX = _globalCtx$Coordinate.convertDataToCoordX;\n      var fontSize = globalCtx.theme.fontSize;\n      ctx.font = "".concat(fontSize / 1.4, "px arial");\n      ctx.strokeStyle = \'#999\';\n      ctx.lineWidth = 1.4;\n      ctx.beginPath();\n      ctx.functionCallWithDynamicParameter(\'moveTo\', spanHorizontal, function () {\n        return _this4.animationContext.xAxisY.value;\n      });\n      ctx.functionCallWithDynamicParameter(\'lineTo\', 0, function () {\n        return _this4.animationContext.xAxisY.value;\n      });\n      ctx.stroke();\n      ctx.lineWidth = 0.7;\n      ctx.lineCap = \'round\';\n      ctx.lineJoin = \'round\';\n      ctx.textAlign = \'right\';\n      ctx.textBaseline = \'middle\';\n      ctx.save();\n      setTransform(ctx, DPRMat);\n      ctx.functionCallWithLooping(function () {\n        return _this4.animationContext.yAxis.value;\n      }, function (ctx, loopTarget, v) {\n        var text = yMeta.formatter(v.name);\n        ctx.fillText(text, v.fontvecX, v.fontvecY);\n      });\n      ctx.restore(); // x轴数字\n\n      ctx.textAlign = \'center\';\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = \'#e8e8e8\';\n      var xValues = xMeta.values;\n\n      for (var i = 0; i < xValues.length; i++) {\n        var xValue = xValues[i];\n        var value = xValue.value;\n        var x = convertDataToCoordX(value);\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, spanVertical);\n        ctx.stroke();\n        ctx.save();\n        var vec = vec2_fromValues(x, -fontSize);\n        transformMat2d(vec, vec, transformMtxRaw);\n        setTransform(ctx, DPRMat);\n        var text = xMeta.formatter(value);\n        ctx.wrapText(text, vec[0], vec[1], xStep / 2, fontSize);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: "render",\n    value: function render(ctx, globalCtx) {\n      var axis = globalCtx.theme.axis;\n      ctx.lineWidth = axis.lineWidth;\n      ctx.strokeStyle = axis.strokeStyle;\n      ctx.save();\n      this.drawGrid(ctx, globalCtx);\n      this.drawAxis(ctx, globalCtx);\n      ctx.restore();\n    }\n  }, {\n    key: "afterRender",\n    value: function afterRender(context2d, globalCtx) {\n      var _this5 = this;\n\n      globalCtx.effect(function () {\n        console.log(\'after effect coord\');\n\n        _this5.animationContext.yAxis.animeTo(_this5.getNewYAxis(globalCtx));\n\n        _this5.animationContext.xAxisY.animeTo(globalCtx.Coordinate.transformMeta.xAxisY);\n      });\n    }\n  }]);\n\n  return Coord2D;\n}();\n\n/* harmony default export */ const _2d_coord = (Coord2D);\n;// CONCATENATED MODULE: ./src/plugins/axis/2d-geo.js\nfunction _2d_geo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _2d_geo_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _2d_geo_createClass(Constructor, protoProps, staticProps) { if (protoProps) _2d_geo_defineProperties(Constructor.prototype, protoProps); if (staticProps) _2d_geo_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Geo2D = /*#__PURE__*/function () {\n  function Geo2D() {\n    _2d_geo_classCallCheck(this, Geo2D);\n\n    this.name = \'Geo2D\';\n    this.animationContext = {};\n  }\n\n  _2d_geo_createClass(Geo2D, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      globalCtx.hooks.afterDataAndLayoutReady.tap(this.name, function () {\n        _this.reFlow(globalCtx);\n      });\n      globalCtx.Coordinate.hooks.initCoord.tap(this.name, function (context2d) {\n        _this.init(context2d, globalCtx);\n      });\n    }\n  }, {\n    key: "reFlow",\n    value: function reFlow(globalCtx) {\n      globalCtx.effect(function () {\n        console.log(\'effect Geo2D layout\');\n        var bounding = globalCtx.Layout.bounding;\n        var boundingBox = globalCtx.boundingBox;\n        var mtx = fromValues(1, 0, 0, 1, bounding.left, bounding.top);\n        var imtx = create();\n        invert(imtx, mtx);\n        Object.assign(globalCtx.Layout, {\n          translateMtx: mtx,\n          translateMtxInvert: imtx,\n          spanHorizontal: boundingBox.width - bounding.left - bounding.right,\n          spanVertical: boundingBox.height - bounding.top - bounding.bottom\n        });\n      });\n    }\n  }, {\n    key: "init",\n    value: function init(context2d, globalCtx) {\n      globalCtx.effect(function () {\n        console.log(\'effect init coord\');\n        var _globalCtx$Layout = globalCtx.Layout,\n            translateMtx = _globalCtx$Layout.translateMtx,\n            translateMtxInvert = _globalCtx$Layout.translateMtxInvert,\n            spanHorizontal = _globalCtx$Layout.spanHorizontal,\n            spanVertical = _globalCtx$Layout.spanVertical;\n        /**\n                                          | 1  0  spanHorizontal/2 |\n            mtx = DPRMAT * translateMtx * | 0  1  spanVertical/2   |\n                                          | 0  0  1                |\n         */\n\n        var mtx = fromValues(1, 0, 0, 1, spanHorizontal / 2, spanVertical / 2);\n        var imtx = create();\n        invert(imtx, mtx);\n        multiply(mtx, translateMtx, mtx);\n        multiply(imtx, imtx, translateMtxInvert);\n        var a = create();\n        var ia = create();\n        multiply(a, globalCtx.DPRMat, mtx);\n        invert(ia, a);\n        var originVec = vec2_fromValues(spanHorizontal / 2, spanVertical / 2);\n        transformMat2d(originVec, originVec, imtx);\n        Object.assign(globalCtx.Coordinate.transformMeta, {\n          originVec: originVec,\n          transformMtxRaw: clone(mtx),\n          transformMtxRawInvert: clone(imtx),\n          transformMtx: clone(a),\n          transformMtxInvert: clone(ia)\n        });\n      });\n    }\n  }]);\n\n  return Geo2D;\n}();\n\n/* harmony default export */ const _2d_geo = (Geo2D);\n// EXTERNAL MODULE: ./node_modules/color-string/index.js\nvar color_string = __webpack_require__(818);\nvar color_string_default = /*#__PURE__*/__webpack_require__.n(color_string);\n;// CONCATENATED MODULE: ./node_modules/@vue/shared/dist/shared.esm-bundler.js\n/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n * IMPORTANT: all calls of this function must be prefixed with\r\n * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\r\n * So that rollup can tree-shake them if necessary.\r\n */\r\nfunction makeMap(str, expectsLowerCase) {\r\n    const map = Object.create(null);\r\n    const list = str.split(\',\');\r\n    for (let i = 0; i < list.length; i++) {\r\n        map[list[i]] = true;\r\n    }\r\n    return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];\r\n}\n\n/**\r\n * dev only flag -> name mapping\r\n */\r\nconst PatchFlagNames = {\r\n    [1 /* TEXT */]: `TEXT`,\r\n    [2 /* CLASS */]: `CLASS`,\r\n    [4 /* STYLE */]: `STYLE`,\r\n    [8 /* PROPS */]: `PROPS`,\r\n    [16 /* FULL_PROPS */]: `FULL_PROPS`,\r\n    [32 /* HYDRATE_EVENTS */]: `HYDRATE_EVENTS`,\r\n    [64 /* STABLE_FRAGMENT */]: `STABLE_FRAGMENT`,\r\n    [128 /* KEYED_FRAGMENT */]: `KEYED_FRAGMENT`,\r\n    [256 /* UNKEYED_FRAGMENT */]: `UNKEYED_FRAGMENT`,\r\n    [512 /* NEED_PATCH */]: `NEED_PATCH`,\r\n    [1024 /* DYNAMIC_SLOTS */]: `DYNAMIC_SLOTS`,\r\n    [2048 /* DEV_ROOT_FRAGMENT */]: `DEV_ROOT_FRAGMENT`,\r\n    [-1 /* HOISTED */]: `HOISTED`,\r\n    [-2 /* BAIL */]: `BAIL`\r\n};\n\n/**\r\n * Dev only\r\n */\r\nconst slotFlagsText = {\r\n    [1 /* STABLE */]: \'STABLE\',\r\n    [2 /* DYNAMIC */]: \'DYNAMIC\',\r\n    [3 /* FORWARDED */]: \'FORWARDED\'\r\n};\n\nconst GLOBALS_WHITE_LISTED = (/* unused pure expression or super */ null && (\'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,\' +\r\n    \'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,\' +\r\n    \'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt\'));\r\nconst isGloballyWhitelisted = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(GLOBALS_WHITE_LISTED)));\n\nconst range = 2;\r\nfunction generateCodeFrame(source, start = 0, end = source.length) {\r\n    const lines = source.split(/\\r?\\n/);\r\n    let count = 0;\r\n    const res = [];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        count += lines[i].length + 1;\r\n        if (count >= start) {\r\n            for (let j = i - range; j <= i + range || end > count; j++) {\r\n                if (j < 0 || j >= lines.length)\r\n                    continue;\r\n                const line = j + 1;\r\n                res.push(`${line}${\' \'.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);\r\n                const lineLength = lines[j].length;\r\n                if (j === i) {\r\n                    // push underline\r\n                    const pad = start - (count - lineLength) + 1;\r\n                    const length = Math.max(1, end > count ? lineLength - pad : end - start);\r\n                    res.push(`   |  ` + \' \'.repeat(pad) + \'^\'.repeat(length));\r\n                }\r\n                else if (j > i) {\r\n                    if (end > count) {\r\n                        const length = Math.max(Math.min(end - count, lineLength), 1);\r\n                        res.push(`   |  ` + \'^\'.repeat(length));\r\n                    }\r\n                    count += lineLength + 1;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return res.join(\'\\n\');\r\n}\n\n/**\r\n * On the client we only need to offer special cases for boolean attributes that\r\n * have different names from their corresponding dom properties:\r\n * - itemscope -> N/A\r\n * - allowfullscreen -> allowFullscreen\r\n * - formnovalidate -> formNoValidate\r\n * - ismap -> isMap\r\n * - nomodule -> noModule\r\n * - novalidate -> noValidate\r\n * - readonly -> readOnly\r\n */\r\nconst specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\r\nconst isSpecialBooleanAttr = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(specialBooleanAttrs)));\r\n/**\r\n * The full list is needed during SSR to produce the correct initial markup.\r\n */\r\nconst isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs +\r\n    `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` +\r\n    `loop,open,required,reversed,scoped,seamless,` +\r\n    `checked,muted,multiple,selected`);\r\nconst unsafeAttrCharRE = /[>/="\'\\u0009\\u000a\\u000c\\u0020]/;\r\nconst attrValidationCache = {};\r\nfunction isSSRSafeAttrName(name) {\r\n    if (attrValidationCache.hasOwnProperty(name)) {\r\n        return attrValidationCache[name];\r\n    }\r\n    const isUnsafe = unsafeAttrCharRE.test(name);\r\n    if (isUnsafe) {\r\n        console.error(`unsafe attribute name: ${name}`);\r\n    }\r\n    return (attrValidationCache[name] = !isUnsafe);\r\n}\r\nconst propsToAttrMap = {\r\n    acceptCharset: \'accept-charset\',\r\n    className: \'class\',\r\n    htmlFor: \'for\',\r\n    httpEquiv: \'http-equiv\'\r\n};\r\n/**\r\n * CSS properties that accept plain numbers\r\n */\r\nconst isNoUnitNumericStyleProp = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` +\r\n    `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` +\r\n    `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` +\r\n    `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` +\r\n    `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` +\r\n    `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` +\r\n    // SVG\r\n    `fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` +\r\n    `stroke-miterlimit,stroke-opacity,stroke-width`)));\r\n/**\r\n * Known attributes, this is used for stringification of runtime static nodes\r\n * so that we don\'t stringify bindings that cannot be set from HTML.\r\n * Don\'t also forget to allow `data-*` and `aria-*`!\r\n * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\r\n */\r\nconst isKnownAttr = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` +\r\n    `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` +\r\n    `border,buffered,capture,challenge,charset,checked,cite,class,code,` +\r\n    `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` +\r\n    `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` +\r\n    `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` +\r\n    `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` +\r\n    `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` +\r\n    `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` +\r\n    `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` +\r\n    `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` +\r\n    `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` +\r\n    `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` +\r\n    `start,step,style,summary,tabindex,target,title,translate,type,usemap,` +\r\n    `value,width,wrap`)));\n\nfunction normalizeStyle(value) {\r\n    if (shared_esm_bundler_isArray(value)) {\r\n        const res = {};\r\n        for (let i = 0; i < value.length; i++) {\r\n            const item = value[i];\r\n            const normalized = normalizeStyle(isString(item) ? parseStringStyle(item) : item);\r\n            if (normalized) {\r\n                for (const key in normalized) {\r\n                    res[key] = normalized[key];\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    else if (shared_esm_bundler_isObject(value)) {\r\n        return value;\r\n    }\r\n}\r\nconst listDelimiterRE = /;(?![^(]*\\))/g;\r\nconst propertyDelimiterRE = /:(.+)/;\r\nfunction parseStringStyle(cssText) {\r\n    const ret = {};\r\n    cssText.split(listDelimiterRE).forEach(item => {\r\n        if (item) {\r\n            const tmp = item.split(propertyDelimiterRE);\r\n            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());\r\n        }\r\n    });\r\n    return ret;\r\n}\r\nfunction stringifyStyle(styles) {\r\n    let ret = \'\';\r\n    if (!styles) {\r\n        return ret;\r\n    }\r\n    for (const key in styles) {\r\n        const value = styles[key];\r\n        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);\r\n        if (isString(value) ||\r\n            (typeof value === \'number\' && isNoUnitNumericStyleProp(normalizedKey))) {\r\n            // only render valid values\r\n            ret += `${normalizedKey}:${value};`;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nfunction normalizeClass(value) {\r\n    let res = \'\';\r\n    if (isString(value)) {\r\n        res = value;\r\n    }\r\n    else if (shared_esm_bundler_isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            const normalized = normalizeClass(value[i]);\r\n            if (normalized) {\r\n                res += normalized + \' \';\r\n            }\r\n        }\r\n    }\r\n    else if (shared_esm_bundler_isObject(value)) {\r\n        for (const name in value) {\r\n            if (value[name]) {\r\n                res += name + \' \';\r\n            }\r\n        }\r\n    }\r\n    return res.trim();\r\n}\n\n// These tag configs are shared between compiler-dom and runtime-dom, so they\r\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element\r\nconst HTML_TAGS = (/* unused pure expression or super */ null && (\'html,body,base,head,link,meta,style,title,address,article,aside,footer,\' +\r\n    \'header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,\' +\r\n    \'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,\' +\r\n    \'data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,\' +\r\n    \'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,\' +\r\n    \'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,\' +\r\n    \'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,\' +\r\n    \'option,output,progress,select,textarea,details,dialog,menu,\' +\r\n    \'summary,template,blockquote,iframe,tfoot\'));\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element\r\nconst SVG_TAGS = (/* unused pure expression or super */ null && (\'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,\' +\r\n    \'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,\' +\r\n    \'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,\' +\r\n    \'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,\' +\r\n    \'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,\' +\r\n    \'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,\' +\r\n    \'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,\' +\r\n    \'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,\' +\r\n    \'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,\' +\r\n    \'text,textPath,title,tspan,unknown,use,view\'));\r\nconst VOID_TAGS = \'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr\';\r\nconst isHTMLTag = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(HTML_TAGS)));\r\nconst isSVGTag = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(SVG_TAGS)));\r\nconst isVoidTag = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(VOID_TAGS)));\n\nconst escapeRE = /["\'&<>]/;\r\nfunction escapeHtml(string) {\r\n    const str = \'\' + string;\r\n    const match = escapeRE.exec(str);\r\n    if (!match) {\r\n        return str;\r\n    }\r\n    let html = \'\';\r\n    let escaped;\r\n    let index;\r\n    let lastIndex = 0;\r\n    for (index = match.index; index < str.length; index++) {\r\n        switch (str.charCodeAt(index)) {\r\n            case 34: // "\r\n                escaped = \'&quot;\';\r\n                break;\r\n            case 38: // &\r\n                escaped = \'&amp;\';\r\n                break;\r\n            case 39: // \'\r\n                escaped = \'&#39;\';\r\n                break;\r\n            case 60: // <\r\n                escaped = \'&lt;\';\r\n                break;\r\n            case 62: // >\r\n                escaped = \'&gt;\';\r\n                break;\r\n            default:\r\n                continue;\r\n        }\r\n        if (lastIndex !== index) {\r\n            html += str.substring(lastIndex, index);\r\n        }\r\n        lastIndex = index + 1;\r\n        html += escaped;\r\n    }\r\n    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\r\n}\r\n// https://www.w3.org/TR/html52/syntax.html#comments\r\nconst commentStripRE = /^-?>|\x3c!--|--\x3e|--!>|<!-$/g;\r\nfunction escapeHtmlComment(src) {\r\n    return src.replace(commentStripRE, \'\');\r\n}\n\nfunction looseCompareArrays(a, b) {\r\n    if (a.length !== b.length)\r\n        return false;\r\n    let equal = true;\r\n    for (let i = 0; equal && i < a.length; i++) {\r\n        equal = looseEqual(a[i], b[i]);\r\n    }\r\n    return equal;\r\n}\r\nfunction looseEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    let aValidType = isDate(a);\r\n    let bValidType = isDate(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? a.getTime() === b.getTime() : false;\r\n    }\r\n    aValidType = shared_esm_bundler_isArray(a);\r\n    bValidType = shared_esm_bundler_isArray(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? looseCompareArrays(a, b) : false;\r\n    }\r\n    aValidType = shared_esm_bundler_isObject(a);\r\n    bValidType = shared_esm_bundler_isObject(b);\r\n    if (aValidType || bValidType) {\r\n        /* istanbul ignore if: this if will probably never be called */\r\n        if (!aValidType || !bValidType) {\r\n            return false;\r\n        }\r\n        const aKeysCount = Object.keys(a).length;\r\n        const bKeysCount = Object.keys(b).length;\r\n        if (aKeysCount !== bKeysCount) {\r\n            return false;\r\n        }\r\n        for (const key in a) {\r\n            const aHasKey = a.hasOwnProperty(key);\r\n            const bHasKey = b.hasOwnProperty(key);\r\n            if ((aHasKey && !bHasKey) ||\r\n                (!aHasKey && bHasKey) ||\r\n                !looseEqual(a[key], b[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return String(a) === String(b);\r\n}\r\nfunction looseIndexOf(arr, val) {\r\n    return arr.findIndex(item => looseEqual(item, val));\r\n}\n\n/**\r\n * For converting {{ interpolation }} values to displayed strings.\r\n * @private\r\n */\r\nconst toDisplayString = (val) => {\r\n    return val == null\r\n        ? \'\'\r\n        : shared_esm_bundler_isObject(val)\r\n            ? JSON.stringify(val, replacer, 2)\r\n            : String(val);\r\n};\r\nconst replacer = (_key, val) => {\r\n    if (isMap(val)) {\r\n        return {\r\n            [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val]) => {\r\n                entries[`${key} =>`] = val;\r\n                return entries;\r\n            }, {})\r\n        };\r\n    }\r\n    else if (isSet(val)) {\r\n        return {\r\n            [`Set(${val.size})`]: [...val.values()]\r\n        };\r\n    }\r\n    else if (shared_esm_bundler_isObject(val) && !shared_esm_bundler_isArray(val) && !isPlainObject(val)) {\r\n        return String(val);\r\n    }\r\n    return val;\r\n};\n\n/**\r\n * List of @babel/parser plugins that are used for template expression\r\n * transforms and SFC script transforms. By default we enable proposals slated\r\n * for ES2020. This will need to be updated as the spec moves forward.\r\n * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins\r\n */\r\nconst babelParserDefaultPlugins = (/* unused pure expression or super */ null && ([\r\n    \'bigInt\',\r\n    \'optionalChaining\',\r\n    \'nullishCoalescingOperator\'\r\n]));\r\nconst EMPTY_OBJ = ( false)\r\n    ? 0\r\n    : {};\r\nconst EMPTY_ARR = ( false) ? 0 : [];\r\nconst shared_esm_bundler_NOOP = () => { };\r\n/**\r\n * Always return false.\r\n */\r\nconst NO = () => false;\r\nconst onRE = /^on[^a-z]/;\r\nconst isOn = (key) => onRE.test(key);\r\nconst isModelListener = (key) => key.startsWith(\'onUpdate:\');\r\nconst extend = Object.assign;\r\nconst remove = (arr, el) => {\r\n    const i = arr.indexOf(el);\r\n    if (i > -1) {\r\n        arr.splice(i, 1);\r\n    }\r\n};\r\nconst shared_esm_bundler_hasOwnProperty = Object.prototype.hasOwnProperty;\r\nconst hasOwn = (val, key) => shared_esm_bundler_hasOwnProperty.call(val, key);\r\nconst shared_esm_bundler_isArray = Array.isArray;\r\nconst isMap = (val) => toTypeString(val) === \'[object Map]\';\r\nconst isSet = (val) => toTypeString(val) === \'[object Set]\';\r\nconst isDate = (val) => val instanceof Date;\r\nconst shared_esm_bundler_isFunction = (val) => typeof val === \'function\';\r\nconst isString = (val) => typeof val === \'string\';\r\nconst isSymbol = (val) => typeof val === \'symbol\';\r\nconst shared_esm_bundler_isObject = (val) => val !== null && typeof val === \'object\';\r\nconst isPromise = (val) => {\r\n    return shared_esm_bundler_isObject(val) && shared_esm_bundler_isFunction(val.then) && shared_esm_bundler_isFunction(val.catch);\r\n};\r\nconst objectToString = Object.prototype.toString;\r\nconst toTypeString = (value) => objectToString.call(value);\r\nconst shared_esm_bundler_toRawType = (value) => {\r\n    // extract "RawType" from strings like "[object RawType]"\r\n    return toTypeString(value).slice(8, -1);\r\n};\r\nconst isPlainObject = (val) => toTypeString(val) === \'[object Object]\';\r\nconst isIntegerKey = (key) => isString(key) &&\r\n    key !== \'NaN\' &&\r\n    key[0] !== \'-\' &&\r\n    \'\' + parseInt(key, 10) === key;\r\nconst isReservedProp = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(\r\n// the leading comma is intentional so empty string "" is also included\r\n\',key,ref,\' +\r\n    \'onVnodeBeforeMount,onVnodeMounted,\' +\r\n    \'onVnodeBeforeUpdate,onVnodeUpdated,\' +\r\n    \'onVnodeBeforeUnmount,onVnodeUnmounted\')));\r\nconst cacheStringFunction = (fn) => {\r\n    const cache = Object.create(null);\r\n    return ((str) => {\r\n        const hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    });\r\n};\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n */\r\nconst camelize = cacheStringFunction((str) => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : \'\'));\r\n});\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\n/**\r\n * @private\r\n */\r\nconst hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, \'-$1\').toLowerCase());\r\n/**\r\n * @private\r\n */\r\nconst capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\r\n/**\r\n * @private\r\n */\r\nconst toHandlerKey = cacheStringFunction((str) => (str ? `on${capitalize(str)}` : ``));\r\n// compare whether a value has changed, accounting for NaN.\r\nconst shared_esm_bundler_hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\r\nconst invokeArrayFns = (fns, arg) => {\r\n    for (let i = 0; i < fns.length; i++) {\r\n        fns[i](arg);\r\n    }\r\n};\r\nconst shared_esm_bundler_def = (obj, key, value) => {\r\n    Object.defineProperty(obj, key, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value\r\n    });\r\n};\r\nconst toNumber = (val) => {\r\n    const n = parseFloat(val);\r\n    return isNaN(n) ? val : n;\r\n};\r\nlet _globalThis;\r\nconst getGlobalThis = () => {\r\n    return (_globalThis ||\r\n        (_globalThis =\r\n            typeof globalThis !== \'undefined\'\r\n                ? globalThis\r\n                : typeof self !== \'undefined\'\r\n                    ? self\r\n                    : typeof window !== \'undefined\'\r\n                        ? window\r\n                        : typeof __webpack_require__.g !== \'undefined\'\r\n                            ? __webpack_require__.g\r\n                            : {}));\r\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\n\n\nconst targetMap = new WeakMap();\r\nconst effectStack = [];\r\nlet activeEffect;\r\nconst ITERATE_KEY = Symbol(( false) ? 0 : \'\');\r\nconst MAP_KEY_ITERATE_KEY = Symbol(( false) ? 0 : \'\');\r\nfunction isEffect(fn) {\r\n    return fn && fn._isEffect === true;\r\n}\r\nfunction effect(fn, options = EMPTY_OBJ) {\r\n    if (isEffect(fn)) {\r\n        fn = fn.raw;\r\n    }\r\n    const effect = createReactiveEffect(fn, options);\r\n    if (!options.lazy) {\r\n        effect();\r\n    }\r\n    return effect;\r\n}\r\nfunction stop(effect) {\r\n    if (effect.active) {\r\n        cleanup(effect);\r\n        if (effect.options.onStop) {\r\n            effect.options.onStop();\r\n        }\r\n        effect.active = false;\r\n    }\r\n}\r\nlet uid = 0;\r\nfunction createReactiveEffect(fn, options) {\r\n    const effect = function reactiveEffect() {\r\n        if (!effect.active) {\r\n            return fn();\r\n        }\r\n        if (!effectStack.includes(effect)) {\r\n            cleanup(effect);\r\n            try {\r\n                enableTracking();\r\n                effectStack.push(effect);\r\n                activeEffect = effect;\r\n                return fn();\r\n            }\r\n            finally {\r\n                effectStack.pop();\r\n                resetTracking();\r\n                activeEffect = effectStack[effectStack.length - 1];\r\n            }\r\n        }\r\n    };\r\n    effect.id = uid++;\r\n    effect.allowRecurse = !!options.allowRecurse;\r\n    effect._isEffect = true;\r\n    effect.active = true;\r\n    effect.raw = fn;\r\n    effect.deps = [];\r\n    effect.options = options;\r\n    return effect;\r\n}\r\nfunction cleanup(effect) {\r\n    const { deps } = effect;\r\n    if (deps.length) {\r\n        for (let i = 0; i < deps.length; i++) {\r\n            deps[i].delete(effect);\r\n        }\r\n        deps.length = 0;\r\n    }\r\n}\r\nlet shouldTrack = true;\r\nconst trackStack = [];\r\nfunction pauseTracking() {\r\n    trackStack.push(shouldTrack);\r\n    shouldTrack = false;\r\n}\r\nfunction enableTracking() {\r\n    trackStack.push(shouldTrack);\r\n    shouldTrack = true;\r\n}\r\nfunction resetTracking() {\r\n    const last = trackStack.pop();\r\n    shouldTrack = last === undefined ? true : last;\r\n}\r\nfunction track(target, type, key) {\r\n    if (!shouldTrack || activeEffect === undefined) {\r\n        return;\r\n    }\r\n    let depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        targetMap.set(target, (depsMap = new Map()));\r\n    }\r\n    let dep = depsMap.get(key);\r\n    if (!dep) {\r\n        depsMap.set(key, (dep = new Set()));\r\n    }\r\n    if (!dep.has(activeEffect)) {\r\n        dep.add(activeEffect);\r\n        activeEffect.deps.push(dep);\r\n        if (false) {}\r\n    }\r\n}\r\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\r\n    const depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        // never been tracked\r\n        return;\r\n    }\r\n    const effects = new Set();\r\n    const add = (effectsToAdd) => {\r\n        if (effectsToAdd) {\r\n            effectsToAdd.forEach(effect => {\r\n                if (effect !== activeEffect || effect.allowRecurse) {\r\n                    effects.add(effect);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    if (type === "clear" /* CLEAR */) {\r\n        // collection being cleared\r\n        // trigger all effects for target\r\n        depsMap.forEach(add);\r\n    }\r\n    else if (key === \'length\' && shared_esm_bundler_isArray(target)) {\r\n        depsMap.forEach((dep, key) => {\r\n            if (key === \'length\' || key >= newValue) {\r\n                add(dep);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        // schedule runs for SET | ADD | DELETE\r\n        if (key !== void 0) {\r\n            add(depsMap.get(key));\r\n        }\r\n        // also run for iteration key on ADD | DELETE | Map.SET\r\n        switch (type) {\r\n            case "add" /* ADD */:\r\n                if (!shared_esm_bundler_isArray(target)) {\r\n                    add(depsMap.get(ITERATE_KEY));\r\n                    if (isMap(target)) {\r\n                        add(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n                    }\r\n                }\r\n                else if (isIntegerKey(key)) {\r\n                    // new index added to array -> length changes\r\n                    add(depsMap.get(\'length\'));\r\n                }\r\n                break;\r\n            case "delete" /* DELETE */:\r\n                if (!shared_esm_bundler_isArray(target)) {\r\n                    add(depsMap.get(ITERATE_KEY));\r\n                    if (isMap(target)) {\r\n                        add(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n                    }\r\n                }\r\n                break;\r\n            case "set" /* SET */:\r\n                if (isMap(target)) {\r\n                    add(depsMap.get(ITERATE_KEY));\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    const run = (effect) => {\r\n        if (false) {}\r\n        if (effect.options.scheduler) {\r\n            effect.options.scheduler(effect);\r\n        }\r\n        else {\r\n            effect();\r\n        }\r\n    };\r\n    effects.forEach(run);\r\n}\n\nconst isNonTrackableKeys = /*#__PURE__*/ makeMap(`__proto__,__v_isRef,__isVue`);\r\nconst builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol)\r\n    .map(key => Symbol[key])\r\n    .filter(isSymbol));\r\nconst reactivity_esm_bundler_get = /*#__PURE__*/ createGetter();\r\nconst shallowGet = /*#__PURE__*/ createGetter(false, true);\r\nconst readonlyGet = /*#__PURE__*/ createGetter(true);\r\nconst shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);\r\nconst arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();\r\nfunction createArrayInstrumentations() {\r\n    const instrumentations = {};\r\n    [\'includes\', \'indexOf\', \'lastIndexOf\'].forEach(key => {\r\n        const method = Array.prototype[key];\r\n        instrumentations[key] = function (...args) {\r\n            const arr = toRaw(this);\r\n            for (let i = 0, l = this.length; i < l; i++) {\r\n                track(arr, "get" /* GET */, i + \'\');\r\n            }\r\n            // we run the method using the original args first (which may be reactive)\r\n            const res = method.apply(arr, args);\r\n            if (res === -1 || res === false) {\r\n                // if that didn\'t work, run it again using raw values.\r\n                return method.apply(arr, args.map(toRaw));\r\n            }\r\n            else {\r\n                return res;\r\n            }\r\n        };\r\n    });\r\n    [\'push\', \'pop\', \'shift\', \'unshift\', \'splice\'].forEach(key => {\r\n        const method = Array.prototype[key];\r\n        instrumentations[key] = function (...args) {\r\n            pauseTracking();\r\n            const res = method.apply(this, args);\r\n            resetTracking();\r\n            return res;\r\n        };\r\n    });\r\n    return instrumentations;\r\n}\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n    return function get(target, key, receiver) {\r\n        if (key === "__v_isReactive" /* IS_REACTIVE */) {\r\n            return !isReadonly;\r\n        }\r\n        else if (key === "__v_isReadonly" /* IS_READONLY */) {\r\n            return isReadonly;\r\n        }\r\n        else if (key === "__v_raw" /* RAW */ &&\r\n            receiver ===\r\n                (isReadonly\r\n                    ? shallow\r\n                        ? shallowReadonlyMap\r\n                        : readonlyMap\r\n                    : shallow\r\n                        ? shallowReactiveMap\r\n                        : reactiveMap).get(target)) {\r\n            return target;\r\n        }\r\n        const targetIsArray = shared_esm_bundler_isArray(target);\r\n        if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {\r\n            return Reflect.get(arrayInstrumentations, key, receiver);\r\n        }\r\n        const res = Reflect.get(target, key, receiver);\r\n        if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\r\n            return res;\r\n        }\r\n        if (!isReadonly) {\r\n            track(target, "get" /* GET */, key);\r\n        }\r\n        if (shallow) {\r\n            return res;\r\n        }\r\n        if (isRef(res)) {\r\n            // ref unwrapping - does not apply for Array + integer key.\r\n            const shouldUnwrap = !targetIsArray || !isIntegerKey(key);\r\n            return shouldUnwrap ? res.value : res;\r\n        }\r\n        if (shared_esm_bundler_isObject(res)) {\r\n            // Convert returned value into a proxy as well. we do the isObject check\r\n            // here to avoid invalid value warning. Also need to lazy access readonly\r\n            // and reactive here to avoid circular dependency.\r\n            return isReadonly ? readonly(res) : reactive(res);\r\n        }\r\n        return res;\r\n    };\r\n}\r\nconst reactivity_esm_bundler_set = /*#__PURE__*/ createSetter();\r\nconst shallowSet = /*#__PURE__*/ createSetter(true);\r\nfunction createSetter(shallow = false) {\r\n    return function set(target, key, value, receiver) {\r\n        let oldValue = target[key];\r\n        if (!shallow) {\r\n            value = toRaw(value);\r\n            oldValue = toRaw(oldValue);\r\n            if (!shared_esm_bundler_isArray(target) && isRef(oldValue) && !isRef(value)) {\r\n                oldValue.value = value;\r\n                return true;\r\n            }\r\n        }\r\n        const hadKey = shared_esm_bundler_isArray(target) && isIntegerKey(key)\r\n            ? Number(key) < target.length\r\n            : hasOwn(target, key);\r\n        const result = Reflect.set(target, key, value, receiver);\r\n        // don\'t trigger if target is something up in the prototype chain of original\r\n        if (target === toRaw(receiver)) {\r\n            if (!hadKey) {\r\n                trigger(target, "add" /* ADD */, key, value);\r\n            }\r\n            else if (shared_esm_bundler_hasChanged(value, oldValue)) {\r\n                trigger(target, "set" /* SET */, key, value, oldValue);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n}\r\nfunction deleteProperty(target, key) {\r\n    const hadKey = hasOwn(target, key);\r\n    const oldValue = target[key];\r\n    const result = Reflect.deleteProperty(target, key);\r\n    if (result && hadKey) {\r\n        trigger(target, "delete" /* DELETE */, key, undefined, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction has(target, key) {\r\n    const result = Reflect.has(target, key);\r\n    if (!isSymbol(key) || !builtInSymbols.has(key)) {\r\n        track(target, "has" /* HAS */, key);\r\n    }\r\n    return result;\r\n}\r\nfunction reactivity_esm_bundler_ownKeys(target) {\r\n    track(target, "iterate" /* ITERATE */, shared_esm_bundler_isArray(target) ? \'length\' : ITERATE_KEY);\r\n    return Reflect.ownKeys(target);\r\n}\r\nconst mutableHandlers = {\r\n    get: reactivity_esm_bundler_get,\r\n    set: reactivity_esm_bundler_set,\r\n    deleteProperty,\r\n    has,\r\n    ownKeys: reactivity_esm_bundler_ownKeys\r\n};\r\nconst readonlyHandlers = {\r\n    get: readonlyGet,\r\n    set(target, key) {\r\n        if ((false)) {}\r\n        return true;\r\n    },\r\n    deleteProperty(target, key) {\r\n        if ((false)) {}\r\n        return true;\r\n    }\r\n};\r\nconst shallowReactiveHandlers = /*#__PURE__*/ extend({}, mutableHandlers, {\r\n    get: shallowGet,\r\n    set: shallowSet\r\n});\r\n// Props handlers are special in the sense that it should not unwrap top-level\r\n// refs (in order to allow refs to be explicitly passed down), but should\r\n// retain the reactivity of the normal readonly object.\r\nconst shallowReadonlyHandlers = /*#__PURE__*/ extend({}, readonlyHandlers, {\r\n    get: shallowReadonlyGet\r\n});\n\nconst toReactive = (value) => shared_esm_bundler_isObject(value) ? reactive(value) : value;\r\nconst toReadonly = (value) => shared_esm_bundler_isObject(value) ? readonly(value) : value;\r\nconst toShallow = (value) => value;\r\nconst getProto = (v) => Reflect.getPrototypeOf(v);\r\nfunction get$1(target, key, isReadonly = false, isShallow = false) {\r\n    // #1772: readonly(reactive(Map)) should return readonly + reactive version\r\n    // of the value\r\n    target = target["__v_raw" /* RAW */];\r\n    const rawTarget = toRaw(target);\r\n    const rawKey = toRaw(key);\r\n    if (key !== rawKey) {\r\n        !isReadonly && track(rawTarget, "get" /* GET */, key);\r\n    }\r\n    !isReadonly && track(rawTarget, "get" /* GET */, rawKey);\r\n    const { has } = getProto(rawTarget);\r\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n    if (has.call(rawTarget, key)) {\r\n        return wrap(target.get(key));\r\n    }\r\n    else if (has.call(rawTarget, rawKey)) {\r\n        return wrap(target.get(rawKey));\r\n    }\r\n    else if (target !== rawTarget) {\r\n        // #3602 readonly(reactive(Map))\r\n        // ensure that the nested reactive `Map` can do tracking for itself\r\n        target.get(key);\r\n    }\r\n}\r\nfunction has$1(key, isReadonly = false) {\r\n    const target = this["__v_raw" /* RAW */];\r\n    const rawTarget = toRaw(target);\r\n    const rawKey = toRaw(key);\r\n    if (key !== rawKey) {\r\n        !isReadonly && track(rawTarget, "has" /* HAS */, key);\r\n    }\r\n    !isReadonly && track(rawTarget, "has" /* HAS */, rawKey);\r\n    return key === rawKey\r\n        ? target.has(key)\r\n        : target.has(key) || target.has(rawKey);\r\n}\r\nfunction size(target, isReadonly = false) {\r\n    target = target["__v_raw" /* RAW */];\r\n    !isReadonly && track(toRaw(target), "iterate" /* ITERATE */, ITERATE_KEY);\r\n    return Reflect.get(target, \'size\', target);\r\n}\r\nfunction reactivity_esm_bundler_add(value) {\r\n    value = toRaw(value);\r\n    const target = toRaw(this);\r\n    const proto = getProto(target);\r\n    const hadKey = proto.has.call(target, value);\r\n    if (!hadKey) {\r\n        target.add(value);\r\n        trigger(target, "add" /* ADD */, value, value);\r\n    }\r\n    return this;\r\n}\r\nfunction set$1(key, value) {\r\n    value = toRaw(value);\r\n    const target = toRaw(this);\r\n    const { has, get } = getProto(target);\r\n    let hadKey = has.call(target, key);\r\n    if (!hadKey) {\r\n        key = toRaw(key);\r\n        hadKey = has.call(target, key);\r\n    }\r\n    else if ((false)) {}\r\n    const oldValue = get.call(target, key);\r\n    target.set(key, value);\r\n    if (!hadKey) {\r\n        trigger(target, "add" /* ADD */, key, value);\r\n    }\r\n    else if (shared_esm_bundler_hasChanged(value, oldValue)) {\r\n        trigger(target, "set" /* SET */, key, value, oldValue);\r\n    }\r\n    return this;\r\n}\r\nfunction deleteEntry(key) {\r\n    const target = toRaw(this);\r\n    const { has, get } = getProto(target);\r\n    let hadKey = has.call(target, key);\r\n    if (!hadKey) {\r\n        key = toRaw(key);\r\n        hadKey = has.call(target, key);\r\n    }\r\n    else if ((false)) {}\r\n    const oldValue = get ? get.call(target, key) : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = target.delete(key);\r\n    if (hadKey) {\r\n        trigger(target, "delete" /* DELETE */, key, undefined, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction clear() {\r\n    const target = toRaw(this);\r\n    const hadItems = target.size !== 0;\r\n    const oldTarget = ( false)\r\n        ? 0\r\n        : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = target.clear();\r\n    if (hadItems) {\r\n        trigger(target, "clear" /* CLEAR */, undefined, undefined, oldTarget);\r\n    }\r\n    return result;\r\n}\r\nfunction createForEach(isReadonly, isShallow) {\r\n    return function forEach(callback, thisArg) {\r\n        const observed = this;\r\n        const target = observed["__v_raw" /* RAW */];\r\n        const rawTarget = toRaw(target);\r\n        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n        !isReadonly && track(rawTarget, "iterate" /* ITERATE */, ITERATE_KEY);\r\n        return target.forEach((value, key) => {\r\n            // important: make sure the callback is\r\n            // 1. invoked with the reactive map as `this` and 3rd arg\r\n            // 2. the value received should be a corresponding reactive/readonly.\r\n            return callback.call(thisArg, wrap(value), wrap(key), observed);\r\n        });\r\n    };\r\n}\r\nfunction createIterableMethod(method, isReadonly, isShallow) {\r\n    return function (...args) {\r\n        const target = this["__v_raw" /* RAW */];\r\n        const rawTarget = toRaw(target);\r\n        const targetIsMap = isMap(rawTarget);\r\n        const isPair = method === \'entries\' || (method === Symbol.iterator && targetIsMap);\r\n        const isKeyOnly = method === \'keys\' && targetIsMap;\r\n        const innerIterator = target[method](...args);\r\n        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n        !isReadonly &&\r\n            track(rawTarget, "iterate" /* ITERATE */, isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\r\n        // return a wrapped iterator which returns observed versions of the\r\n        // values emitted from the real iterator\r\n        return {\r\n            // iterator protocol\r\n            next() {\r\n                const { value, done } = innerIterator.next();\r\n                return done\r\n                    ? { value, done }\r\n                    : {\r\n                        value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\r\n                        done\r\n                    };\r\n            },\r\n            // iterable protocol\r\n            [Symbol.iterator]() {\r\n                return this;\r\n            }\r\n        };\r\n    };\r\n}\r\nfunction createReadonlyMethod(type) {\r\n    return function (...args) {\r\n        if ((false)) {}\r\n        return type === "delete" /* DELETE */ ? false : this;\r\n    };\r\n}\r\nfunction createInstrumentations() {\r\n    const mutableInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key);\r\n        },\r\n        get size() {\r\n            return size(this);\r\n        },\r\n        has: has$1,\r\n        add: reactivity_esm_bundler_add,\r\n        set: set$1,\r\n        delete: deleteEntry,\r\n        clear,\r\n        forEach: createForEach(false, false)\r\n    };\r\n    const shallowInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, false, true);\r\n        },\r\n        get size() {\r\n            return size(this);\r\n        },\r\n        has: has$1,\r\n        add: reactivity_esm_bundler_add,\r\n        set: set$1,\r\n        delete: deleteEntry,\r\n        clear,\r\n        forEach: createForEach(false, true)\r\n    };\r\n    const readonlyInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, true);\r\n        },\r\n        get size() {\r\n            return size(this, true);\r\n        },\r\n        has(key) {\r\n            return has$1.call(this, key, true);\r\n        },\r\n        add: createReadonlyMethod("add" /* ADD */),\r\n        set: createReadonlyMethod("set" /* SET */),\r\n        delete: createReadonlyMethod("delete" /* DELETE */),\r\n        clear: createReadonlyMethod("clear" /* CLEAR */),\r\n        forEach: createForEach(true, false)\r\n    };\r\n    const shallowReadonlyInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, true, true);\r\n        },\r\n        get size() {\r\n            return size(this, true);\r\n        },\r\n        has(key) {\r\n            return has$1.call(this, key, true);\r\n        },\r\n        add: createReadonlyMethod("add" /* ADD */),\r\n        set: createReadonlyMethod("set" /* SET */),\r\n        delete: createReadonlyMethod("delete" /* DELETE */),\r\n        clear: createReadonlyMethod("clear" /* CLEAR */),\r\n        forEach: createForEach(true, true)\r\n    };\r\n    const iteratorMethods = [\'keys\', \'values\', \'entries\', Symbol.iterator];\r\n    iteratorMethods.forEach(method => {\r\n        mutableInstrumentations[method] = createIterableMethod(method, false, false);\r\n        readonlyInstrumentations[method] = createIterableMethod(method, true, false);\r\n        shallowInstrumentations[method] = createIterableMethod(method, false, true);\r\n        shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);\r\n    });\r\n    return [\r\n        mutableInstrumentations,\r\n        readonlyInstrumentations,\r\n        shallowInstrumentations,\r\n        shallowReadonlyInstrumentations\r\n    ];\r\n}\r\nconst [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* #__PURE__*/ createInstrumentations();\r\nfunction createInstrumentationGetter(isReadonly, shallow) {\r\n    const instrumentations = shallow\r\n        ? isReadonly\r\n            ? shallowReadonlyInstrumentations\r\n            : shallowInstrumentations\r\n        : isReadonly\r\n            ? readonlyInstrumentations\r\n            : mutableInstrumentations;\r\n    return (target, key, receiver) => {\r\n        if (key === "__v_isReactive" /* IS_REACTIVE */) {\r\n            return !isReadonly;\r\n        }\r\n        else if (key === "__v_isReadonly" /* IS_READONLY */) {\r\n            return isReadonly;\r\n        }\r\n        else if (key === "__v_raw" /* RAW */) {\r\n            return target;\r\n        }\r\n        return Reflect.get(hasOwn(instrumentations, key) && key in target\r\n            ? instrumentations\r\n            : target, key, receiver);\r\n    };\r\n}\r\nconst mutableCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(false, false)\r\n};\r\nconst shallowCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(false, true)\r\n};\r\nconst readonlyCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(true, false)\r\n};\r\nconst shallowReadonlyCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(true, true)\r\n};\r\nfunction checkIdentityKeys(target, has, key) {\r\n    const rawKey = toRaw(key);\r\n    if (rawKey !== key && has.call(target, rawKey)) {\r\n        const type = toRawType(target);\r\n        console.warn(`Reactive ${type} contains both the raw and reactive ` +\r\n            `versions of the same object${type === `Map` ? ` as keys` : ``}, ` +\r\n            `which can lead to inconsistencies. ` +\r\n            `Avoid differentiating between the raw and reactive versions ` +\r\n            `of an object and only use the reactive version if possible.`);\r\n    }\r\n}\n\nconst reactiveMap = new WeakMap();\r\nconst shallowReactiveMap = new WeakMap();\r\nconst readonlyMap = new WeakMap();\r\nconst shallowReadonlyMap = new WeakMap();\r\nfunction targetTypeMap(rawType) {\r\n    switch (rawType) {\r\n        case \'Object\':\r\n        case \'Array\':\r\n            return 1 /* COMMON */;\r\n        case \'Map\':\r\n        case \'Set\':\r\n        case \'WeakMap\':\r\n        case \'WeakSet\':\r\n            return 2 /* COLLECTION */;\r\n        default:\r\n            return 0 /* INVALID */;\r\n    }\r\n}\r\nfunction getTargetType(value) {\r\n    return value["__v_skip" /* SKIP */] || !Object.isExtensible(value)\r\n        ? 0 /* INVALID */\r\n        : targetTypeMap(shared_esm_bundler_toRawType(value));\r\n}\r\nfunction reactive(target) {\r\n    // if trying to observe a readonly proxy, return the readonly version.\r\n    if (target && target["__v_isReadonly" /* IS_READONLY */]) {\r\n        return target;\r\n    }\r\n    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);\r\n}\r\n/**\r\n * Return a shallowly-reactive copy of the original object, where only the root\r\n * level properties are reactive. It also does not auto-unwrap refs (even at the\r\n * root level).\r\n */\r\nfunction shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);\r\n}\r\n/**\r\n * Creates a readonly copy of the original object. Note the returned copy is not\r\n * made reactive, but `readonly` can be called on an already reactive object.\r\n */\r\nfunction readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\r\n}\r\n/**\r\n * Returns a reactive-copy of the original object, where only the root level\r\n * properties are readonly, and does NOT unwrap refs nor recursively convert\r\n * returned properties.\r\n * This is used for creating the props proxy object for stateful components.\r\n */\r\nfunction shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);\r\n}\r\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {\r\n    if (!shared_esm_bundler_isObject(target)) {\r\n        if ((false)) {}\r\n        return target;\r\n    }\r\n    // target is already a Proxy, return it.\r\n    // exception: calling readonly() on a reactive object\r\n    if (target["__v_raw" /* RAW */] &&\r\n        !(isReadonly && target["__v_isReactive" /* IS_REACTIVE */])) {\r\n        return target;\r\n    }\r\n    // target already has corresponding Proxy\r\n    const existingProxy = proxyMap.get(target);\r\n    if (existingProxy) {\r\n        return existingProxy;\r\n    }\r\n    // only a whitelist of value types can be observed.\r\n    const targetType = getTargetType(target);\r\n    if (targetType === 0 /* INVALID */) {\r\n        return target;\r\n    }\r\n    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */ ? collectionHandlers : baseHandlers);\r\n    proxyMap.set(target, proxy);\r\n    return proxy;\r\n}\r\nfunction isReactive(value) {\r\n    if (isReadonly(value)) {\r\n        return isReactive(value["__v_raw" /* RAW */]);\r\n    }\r\n    return !!(value && value["__v_isReactive" /* IS_REACTIVE */]);\r\n}\r\nfunction isReadonly(value) {\r\n    return !!(value && value["__v_isReadonly" /* IS_READONLY */]);\r\n}\r\nfunction isProxy(value) {\r\n    return isReactive(value) || isReadonly(value);\r\n}\r\nfunction toRaw(observed) {\r\n    return ((observed && toRaw(observed["__v_raw" /* RAW */])) || observed);\r\n}\r\nfunction markRaw(value) {\r\n    def(value, "__v_skip" /* SKIP */, true);\r\n    return value;\r\n}\n\nconst reactivity_esm_bundler_convert = (val) => isObject(val) ? reactive(val) : val;\r\nfunction isRef(r) {\r\n    return Boolean(r && r.__v_isRef === true);\r\n}\r\nfunction ref(value) {\r\n    return createRef(value);\r\n}\r\nfunction shallowRef(value) {\r\n    return createRef(value, true);\r\n}\r\nclass RefImpl {\r\n    constructor(_rawValue, _shallow) {\r\n        this._rawValue = _rawValue;\r\n        this._shallow = _shallow;\r\n        this.__v_isRef = true;\r\n        this._value = _shallow ? _rawValue : reactivity_esm_bundler_convert(_rawValue);\r\n    }\r\n    get value() {\r\n        track(toRaw(this), "get" /* GET */, \'value\');\r\n        return this._value;\r\n    }\r\n    set value(newVal) {\r\n        if (hasChanged(toRaw(newVal), this._rawValue)) {\r\n            this._rawValue = newVal;\r\n            this._value = this._shallow ? newVal : reactivity_esm_bundler_convert(newVal);\r\n            trigger(toRaw(this), "set" /* SET */, \'value\', newVal);\r\n        }\r\n    }\r\n}\r\nfunction createRef(rawValue, shallow = false) {\r\n    if (isRef(rawValue)) {\r\n        return rawValue;\r\n    }\r\n    return new RefImpl(rawValue, shallow);\r\n}\r\nfunction triggerRef(ref) {\r\n    trigger(toRaw(ref), "set" /* SET */, \'value\', ( false) ? 0 : void 0);\r\n}\r\nfunction unref(ref) {\r\n    return isRef(ref) ? ref.value : ref;\r\n}\r\nconst shallowUnwrapHandlers = {\r\n    get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),\r\n    set: (target, key, value, receiver) => {\r\n        const oldValue = target[key];\r\n        if (isRef(oldValue) && !isRef(value)) {\r\n            oldValue.value = value;\r\n            return true;\r\n        }\r\n        else {\r\n            return Reflect.set(target, key, value, receiver);\r\n        }\r\n    }\r\n};\r\nfunction proxyRefs(objectWithRefs) {\r\n    return isReactive(objectWithRefs)\r\n        ? objectWithRefs\r\n        : new Proxy(objectWithRefs, shallowUnwrapHandlers);\r\n}\r\nclass CustomRefImpl {\r\n    constructor(factory) {\r\n        this.__v_isRef = true;\r\n        const { get, set } = factory(() => track(this, "get" /* GET */, \'value\'), () => trigger(this, "set" /* SET */, \'value\'));\r\n        this._get = get;\r\n        this._set = set;\r\n    }\r\n    get value() {\r\n        return this._get();\r\n    }\r\n    set value(newVal) {\r\n        this._set(newVal);\r\n    }\r\n}\r\nfunction customRef(factory) {\r\n    return new CustomRefImpl(factory);\r\n}\r\nfunction toRefs(object) {\r\n    if (false) {}\r\n    const ret = isArray(object) ? new Array(object.length) : {};\r\n    for (const key in object) {\r\n        ret[key] = toRef(object, key);\r\n    }\r\n    return ret;\r\n}\r\nclass ObjectRefImpl {\r\n    constructor(_object, _key) {\r\n        this._object = _object;\r\n        this._key = _key;\r\n        this.__v_isRef = true;\r\n    }\r\n    get value() {\r\n        return this._object[this._key];\r\n    }\r\n    set value(newVal) {\r\n        this._object[this._key] = newVal;\r\n    }\r\n}\r\nfunction toRef(object, key) {\r\n    return isRef(object[key])\r\n        ? object[key]\r\n        : new ObjectRefImpl(object, key);\r\n}\n\nclass ComputedRefImpl {\r\n    constructor(getter, _setter, isReadonly) {\r\n        this._setter = _setter;\r\n        this._dirty = true;\r\n        this.__v_isRef = true;\r\n        this.effect = effect(getter, {\r\n            lazy: true,\r\n            scheduler: () => {\r\n                if (!this._dirty) {\r\n                    this._dirty = true;\r\n                    trigger(toRaw(this), "set" /* SET */, \'value\');\r\n                }\r\n            }\r\n        });\r\n        this["__v_isReadonly" /* IS_READONLY */] = isReadonly;\r\n    }\r\n    get value() {\r\n        // the computed ref may get wrapped by other proxies e.g. readonly() #3376\r\n        const self = toRaw(this);\r\n        if (self._dirty) {\r\n            self._value = this.effect();\r\n            self._dirty = false;\r\n        }\r\n        track(self, "get" /* GET */, \'value\');\r\n        return self._value;\r\n    }\r\n    set value(newValue) {\r\n        this._setter(newValue);\r\n    }\r\n}\r\nfunction computed(getterOrOptions) {\r\n    let getter;\r\n    let setter;\r\n    if (isFunction(getterOrOptions)) {\r\n        getter = getterOrOptions;\r\n        setter = ( false)\r\n            ? 0\r\n            : NOOP;\r\n    }\r\n    else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    return new ComputedRefImpl(getter, setter, isFunction(getterOrOptions) || !getterOrOptions.set);\r\n}\n\n\n\n;// CONCATENATED MODULE: ./src/plugins/chart/utils.js\nfunction findDataInSeries(x, seriesMeta) {\n  for (var i = 0; i < seriesMeta.length - 1; i++) {\n    var x1 = seriesMeta[i].x;\n    var x2 = seriesMeta[i + 1].x;\n\n    if (x > x1 && x < x2) {\n      return {\n        belong: x - x1 > x2 - x ? \'next\' : \'curr\',\n        curr: seriesMeta[i],\n        next: seriesMeta[i + 1]\n      };\n    }\n  }\n\n  return null;\n}\nfunction findDataInBarSeries(x, y, seriesMeta, seriesStep) {\n  var halfStep = seriesStep / 2;\n\n  for (var i = 0; i < seriesMeta.length; i++) {\n    var currMeta = seriesMeta[i];\n    var pre = seriesMeta[i - 1];\n    var next = seriesMeta[i + 1];\n    var x1 = pre ? pre.x + halfStep : currMeta.x - halfStep;\n    var x2 = next ? next.x - halfStep : currMeta.x + halfStep;\n\n    if (x > x1 && x < x2) {\n      var series = currMeta.series;\n      var currLegend = void 0;\n\n      for (var j = 0; j < series.length; j++) {\n        var curSeries = series[j];\n        var curPoint = curSeries.p;\n        var barWidth = curSeries.barWidth;\n        var _x = curPoint.x;\n        var ys = curPoint.lastY;\n        var y1 = curPoint.y;\n\n        var _x2 = _x + barWidth;\n\n        if (x > _x && x < _x2 && y < y1 && y > ys) {\n          currLegend = series[j].legend;\n          break;\n        }\n      }\n\n      return {\n        belong: currMeta,\n        mouse: {\n          x: x,\n          y: y\n        },\n        currLegend: currLegend\n      };\n    }\n  }\n\n  return null;\n}\n;// CONCATENATED MODULE: ./src/plugins/chart/LineChart.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction LineChart_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction LineChart_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { LineChart_ownKeys(Object(source), true).forEach(function (key) { LineChart_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { LineChart_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction LineChart_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction LineChart_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction LineChart_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction LineChart_createClass(Constructor, protoProps, staticProps) { if (protoProps) LineChart_defineProperties(Constructor.prototype, protoProps); if (staticProps) LineChart_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\nvar LineChart = /*#__PURE__*/function () {\n  function LineChart(options) {\n    LineChart_classCallCheck(this, LineChart);\n\n    this.name = \'LineChart\';\n    this.options = Object.assign({\n      smooth: false,\n      pointRadius: 0,\n      fill: false\n    }, options);\n    this.animationContext = {};\n  }\n\n  LineChart_createClass(LineChart, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      globalCtx.Chart.hooks.initChart.tap(this.name, function (context2d) {\n        _this.init(context2d, globalCtx);\n      });\n      globalCtx.Chart.hooks.renderChart.tap(this.name, function (context2d) {\n        _this.render(context2d, globalCtx);\n      });\n      globalCtx.Chart.hooks.afterRenderChart.tap(this.name, function (context2d) {\n        _this.afterRender(context2d, globalCtx);\n      });\n    }\n  }, {\n    key: "init",\n    value: function init(context2d, globalCtx) {\n      var _this2 = this;\n\n      var render = context2d.render.bind(context2d);\n      var renderCallback = makeRenderCallback(render);\n      globalCtx.effect(function () {\n        console.log(\'effect init linechart\');\n        var _globalCtx$globalData = globalCtx.globalData.source,\n            data = _globalCtx$globalData.data,\n            legend = _globalCtx$globalData.legend,\n            isStack = _globalCtx$globalData.stack; // const {\n        //     spanHorizontal,\n        // } = globalCtx.Layout;\n\n        var _globalCtx$Coordinate = globalCtx.Coordinate.transformMeta,\n            convertDataToCoordX = _globalCtx$Coordinate.convertDataToCoordX,\n            convertDataToCoordY = _globalCtx$Coordinate.convertDataToCoordY;\n        var getColor = globalCtx.theme.getColor;\n        var seriesInCoord = [];\n        var seriesMeta = [];\n        var series = data.slice();\n        legend.slice().forEach(function (d, sid) {\n          var seri = series[sid].slice();\n          var theme = getColor(sid);\n          var animeArr = [];\n          var points = [];\n          seri.forEach(function (v) {\n            var dx = v[0];\n            var dy;\n            var dyraw;\n            var ref;\n\n            if (isStack) {\n              dyraw = v[3];\n              dy = v[1];\n            } else {\n              dy = dyraw = v[1];\n            }\n\n            ref = dx;\n            var x = convertDataToCoordX(ref);\n            var y = convertDataToCoordY(dy);\n            var lastY = isStack ? convertDataToCoordY(v[2]) : 0;\n            var p = {\n              x: x,\n              y: y,\n              lastY: lastY\n            };\n            var lastp = {\n              x: x,\n              y: lastY\n            };\n\n            if (!seriesMeta[ref]) {\n              seriesMeta[ref] = {\n                x: x,\n                series: []\n              };\n            }\n\n            seriesMeta[ref].series.push({\n              legend: LineChart_objectSpread({}, d),\n              p: p,\n              dx: dx,\n              dy: dyraw,\n              theme: theme,\n              lastp: lastp\n            });\n            animeArr.push({\n              x: x,\n              y: y,\n              lastY: lastY\n            });\n            points.push({\n              x: x,\n              y: y,\n              lastY: lastY\n            });\n          });\n          seriesInCoord.push({\n            theme: theme,\n            legend: LineChart_objectSpread({}, d),\n            isStack: isStack,\n            points: points\n          });\n\n          if (!_this2.animationContext[d.name]) {\n            _this2.animationContext[d.name] = {\n              points: new AnimeArray({\n                startArray: animeArr,\n                duration: 550,\n                renderCallback: renderCallback,\n                callBackOnMakeUp: function callBackOnMakeUp(makeup, ratio) {\n                  return makeup.map(function (p) {\n                    return {\n                      x: p.x * ratio,\n                      y: p.y,\n                      lastY: p.lastY\n                    };\n                  });\n                },\n                callbackOnElement: function callbackOnElement(newState, oldState, idx, ratio, currentArray) {\n                  if (ratio === \'end\') {\n                    currentArray[idx] = LineChart_objectSpread({}, newState);\n                  } else {\n                    currentArray[idx] = {\n                      x: oldState.x + (newState.x - oldState.x) * ratio,\n                      y: oldState.y + (newState.y - oldState.y) * ratio,\n                      lastY: oldState.lastY + (newState.lastY - oldState.lastY) * ratio\n                    };\n                  }\n                }\n              }),\n              clipX: new AnimeNumber({\n                startNumber: 0,\n                duration: 1000,\n                renderCallback: renderCallback\n              }),\n              opacity: new AnimeNumber({\n                startNumber: 0.4,\n                duration: 250,\n                renderCallback: renderCallback\n              }),\n              subOpacity: new AnimeNumber({\n                startNumber: 1,\n                duration: 250,\n                renderCallback: renderCallback\n              })\n            };\n          }\n        });\n        Object.assign(globalCtx.Chart.chartMeta, {\n          seriesInCoord: seriesInCoord,\n          seriesMeta: Object.values(seriesMeta).sort(function (a, b) {\n            return a.x - b.x;\n          })\n        });\n      });\n      effect(function () {\n        // 避免主图多次重绘\n        var seriesMeta = globalCtx.Chart.chartMeta.seriesMeta;\n        var _globalCtx$_mouse = globalCtx._mouse,\n            x = _globalCtx$_mouse.x,\n            y = _globalCtx$_mouse.y;\n        var _globalCtx$Layout = globalCtx.Layout,\n            top = _globalCtx$Layout.top,\n            bottom = _globalCtx$Layout.bottom;\n        var _globalCtx$Coordinate2 = globalCtx.Coordinate.transformMeta,\n            transformMtxRawInvert = _globalCtx$Coordinate2.transformMtxRawInvert,\n            xAxisY = _globalCtx$Coordinate2.xAxisY;\n        var stack = globalCtx.globalData.source.stack;\n\n        if (y > bottom || y < top) {\n          globalCtx.Chart.chartMeta.focused = null;\n          return;\n        }\n\n        var vec = vec2_fromValues(x, y);\n        transformMat2d(vec, vec, transformMtxRawInvert);\n        var segment = findDataInSeries(vec[0], seriesMeta);\n\n        if (segment) {\n          var _vec = _slicedToArray(vec, 2),\n              _x = _vec[0],\n              _y = _vec[1];\n\n          var curr = segment.curr,\n              next = segment.next;\n          var l = curr.series.length;\n          var cs = curr.series;\n          var ns = next.series;\n          var sfocus = null;\n\n          if (stack && _this2.options.fill) {\n            for (var i = 0; i < l; i++) {\n              var b1 = [cs[i].p.x, cs[i].p.y];\n              var b2 = cs[i - 1] ? [cs[i - 1].p.x, cs[i - 1].p.y] : [curr.x, xAxisY];\n              var c1 = [ns[i].p.x, ns[i].p.y];\n              var c2 = ns[i - 1] ? [ns[i - 1].p.x, ns[i - 1].p.y] : [next.x, xAxisY];\n\n              if (pointInPolygon([_x, _y], [b2, b1, c1, c2])) {\n                sfocus = i;\n              }\n            }\n          } else {\n            for (var _i2 = 0; _i2 < l; _i2++) {\n              if (!ns[_i2]) continue;\n              var b = cs[_i2].p;\n              var c = ns[_i2].p;\n              var func = _this2.options.smooth ? distToBezierSegmentSquared : distToSegmentSquared;\n              var distance = func(vec, [b.x, b.y], [c.x, c.y]);\n\n              if (distance < 100) {\n                sfocus = _i2;\n              }\n            }\n          }\n\n          var belong = segment[segment.belong];\n          var meta = {\n            belong: belong,\n            mouse: {\n              x: _x,\n              y: _y\n            }\n          };\n\n          if (sfocus !== null) {\n            meta.currLegend = curr.series[sfocus].legend;\n          }\n\n          globalCtx.Chart.chartMeta.focused = meta;\n        } else {\n          globalCtx.Chart.chartMeta.focused = null;\n        }\n      });\n    }\n  }, {\n    key: "drawSeriesLine",\n    value: function drawSeriesLine(ctx, data, smooth, getPoint) {\n      for (var l = 0; l < data.length - 1; l++) {\n        var p2 = data[l + 1];\n\n        if (smooth) {\n          var p1 = data[l];\n          var points = bezierPoints(getPoint(p1), getPoint(p2));\n          ctx.bezierCurveTo.apply(ctx, _toConsumableArray(points));\n        } else {\n          ctx.lineTo.apply(ctx, getPoint(p2));\n        }\n      }\n    }\n  }, {\n    key: "drawLine",\n    value: function drawLine(lgname, theme, spanVertical, ctx, xAxisY, isStack) {\n      var _this3 = this;\n\n      var currentAnimeContext = this.animationContext[lgname];\n      var _this$options = this.options,\n          smooth = _this$options.smooth,\n          fill = _this$options.fill;\n      ctx.beginPath();\n      ctx.functionCallWithDynamicParameter(\'rect\', 0, 0, function () {\n        return currentAnimeContext.clipX.value;\n      }, spanVertical);\n      ctx.clip();\n      ctx.beginPath();\n\n      var getP = function getP(p) {\n        return [p.x, p.y];\n      };\n\n      var getPlast = function getPlast(p) {\n        return [p.x, p.lastY];\n      };\n\n      ctx.functionsCall(function (ctx) {\n        var data = currentAnimeContext.points.value;\n        ctx.moveTo(data[0].x, data[0].y);\n\n        _this3.drawSeriesLine(ctx, data, smooth, getP);\n\n        ctx.stroke();\n\n        if (fill) {\n          var fillColor = color_string_default().to.rgb([].concat(_toConsumableArray(theme.color.slice(0, 3)), [currentAnimeContext.opacity.value]));\n\n          if (isStack) {\n            var reversedDATA = data.slice().reverse();\n            ctx.lineTo(reversedDATA[0].x, reversedDATA[0].lastY);\n\n            _this3.drawSeriesLine(ctx, reversedDATA, smooth, getPlast);\n\n            ctx.closePath();\n          } else {\n            ctx.lineTo(data[data.length - 1].x, xAxisY);\n            ctx.lineTo(data[0].x, xAxisY);\n            ctx.closePath();\n          }\n\n          ctx.fillStyle = fillColor;\n          ctx.fill();\n        }\n      });\n    }\n  }, {\n    key: "render",\n    value: function render(ctx, globalCtx) {\n      var _this4 = this;\n\n      console.log(\'render\');\n      var spanVertical = globalCtx.Layout.spanVertical;\n      var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;\n      var xAxisY = globalCtx.Coordinate.transformMeta.xAxisY;\n      seriesInCoord.forEach(function (_ref) {\n        var legend = _ref.legend,\n            theme = _ref.theme,\n            isStack = _ref.isStack;\n        ctx.addConditionBlockBegin(function () {\n          return legend.disabled;\n        });\n        var lgname = legend.name;\n        var currentAnimeContext = _this4.animationContext[lgname];\n        ctx.save();\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = ctx.fillStyle = color_string_default().to.rgb([].concat(_toConsumableArray(theme.color.slice(0, 3)), [currentAnimeContext.subOpacity.value]));\n\n        _this4.drawLine(lgname, theme, spanVertical, ctx, xAxisY, isStack);\n\n        ctx.restore();\n        ctx.addConditionBlockEnd();\n      });\n    }\n  }, {\n    key: "afterRender",\n    value: function afterRender(context2d, globalCtx) {\n      var _this5 = this;\n\n      globalCtx.effect(function () {\n        var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;\n        var spanHorizontal = globalCtx.Layout.spanHorizontal;\n        seriesInCoord.forEach(function (_ref2) {\n          var legend = _ref2.legend,\n              points = _ref2.points;\n\n          _this5.animationContext[legend.name].clipX.animeTo(spanHorizontal);\n\n          _this5.animationContext[legend.name].points.animeTo(points.slice());\n        });\n      });\n      globalCtx.effect(function () {\n        var focused = globalCtx.Chart.chartMeta.focused;\n        var legend = globalCtx.globalData.source.legend;\n        legend.filter(function (l) {\n          return !l.disabled;\n        }).forEach(function (l) {\n          var name = l.name;\n          var curr = _this5.animationContext[name];\n\n          if (focused && focused.currLegend) {\n            if (name === focused.currLegend.name) {\n              curr.opacity.animeTo(0.4);\n              curr.subOpacity.animeTo(1);\n            } else {\n              curr.opacity.animeTo(0.1);\n              curr.subOpacity.animeTo(0.6);\n            }\n          } else {\n            curr.opacity.animeTo(0.4);\n            curr.subOpacity.animeTo(1);\n          }\n        });\n      });\n    }\n  }]);\n\n  return LineChart;\n}();\n\n/* harmony default export */ const chart_LineChart = (LineChart);\n;// CONCATENATED MODULE: ./src/plugins/chart/BarChart.js\nfunction BarChart_toConsumableArray(arr) { return BarChart_arrayWithoutHoles(arr) || BarChart_iterableToArray(arr) || BarChart_unsupportedIterableToArray(arr) || BarChart_nonIterableSpread(); }\n\nfunction BarChart_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction BarChart_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return BarChart_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return BarChart_arrayLikeToArray(o, minLen); }\n\nfunction BarChart_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction BarChart_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return BarChart_arrayLikeToArray(arr); }\n\nfunction BarChart_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction BarChart_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction BarChart_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { BarChart_ownKeys(Object(source), true).forEach(function (key) { BarChart_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { BarChart_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction BarChart_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction BarChart_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction BarChart_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction BarChart_createClass(Constructor, protoProps, staticProps) { if (protoProps) BarChart_defineProperties(Constructor.prototype, protoProps); if (staticProps) BarChart_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\nvar BarChart = /*#__PURE__*/function () {\n  function BarChart() {\n    BarChart_classCallCheck(this, BarChart);\n\n    this.name = \'BarChart\'; // this.options = Object.assign({\n    //     gap: 5,\n    // }, options);\n\n    this.animationContext = {};\n  }\n\n  BarChart_createClass(BarChart, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      globalCtx.Chart.hooks.initChart.tap(this.name, function (context2d) {\n        _this.init(context2d, globalCtx);\n      });\n      globalCtx.Chart.hooks.renderChart.tap(this.name, function (context2d) {\n        _this.render(context2d, globalCtx);\n      });\n      globalCtx.Chart.hooks.afterRenderChart.tap(this.name, function (context2d) {\n        _this.afterRender(context2d, globalCtx);\n      });\n    }\n  }, {\n    key: "init",\n    value: function init(context2d, globalCtx) {\n      var _this2 = this;\n\n      var render = context2d.render.bind(context2d);\n      var renderCallback = makeRenderCallback(render);\n      globalCtx.effect(function () {\n        console.log(\'effect init linechart\');\n        var _globalCtx$globalData = globalCtx.globalData.source,\n            data = _globalCtx$globalData.data,\n            legend = _globalCtx$globalData.legend,\n            isStack = _globalCtx$globalData.stack;\n        var spanHorizontal = globalCtx.Layout.spanHorizontal;\n        var _globalCtx$Coordinate = globalCtx.Coordinate.transformMeta,\n            convertDataToCoordX = _globalCtx$Coordinate.convertDataToCoordX,\n            convertDataToCoordY = _globalCtx$Coordinate.convertDataToCoordY,\n            xFloat = _globalCtx$Coordinate.xFloat;\n        var getColor = globalCtx.theme.getColor;\n        var barWidth;\n        var gap;\n        var series_size = 0;\n        data.forEach(function (d) {\n          series_size = Math.max(d.length, series_size);\n        });\n        var legendLength = legend.filter(function (l) {\n          return !l.disabled;\n        }).length;\n        var spanHorizontalwithpadding = spanHorizontal - xFloat * 2;\n        var series_step = spanHorizontalwithpadding / series_size;\n\n        if (isStack) {\n          var barLength = series_size + series_size - 1;\n\n          if (barLength > 100) {\n            barWidth = spanHorizontalwithpadding / series_size;\n            gap = 0;\n          } else {\n            barWidth = spanHorizontalwithpadding / barLength;\n            gap = barWidth / 2;\n          }\n        } else {\n          var _barLength = series_size * legendLength + series_size - 1;\n\n          if (_barLength > 100) {\n            barWidth = spanHorizontalwithpadding / series_size / legendLength;\n            gap = 0;\n          } else {\n            barWidth = spanHorizontalwithpadding / _barLength;\n            gap = barWidth / 2;\n          }\n        }\n\n        var seriesInCoord = [];\n        var seriesMeta = [];\n        var series = data.slice();\n        var lid = 0;\n        legend.forEach(function (d, sid) {\n          var seri = series[sid].slice();\n          var theme = getColor(sid);\n          var animeArr = [];\n          var points = [];\n          seri.forEach(function (v) {\n            var dx = v[0];\n            var dy;\n            var dyraw;\n            var ref;\n\n            if (isStack) {\n              dyraw = v[3];\n              dy = v[1];\n            } else {\n              dy = dyraw = v[1];\n            }\n\n            ref = dx;\n            var x = convertDataToCoordX(ref);\n            var y = convertDataToCoordY(dy);\n            var lastY = isStack ? convertDataToCoordY(v[2]) : 0;\n            var barx = isStack ? x - gap : x - series_step / 2 + gap + barWidth * lid;\n            var p = {\n              x: barx,\n              y: y,\n              lastY: lastY\n            };\n            var lastp = {\n              x: barx,\n              y: lastY\n            };\n\n            if (!seriesMeta[ref]) {\n              seriesMeta[ref] = {\n                x: x,\n                series: []\n              };\n            }\n\n            seriesMeta[ref].series.push({\n              legend: BarChart_objectSpread({}, d),\n              p: p,\n              dx: dx,\n              dy: dyraw,\n              theme: theme,\n              lastp: lastp,\n              barWidth: barWidth\n            });\n            animeArr.push({\n              x: barx,\n              y: 0,\n              lastY: 0,\n              barWidth: barWidth\n            });\n            points.push({\n              x: barx,\n              y: y,\n              lastY: lastY,\n              barWidth: barWidth\n            });\n          });\n          seriesInCoord.push({\n            theme: theme,\n            legend: BarChart_objectSpread({}, d),\n            isStack: isStack,\n            points: points\n          });\n\n          if (!d.disabled) {\n            lid++;\n          }\n\n          if (!_this2.animationContext[d.name]) {\n            _this2.animationContext[d.name] = {\n              points: new AnimeArray({\n                startArray: animeArr,\n                duration: 550,\n                renderCallback: renderCallback,\n                callBackOnMakeUp: function callBackOnMakeUp(makeup, ratio, start) {\n                  var startx = start ? start.x : 0;\n                  console.log(ratio, startx);\n                  return makeup.map(function (p) {\n                    return {\n                      x: (p.x - startx) * ratio,\n                      y: 0,\n                      lastY: 0,\n                      barWidth: barWidth\n                    };\n                  });\n                },\n                callbackOnElement: function callbackOnElement(newState, oldState, idx, ratio, currentArray) {\n                  if (ratio === \'end\') {\n                    currentArray[idx] = BarChart_objectSpread({}, newState);\n                  } else {\n                    currentArray[idx] = {\n                      x: oldState.x + (newState.x - oldState.x) * ratio,\n                      y: oldState.y + (newState.y - oldState.y) * ratio,\n                      lastY: oldState.lastY + (newState.lastY - oldState.lastY) * ratio,\n                      barWidth: oldState.barWidth + (newState.barWidth - oldState.barWidth) * ratio\n                    };\n                  }\n                }\n              }),\n              // clipX: new AnimeNumber({\n              //     startNumber: 0,\n              //     duration: 1000,\n              //     renderCallback,\n              // }),\n              opacity: new AnimeNumber({\n                startNumber: 1,\n                duration: 250,\n                renderCallback: renderCallback\n              }) // subOpacity: new AnimeNumber({\n              //     startNumber: 1,\n              //     duration: 250,\n              //     renderCallback,\n              // }),\n\n            };\n          }\n        });\n        Object.assign(globalCtx.Chart.chartMeta, {\n          seriesInCoord: seriesInCoord,\n          seriesMeta: Object.values(seriesMeta).sort(function (a, b) {\n            return a.x - b.x;\n          })\n        });\n      });\n      effect(function () {\n        var seriesMeta = globalCtx.Chart.chartMeta.seriesMeta;\n        var _globalCtx$_mouse = globalCtx._mouse,\n            x = _globalCtx$_mouse.x,\n            y = _globalCtx$_mouse.y;\n        var _globalCtx$Layout = globalCtx.Layout,\n            top = _globalCtx$Layout.top,\n            bottom = _globalCtx$Layout.bottom,\n            seriesStep = _globalCtx$Layout.seriesStep;\n        var transformMtxRawInvert = globalCtx.Coordinate.transformMeta.transformMtxRawInvert;\n\n        if (y > bottom || y < top) {\n          globalCtx.Chart.chartMeta.focused = null;\n          return;\n        }\n\n        var vec = vec2_fromValues(x, y);\n        transformMat2d(vec, vec, transformMtxRawInvert);\n        var meta = findDataInBarSeries(vec[0], vec[1], seriesMeta, seriesStep);\n\n        if (meta) {\n          globalCtx.Chart.chartMeta.focused = meta;\n        } else {\n          globalCtx.Chart.chartMeta.focused = null;\n        }\n      });\n    }\n  }, {\n    key: "render",\n    value: function render(ctx, globalCtx) {\n      var _this3 = this;\n\n      var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;\n      seriesInCoord.forEach(function (_ref) {\n        var theme = _ref.theme,\n            legend = _ref.legend;\n        ctx.addConditionBlockBegin(function () {\n          return legend.disabled;\n        });\n        var lgname = legend.name;\n        var currentAnimeContext = _this3.animationContext[lgname];\n        ctx.save();\n        ctx.lineWidth = 1;\n        ctx.functionsCall(function (ctx) {\n          ctx.fillStyle = ctx.strokeStyle = color_string_default().to.rgb([].concat(BarChart_toConsumableArray(theme.color.slice(0, 3)), [currentAnimeContext.opacity.value]));\n          var data = currentAnimeContext.points.value;\n\n          for (var l = 0; l < data.length; l++) {\n            var p = data[l];\n            ctx.fillRect(p.x, p.lastY, p.barWidth, p.y - p.lastY);\n            ctx.strokeRect(p.x, p.lastY, p.barWidth, p.y - p.lastY);\n          }\n        });\n        ctx.restore();\n        ctx.addConditionBlockEnd();\n      });\n    }\n  }, {\n    key: "afterRender",\n    value: function afterRender(context2d, globalCtx) {\n      var _this4 = this;\n\n      globalCtx.effect(function () {\n        var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;\n        seriesInCoord.forEach(function (_ref2) {\n          var legend = _ref2.legend,\n              points = _ref2.points;\n\n          _this4.animationContext[legend.name].points.animeTo(points.slice());\n        });\n      });\n      globalCtx.effect(function () {\n        var focused = globalCtx.Chart.chartMeta.focused;\n        var legend = globalCtx.globalData.source.legend;\n        legend.filter(function (l) {\n          return !l.disabled;\n        }).forEach(function (l) {\n          var name = l.name;\n          var curr = _this4.animationContext[name];\n\n          if (focused && focused.currLegend) {\n            if (name === focused.currLegend.name) {\n              curr.opacity.animeTo(1);\n            } else {\n              curr.opacity.animeTo(0.6);\n            }\n          } else {\n            curr.opacity.animeTo(1);\n          }\n        });\n      });\n    }\n  }]);\n\n  return BarChart;\n}();\n\n/* harmony default export */ const chart_BarChart = (BarChart);\n;// CONCATENATED MODULE: ./src/plugins/chart/PieChart.js\nfunction PieChart_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction PieChart_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { PieChart_ownKeys(Object(source), true).forEach(function (key) { PieChart_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { PieChart_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction PieChart_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction PieChart_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction PieChart_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction PieChart_createClass(Constructor, protoProps, staticProps) { if (protoProps) PieChart_defineProperties(Constructor.prototype, protoProps); if (staticProps) PieChart_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\nvar PieChart = /*#__PURE__*/function () {\n  function PieChart() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    PieChart_classCallCheck(this, PieChart);\n\n    this.name = "PieChart";\n    this.options = options;\n    this.animationContext = {};\n  }\n\n  PieChart_createClass(PieChart, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      globalCtx.Chart.hooks.initChart.tap(this.name, function (context2d) {\n        _this.init(context2d, globalCtx);\n      });\n      globalCtx.Chart.hooks.renderChart.tap(this.name, function (context2d) {\n        _this.render(context2d, globalCtx);\n      });\n      globalCtx.Chart.hooks.afterRenderChart.tap(this.name, function (context2d) {\n        _this.afterRender(context2d, globalCtx);\n      });\n    }\n  }, {\n    key: "init",\n    value: function init(context2d, globalCtx) {\n      var _this2 = this;\n\n      var render = context2d.render.bind(context2d);\n      var renderCallback = makeRenderCallback(render);\n      globalCtx.effect(function () {\n        var _globalCtx$globalData = globalCtx.globalData.source,\n            data = _globalCtx$globalData.data,\n            legend = _globalCtx$globalData.legend;\n        var _globalCtx$Layout = globalCtx.Layout,\n            spanHorizontal = _globalCtx$Layout.spanHorizontal,\n            spanVertical = _globalCtx$Layout.spanVertical;\n        var getColor = globalCtx.theme.getColor;\n        var padding = 50;\n        var radius = (Math.min(spanHorizontal, spanVertical) - padding) / 2;\n        _this2.radius = radius;\n        var sumup = 0;\n        legend.forEach(function (l, sid) {\n          if (!l.disabled) {\n            sumup += data[sid];\n          }\n        });\n        var seriesInCoord = []; // const seriesMeta = [];\n\n        var accu = 0;\n        legend.forEach(function (l, sid) {\n          var theme = getColor(sid);\n          var spanRadius = 0;\n          var p = {\n            startAngle: accu,\n            middleAngle: accu + spanRadius / 2,\n            endAngle: accu + spanRadius,\n            radius: radius,\n            spanRadius: spanRadius\n          };\n\n          if (!l.disabled) {\n            var d = data[sid];\n            var ratio = d / sumup;\n            spanRadius = ratio * Math.PI * 2;\n            Object.assign(p, {\n              middleAngle: accu + spanRadius / 2,\n              endAngle: accu + spanRadius,\n              spanRadius: spanRadius\n            });\n            accu += spanRadius;\n          }\n\n          seriesInCoord.push({\n            theme: theme,\n            radius: radius,\n            legend: l,\n            p: p\n          });\n        });\n\n        if (!_this2.animationContext.arcs) {\n          var animeArr = legend.map(function () {\n            return {\n              startAngle: 0,\n              middleAngle: 0,\n              endAngle: 0,\n              spanRadius: 0,\n              radius: radius\n            };\n          });\n          _this2.animationContext.arcs = new AnimeArray({\n            startArray: animeArr,\n            duration: 550,\n            renderCallback: renderCallback,\n            callBackOnMakeUp: function callBackOnMakeUp(makeup) {\n              return makeup.map(function () {\n                return {\n                  startAngle: 0,\n                  middleAngle: 0,\n                  endAngle: 0,\n                  radius: radius,\n                  spanRadius: 0\n                };\n              });\n            },\n            callbackOnElement: function callbackOnElement(newState, oldState, idx, ratio, currentArray) {\n              if (ratio === \'end\') {\n                currentArray[idx] = PieChart_objectSpread({}, newState);\n              } else {\n                currentArray[idx] = {\n                  startAngle: oldState.startAngle + (newState.startAngle - oldState.startAngle) * ratio,\n                  middleAngle: oldState.middleAngle + (newState.middleAngle - oldState.middleAngle) * ratio,\n                  endAngle: oldState.endAngle + (newState.endAngle - oldState.endAngle) * ratio,\n                  spanRadius: oldState.spanRadius + (newState.spanRadius - oldState.spanRadius) * ratio,\n                  radius: oldState.radius + (newState.radius - oldState.radius) * ratio\n                };\n              }\n            }\n          });\n        }\n\n        Object.assign(globalCtx.Chart.chartMeta, {\n          seriesInCoord: seriesInCoord\n        });\n      });\n      effect(function () {\n        var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;\n        var _globalCtx$_mouse = globalCtx._mouse,\n            x = _globalCtx$_mouse.x,\n            y = _globalCtx$_mouse.y;\n        var _globalCtx$Layout2 = globalCtx.Layout,\n            top = _globalCtx$Layout2.top,\n            bottom = _globalCtx$Layout2.bottom,\n            left = _globalCtx$Layout2.left,\n            right = _globalCtx$Layout2.right;\n        var transformMtxRawInvert = globalCtx.Coordinate.transformMeta.transformMtxRawInvert;\n\n        if (y > bottom || y < top || x < left || x > right) {\n          globalCtx.Chart.chartMeta.focused = null;\n          return;\n        }\n\n        var vec = vec2_fromValues(x, y);\n        transformMat2d(vec, vec, transformMtxRawInvert);\n        var x1 = vec[0];\n        var y1 = vec[1];\n        var dist = Math.hypot(x1, y1);\n\n        if (dist > _this2.radius) {\n          globalCtx.Chart.chartMeta.focused = undefined;\n          return;\n        }\n\n        var x2 = 0;\n        var y2 = 1;\n        var dot = x1 * x2 + y1 * y2;\n        var det = x1 * y2 - y1 * x2;\n        var angle = Math.atan2(dot, det);\n\n        if (angle < 0) {\n          angle = Math.PI * 2 + angle;\n        }\n\n        globalCtx.Chart.chartMeta.focused = seriesInCoord.findIndex(function (s) {\n          var _s$p = s.p,\n              startAngle = _s$p.startAngle,\n              endAngle = _s$p.endAngle;\n          return angle > startAngle && angle < endAngle;\n        });\n      });\n    }\n  }, {\n    key: "render",\n    value: function render(ctx, globalCtx) {\n      var _this3 = this;\n\n      var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;\n      var fontSize = globalCtx.theme.fontSize;\n      seriesInCoord.forEach(function (_ref, sid) {\n        var theme = _ref.theme,\n            legend = _ref.legend,\n            radius = _ref.radius;\n        var textRadius = radius + 20; // const lgname = legend.name;\n\n        ctx.addConditionBlockBegin(function () {\n          return _this3.animationContext.arcs.value[sid].spanRadius === 0;\n        });\n        ctx.functionsCall(function (ctx) {\n          ctx.save();\n          ctx.beginPath();\n          var curArc = _this3.animationContext.arcs.value[sid];\n          ctx.fillStyle = ctx.strokeStyle = color_string_default().to.rgb(theme.color);\n          ctx.moveTo(0, 0);\n          ctx.arc(0, 0, curArc.radius, curArc.startAngle, curArc.endAngle);\n          ctx.lineTo(0, 0);\n          ctx.fill();\n          ctx.beginPath();\n          ctx.moveTo(0, 0);\n          var middleAngle = curArc.middleAngle;\n          var sinr = Math.sin(middleAngle);\n          var cosr = Math.cos(middleAngle);\n          var textx = textRadius * cosr;\n          var texty = textRadius * sinr;\n          var dir = cosr / Math.abs(cosr);\n          var textsx = textx + dir * 20;\n          ctx.lineTo(textx, texty);\n          ctx.lineTo(textsx, texty);\n          ctx.stroke();\n          ctx.restore();\n          ctx.textAlign = dir > 0 ? \'left\' : \'right\';\n          ctx.fillText("".concat(legend.name), textsx + dir * 10, texty + fontSize / 2);\n          ctx.restore();\n        });\n        ctx.addConditionBlockEnd();\n      });\n    }\n  }, {\n    key: "afterRender",\n    value: function afterRender(context2d, globalCtx) {\n      var _this4 = this;\n\n      globalCtx.effect(function () {\n        var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;\n\n        _this4.animationContext.arcs.animeTo(seriesInCoord.map(function (s) {\n          return (0,lodash.clone)(s.p);\n        }));\n      });\n      globalCtx.effect(function () {\n        var focused = globalCtx.Chart.chartMeta.focused;\n        var legend = globalCtx.globalData.source.legend;\n        var seriesInCoord = globalCtx.Chart.chartMeta.seriesInCoord;\n        var ps = seriesInCoord.map(function (s) {\n          return (0,lodash.clone)(s.p);\n        });\n        legend.forEach(function (l, lid) {\n          if (focused === lid) {\n            ps[lid].radius = _this4.radius * 1.15;\n          } else {\n            ps[lid].radius = _this4.radius;\n          }\n        });\n\n        _this4.animationContext.arcs.animeTo(ps);\n      });\n    }\n  }]);\n\n  return PieChart;\n}();\n\n/* harmony default export */ const chart_PieChart = (PieChart);\n;// CONCATENATED MODULE: ./src/plugins/overlayer/LineIndicator.js\nfunction LineIndicator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction LineIndicator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction LineIndicator_createClass(Constructor, protoProps, staticProps) { if (protoProps) LineIndicator_defineProperties(Constructor.prototype, protoProps); if (staticProps) LineIndicator_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nfunction getDefaultFloatContent(container) {\n  var element = document.createElement(\'div\');\n  element.setAttribute(\'style\', "\\n        position:absolute;\\n        left:0;\\n        top:0;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        color: #fff;\\n        font-size: .8em;\\n        z-index: 999;\\n        background: rgba(0, 0, 0, 0.6);\\n        pointer-events: none;\\n    ");\n  var title = document.createElement(\'p\');\n  element.appendChild(title);\n  title.setAttribute(\'style\', "\\n     text-align: center;\\n    margin: 0;\\n    line-height: 1.5em;");\n  element.style.display = \'none\';\n  var tablewrapper = document.createElement(\'table\');\n  tablewrapper.setAttribute(\'style\', "\\n        color: #fff;\\n        font-size: 1em;\\n    ");\n\n  function createtr(legend, color, data) {\n    var tr = document.createElement(\'tr\');\n    var td1 = document.createElement(\'td\');\n    td1.setAttribute(\'style\', \'padding: 2px 4px;\');\n    var colorspan = document.createElement(\'span\');\n    colorspan.setAttribute(\'style\', "\\n            display:inline-block;\\n            width:.8em;\\n            height:.8em;\\n            border-radius:100%;\\n            margin-right:.5em;\\n            background:".concat(color, ";"));\n    td1.appendChild(colorspan);\n    var titlespan = document.createElement(\'span\');\n    titlespan.innerText = legend;\n    td1.appendChild(titlespan);\n    var td2 = document.createElement(\'td\');\n    var dataspan = document.createElement(\'span\');\n    dataspan.innerText = data;\n    td2.appendChild(dataspan);\n    tr.appendChild(td1);\n    tr.appendChild(td2);\n    tr.colorspan = colorspan;\n    tr.titlespan = titlespan;\n    tr.dataspan = dataspan;\n    return tr;\n  }\n\n  function editTr(tr, legend, color, data) {\n    tr.style.display = \'table-row\';\n    tr.colorspan.style.background = color;\n    tr.titlespan.innerText = legend;\n    tr.dataspan.innerText = data;\n  }\n\n  element.appendChild(title);\n  element.appendChild(tablewrapper);\n  container.appendChild(element);\n  var trBuffer = [];\n  return function (meta) {\n    element.style.display = \'block\';\n\n    if (!meta.display) {\n      element.style.display = \'none\';\n    } else {\n      title.innerText = meta.xDimension;\n      element.style.display = \'block\';\n      element.style.transform = "translate(".concat(meta.x, "px, ").concat(meta.y, "px)");\n\n      for (var idx in meta.series) {\n        var s = meta.series[idx];\n\n        if (trBuffer[idx]) {\n          editTr(trBuffer[idx], s.name, s.color, s.data);\n        } else {\n          var trelem = createtr(s.name, s.color, s.data);\n          trBuffer[idx] = trelem;\n          tablewrapper.appendChild(trelem);\n        }\n      }\n\n      var span = trBuffer.length - meta.series;\n\n      if (span > 0) {\n        trBuffer.slice(meta.series.length).forEach(function (e) {\n          e.style.display = \'none\';\n        });\n      }\n    }\n  };\n}\n\nvar LineIndicator = /*#__PURE__*/function () {\n  function LineIndicator() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    LineIndicator_classCallCheck(this, LineIndicator);\n\n    this.name = \'LineIndicator\';\n    this.overlayerAnimeCache = {};\n    this.options = Object.assign({\n      bar: false\n    }, options);\n  }\n\n  LineIndicator_createClass(LineIndicator, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      globalCtx.Overlayer.hooks.initOverlayer.tap(this.name, function (container, context2d) {\n        _this.floatContentCallback = _this.options.callback || getDefaultFloatContent(container);\n\n        _this.init(container, context2d, globalCtx);\n      });\n      globalCtx.Overlayer.hooks.renderOverLayer.tap(this.name, function (context2d) {\n        _this.render(context2d, globalCtx);\n      });\n    }\n  }, {\n    key: "init",\n    value: function init(container, ctx, globalCtx) {\n      var _this2 = this;\n\n      var render = ctx.render.bind(ctx);\n      var _globalCtx$globalData = globalCtx.globalData.sourceMeta,\n          xMeta = _globalCtx$globalData.xMeta,\n          yMeta = _globalCtx$globalData.yMeta;\n      globalCtx.effect(function () {\n        var cache = _this2.overlayerAnimeCache;\n        var focused = globalCtx.Chart.chartMeta.focused;\n        var sv = globalCtx.Layout.spanVertical;\n        cache.spanVertical = sv;\n\n        if (!focused) {\n          cache.x = null;\n          _this2.floatContentCallback && _this2.floatContentCallback({\n            display: false\n          });\n        } else {\n          var belong = focused.belong;\n          var _globalCtx$_mouse = globalCtx._mouse,\n              x = _globalCtx$_mouse.x,\n              y = _globalCtx$_mouse.y; // console.log(focused.mouse.x, focused.mouse.y)\n\n          _this2.floatContentCallback && _this2.floatContentCallback({\n            display: true,\n            x: x,\n            y: y,\n            xDimension: xMeta.formatter(belong.series[0].dx),\n            series: belong.series.filter(function (s) {\n              return !s.legend.disabled;\n            }).map(function (_ref) {\n              var legend = _ref.legend,\n                  dy = _ref.dy,\n                  theme = _ref.theme;\n              return {\n                name: legend.name,\n                color: color_string_default().to.rgb(theme.color),\n                data: yMeta.formatter(dy),\n                rawData: dy\n              };\n            })\n          });\n          cache.x = focused.belong.x;\n        }\n\n        render();\n      });\n    }\n  }, {\n    key: "render",\n    value: function render(ctx, globalCtx) {\n      var _this3 = this;\n\n      var bar = this.options.bar;\n      var _globalCtx$Layout = globalCtx.Layout,\n          seriesStep = _globalCtx$Layout.seriesStep,\n          spanVertical = _globalCtx$Layout.spanVertical;\n      ctx.addConditionBlockBegin(function () {\n        return !_this3.overlayerAnimeCache.x;\n      });\n      ctx.lineWidth = 2;\n      ctx.save();\n      ctx.beginPath();\n      ctx.functionsCall(function (ctx) {\n        if (bar) {\n          ctx.fillStyle = \'rgba(233, 233, 233, 0.4)\';\n          ctx.fillRect(_this3.overlayerAnimeCache.x - seriesStep / 2, 0, seriesStep, spanVertical);\n        } else {\n          ctx.moveTo(_this3.overlayerAnimeCache.x, 0);\n          ctx.lineTo(_this3.overlayerAnimeCache.x, _this3.overlayerAnimeCache.spanVertical);\n        }\n      });\n      ctx.strokeStyle = \'rgb(238, 238, 238)\';\n      ctx.stroke();\n      ctx.restore();\n      ctx.addConditionBlockEnd();\n    }\n  }]);\n\n  return LineIndicator;\n}();\n\n/* harmony default export */ const overlayer_LineIndicator = (LineIndicator);\n;// CONCATENATED MODULE: ./src/plugins/overlayer/Legend.js\nfunction Legend_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Legend_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Legend_createClass(Constructor, protoProps, staticProps) { if (protoProps) Legend_defineProperties(Constructor.prototype, protoProps); if (staticProps) Legend_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nfunction getDefaultLegendContent(container, disableselect) {\n  var element = document.createElement(\'div\');\n  element.setAttribute(\'style\', "\\n        z-index: 1;\\n        max-height: 35%;\\n        overflow-y: scroll;\\n        line-height: 1em;\\n        padding: 5px 20px;\\n    ");\n  var focused;\n\n  function createLegendElem(meta, legendMeta) {\n    var elem = document.createElement(\'div\');\n    elem.setAttribute(\'style\', "\\n            white-space: nowrap;\\n            cursor: pointer;\\n            user-select: none;\\n            font-size: .8em;\\n            line-height: 1em;\\n            display: inline-block;\\n            padding: 0 .5em;\\n        ");\n    elem.setAttribute(\'active\', meta.legend.disabled);\n    var span = document.createElement(\'span\');\n    span.setAttribute(\'style\', "\\n            display:inline-block;\\n            width:.5em;\\n            height:.5em;\\n            border-radius:100%;\\n            margin-right: .1em;\\n            vertical-align: middle;\\n            background: ".concat(meta.color[meta.legend.disabled ? \'disable\' : \'enable\'], "\\n        "));\n    var name = document.createElement(\'span\');\n    name.innerText = meta.legend.name;\n    elem.appendChild(span);\n    elem.appendChild(name);\n    elem.addEventListener(\'click\', function () {\n      if (disableselect) {\n        meta.legend.disabled = !meta.legend.disabled;\n        elem.setAttribute(\'active\', meta.legend.disabled);\n        span.style.background = meta.color[meta.legend.disabled ? \'disable\' : \'enable\'];\n      } else {\n        if (focused && focused.name === meta.legend.name) {\n          legendMeta.forEach(function (l) {\n            l.legend.disabled = false;\n            elem.setAttribute(\'active\', false);\n            span.style.background = meta.color.enable;\n          });\n          focused = null;\n        } else {\n          focused = meta.legend;\n          legendMeta.forEach(function (l) {\n            l.legend.disabled = focused.name !== l.legend.name;\n            elem.setAttribute(\'active\', l.legend.disabled);\n            span.style.background = meta.color[l.legend.disabled ? \'disable\' : \'enable\'];\n          });\n        }\n      }\n    });\n    return elem;\n  }\n\n  container.appendChild(element);\n  return function (legendMeta) {\n    element.innerHTML = \'\';\n    console.log(legendMeta);\n    legendMeta.forEach(function (meta) {\n      var elem = createLegendElem(meta, legendMeta);\n      element.appendChild(elem);\n    });\n    return element;\n  };\n}\n\nvar Legend = /*#__PURE__*/function () {\n  function Legend() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    Legend_classCallCheck(this, Legend);\n\n    this.name = \'LegendPlugin\';\n    this.options = options;\n  }\n\n  Legend_createClass(Legend, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      globalCtx.hooks.beforeInitGlobalLayout.tap(this.name, function (container, layoutContext) {\n        _this.legendContentCallback = _this.options.callback || getDefaultLegendContent(container, _this.options.disableselect);\n\n        _this.init(container, globalCtx, layoutContext);\n      }); // globalCtx.Overlayer.hooks.initOverlayer.tap(this.name, container => {\n      //     this.init(container, globalCtx);\n      // });\n    }\n  }, {\n    key: "init",\n    value: function init(container, globalCtx, layoutContext) {\n      var _this2 = this;\n\n      globalCtx.effect(function () {\n        var legend = globalCtx.globalData.source.legend;\n        var getColor = globalCtx.theme.getColor;\n        var legendMeta = legend.map(function (l, idx) {\n          return {\n            legend: l,\n            color: {\n              enable: color_string_default().to.rgb(getColor(idx).color),\n              disable: color_string_default().to.rgb(getColor(idx).disabledColor)\n            }\n          };\n        });\n\n        var elem = _this2.legendContentCallback && _this2.legendContentCallback(legendMeta);\n\n        layoutContext.legendWrapper = elem;\n      });\n    }\n  }]);\n\n  return Legend;\n}();\n\n/* harmony default export */ const overlayer_Legend = (Legend);\n// EXTERNAL MODULE: ./node_modules/tapable/lib/index.js\nvar lib = __webpack_require__(991);\n;// CONCATENATED MODULE: ./src/schedule/index.js\nfunction schedule_toConsumableArray(arr) { return schedule_arrayWithoutHoles(arr) || schedule_iterableToArray(arr) || schedule_unsupportedIterableToArray(arr) || schedule_nonIterableSpread(); }\n\nfunction schedule_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction schedule_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return schedule_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return schedule_arrayLikeToArray(o, minLen); }\n\nfunction schedule_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction schedule_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return schedule_arrayLikeToArray(arr); }\n\nfunction schedule_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __DEV__ = true;\n\nfunction callWithErrorHandling(fn, instance, type, args) {\n  var res;\n\n  try {\n    res = args ? fn.apply(void 0, schedule_toConsumableArray(args)) : fn();\n  } catch (err) {// console.log(err);\n  }\n\n  return res;\n}\n\nvar RECURSION_LIMIT = 50;\nfunction initSchedule() {\n  var queue = [];\n  var postFlushCbs = []; // const p = Promise.resolve()\n\n  var isFlushing = false;\n  var isFlushPending = false; // const p = Promise.resolve();\n  // export function nextTick(fn) {\n  //   return fn ? p.then(fn) : p\n  // }\n  // 绘图用到的是 requestAnimationFrame\n\n  function nextTick(fn) {\n    return fn ? requestAnimationFrame(function () {\n      fn();\n    }) : requestAnimationFrame(); // return fn ? p.then(fn) : p\n  }\n\n  function queueJob(job) {\n    if (!queue.includes(job)) {\n      queue.push(job);\n      queueFlush();\n    }\n  }\n\n  function queueFlush() {\n    if (!isFlushing && !isFlushPending) {\n      isFlushPending = true;\n      nextTick(flushJobs);\n    }\n  }\n\n  function flushPostFlushCbs(seen) {\n    if (postFlushCbs.length) {\n      var cbs = schedule_toConsumableArray(new Set(postFlushCbs));\n\n      postFlushCbs.length = 0;\n\n      if (__DEV__) {\n        seen = seen || new Map();\n      }\n\n      for (var i = 0; i < cbs.length; i++) {\n        if (__DEV__) {\n          checkRecursiveUpdates(seen, cbs[i]);\n        }\n\n        cbs[i]();\n      }\n    }\n  }\n\n  var getId = function getId(job) {\n    return job.id == null ? Infinity : job.id;\n  };\n\n  function flushJobs(seen) {\n    isFlushPending = false;\n    isFlushing = true;\n    var job;\n\n    if (__DEV__) {\n      seen = seen || new Map();\n    } // Sort queue before flush.\n    // This ensures that:\n    // 1. Components are updated from parent to child. (because parent is always\n    //    created before the child so its render effect will have smaller\n    //    priority number)\n    // 2. If a component is unmounted during a parent component\'s update,\n    //    its update can be skipped.\n    // Jobs can never be null before flush starts, since they are only invalidated\n    // during execution of another flushed job.\n\n\n    queue.sort(function (a, b) {\n      return getId(a) - getId(b);\n    });\n\n    while ((job = queue.shift()) !== undefined) {\n      if (job === null) {\n        continue;\n      }\n\n      if (__DEV__) {\n        checkRecursiveUpdates(seen, job);\n      }\n\n      callWithErrorHandling(job, null, \'SCHEDULER\');\n    }\n\n    flushPostFlushCbs(seen);\n    isFlushing = false; // some postFlushCb queued jobs!\n    // keep flushing until it drains.\n\n    if (queue.length || postFlushCbs.length) {\n      flushJobs(seen);\n    }\n  }\n\n  function checkRecursiveUpdates(seen, fn) {\n    if (!seen.has(fn)) {\n      seen.set(fn, 1);\n    } else {\n      var count = seen.get(fn);\n\n      if (count > RECURSION_LIMIT) {\n        throw new Error(\'Maximum recursive updates exceeded. \' + "You may have code that is mutating state in your component\'s " + \'render function or updated hook or watcher source function.\');\n      } else {\n        seen.set(fn, count + 1);\n      }\n    }\n  }\n\n  return {\n    queueJob: queueJob,\n    nextTick: nextTick\n  };\n}\n;// CONCATENATED MODULE: ./src/context/layers/data.js\nfunction data_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction data_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction data_createClass(Constructor, protoProps, staticProps) { if (protoProps) data_defineProperties(Constructor.prototype, protoProps); if (staticProps) data_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar Data = /*#__PURE__*/function () {\n  function Data() {\n    data_classCallCheck(this, Data);\n\n    this.source = reactive({});\n    this.sourceMeta = reactive({});\n    this.hooks = Object.freeze({\n      initData: new lib.SyncHook([\'dataOptions\', \'source\', \'sourceMeta\']),\n      // afterInitData: new SyncHook(),\n      resetData: new lib.SyncHook([\'dataOptions\', \'source\', \'sourceMeta\'])\n    });\n  }\n\n  data_createClass(Data, [{\n    key: "init",\n    value: function init(dataOptions) {\n      this.hooks.initData.call(dataOptions, this.source, this.sourceMeta); // this.hooks.afterInitData.call();\n    }\n  }, {\n    key: "resetData",\n    value: function resetData(dataOptions) {\n      this.hooks.resetData.call(dataOptions, this.source, this.sourceMeta);\n    }\n  }]);\n\n  return Data;\n}();\n\n/* harmony default export */ const data = (Data);\n;// CONCATENATED MODULE: ./src/context/layers/base.js\nfunction base_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction base_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction base_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar BaseContext = /*#__PURE__*/function () {\n  function BaseContext() {\n    base_classCallCheck(this, BaseContext);\n  }\n\n  base_createClass(BaseContext, [{\n    key: "context2d",\n    get: function get() {\n      return this._context2d;\n    },\n    set: function set(val) {\n      if (this._context2d) {\n        throw \'you cannot replace context2d!\';\n      }\n\n      this._context2d = val;\n    }\n  }, {\n    key: "canvasElm",\n    get: function get() {\n      return this._canvasElm;\n    },\n    set: function set(val) {\n      if (this._canvasElm) {\n        throw \'you cannot replace canvasElm!\';\n      }\n\n      this._canvasElm = val;\n    }\n  }, {\n    key: "canvasCacheImage",\n    get: function get() {\n      var width = this._canvasElm.width;\n      var height = this._canvasElm.height;\n      return this.context2d.createImageData(width, height);\n    }\n  }]);\n\n  return BaseContext;\n}();\n\n/* harmony default export */ const base = (BaseContext);\n;// CONCATENATED MODULE: ./src/context/layers/coordinate.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction coordinate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction coordinate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction coordinate_createClass(Constructor, protoProps, staticProps) { if (protoProps) coordinate_defineProperties(Constructor.prototype, protoProps); if (staticProps) coordinate_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\nvar Coordinate = /*#__PURE__*/function (_BaseContext) {\n  _inherits(Coordinate, _BaseContext);\n\n  var _super = _createSuper(Coordinate);\n\n  function Coordinate() {\n    var _this;\n\n    coordinate_classCallCheck(this, Coordinate);\n\n    _this = _super.call(this);\n    _this.hooks = {\n      initCoord: new lib.SyncHook([\'context2d\']),\n      renderCoord: new lib.SyncHook([\'context2d\']),\n      afterRenderChart: new lib.SyncHook([\'context2d\'])\n    };\n    _this.transformMeta = reactive({\n      originVec: vec2_create(),\n      borderVec: vec2_create(),\n      transformMtxRaw: create(),\n      transformMtxRawInvert: create(),\n      transformMtx: create(),\n      transformMtxInvert: create(),\n      convertDataToCoordX: undefined,\n      convertDataToCoordY: undefined,\n      x_scaler: 1,\n      xFloat: 0,\n      formatFunc: {\n        xFormat: function xFormat(x) {\n          return x;\n        }\n      }\n    });\n    return _this;\n  }\n\n  coordinate_createClass(Coordinate, [{\n    key: "init",\n    value: function init() {\n      this.hooks.initCoord.call(this.context2d);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      this.hooks.renderCoord.call(this.context2d);\n    }\n  }, {\n    key: "afterRender",\n    value: function afterRender() {\n      this.hooks.afterRenderChart.call(this.context2d);\n    }\n  }]);\n\n  return Coordinate;\n}(base);\n\n/* harmony default export */ const coordinate = (Coordinate);\n;// CONCATENATED MODULE: ./src/context/layers/chart.js\nfunction chart_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { chart_typeof = function _typeof(obj) { return typeof obj; }; } else { chart_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return chart_typeof(obj); }\n\nfunction chart_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction chart_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction chart_createClass(Constructor, protoProps, staticProps) { if (protoProps) chart_defineProperties(Constructor.prototype, protoProps); if (staticProps) chart_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction chart_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) chart_setPrototypeOf(subClass, superClass); }\n\nfunction chart_setPrototypeOf(o, p) { chart_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return chart_setPrototypeOf(o, p); }\n\nfunction chart_createSuper(Derived) { var hasNativeReflectConstruct = chart_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = chart_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = chart_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return chart_possibleConstructorReturn(this, result); }; }\n\nfunction chart_possibleConstructorReturn(self, call) { if (call && (chart_typeof(call) === "object" || typeof call === "function")) { return call; } return chart_assertThisInitialized(self); }\n\nfunction chart_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction chart_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction chart_getPrototypeOf(o) { chart_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return chart_getPrototypeOf(o); }\n\n\n\n\n\nvar Chart = /*#__PURE__*/function (_BaseContext) {\n  chart_inherits(Chart, _BaseContext);\n\n  var _super = chart_createSuper(Chart);\n\n  function Chart() {\n    var _this;\n\n    chart_classCallCheck(this, Chart);\n\n    _this = _super.call(this);\n    _this.hooks = {\n      initChart: new lib.SyncHook([\'context2d\']),\n      renderChart: new lib.SyncHook([\'context2d\']),\n      afterRenderChart: new lib.SyncHook([\'context2d\'])\n    };\n    _this.chartMeta = reactive({\n      seriesInCoord: [],\n      // legend 维度区分的信息   数据经过坐标系变换后的位置\n      seriesMeta: [],\n      // x 维度纵向的信息   元数据信息\n      // legendXInCoord:     {}, // 以x为索引的数据 x: [series1, series2, ... ]\n      // xSeries:            [], // x索引列表\n      // indexMapping:       [], // legend过滤后序列图\n      focused: null // 当前聚焦数据集\n      // lastFocused:        undefined, // 上一次聚焦数据集\n      // focusSource:        undefined,\n\n    });\n    return _this;\n  }\n\n  chart_createClass(Chart, [{\n    key: "init",\n    value: function init() {\n      this.hooks.initChart.call(this.context2d);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      this.hooks.renderChart.call(this.context2d);\n    }\n  }, {\n    key: "afterRender",\n    value: function afterRender() {\n      this.hooks.afterRenderChart.call(this.context2d);\n    }\n  }]);\n\n  return Chart;\n}(base);\n\n/* harmony default export */ const chart = (Chart);\n;// CONCATENATED MODULE: ./src/context/layers/overlayer.js\nfunction overlayer_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { overlayer_typeof = function _typeof(obj) { return typeof obj; }; } else { overlayer_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return overlayer_typeof(obj); }\n\nfunction overlayer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction overlayer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction overlayer_createClass(Constructor, protoProps, staticProps) { if (protoProps) overlayer_defineProperties(Constructor.prototype, protoProps); if (staticProps) overlayer_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction overlayer_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) overlayer_setPrototypeOf(subClass, superClass); }\n\nfunction overlayer_setPrototypeOf(o, p) { overlayer_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return overlayer_setPrototypeOf(o, p); }\n\nfunction overlayer_createSuper(Derived) { var hasNativeReflectConstruct = overlayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = overlayer_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = overlayer_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return overlayer_possibleConstructorReturn(this, result); }; }\n\nfunction overlayer_possibleConstructorReturn(self, call) { if (call && (overlayer_typeof(call) === "object" || typeof call === "function")) { return call; } return overlayer_assertThisInitialized(self); }\n\nfunction overlayer_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction overlayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction overlayer_getPrototypeOf(o) { overlayer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return overlayer_getPrototypeOf(o); }\n\n\n\n\n\nvar Overlayer = /*#__PURE__*/function (_BaseContext) {\n  overlayer_inherits(Overlayer, _BaseContext);\n\n  var _super = overlayer_createSuper(Overlayer);\n\n  function Overlayer() {\n    var _this;\n\n    overlayer_classCallCheck(this, Overlayer);\n\n    _this = _super.call(this);\n    _this.hooks = {\n      registOverlayer: new lib.SyncHook(),\n      initOverlayer: new lib.SyncHook([\'container\', \'context2d\']),\n      renderOverLayer: new lib.SyncHook([\'context2d\']),\n      afterRenderChart: new lib.SyncHook([\'context2d\'])\n    };\n    _this.overLayerMeta = reactive({\n      focus: undefined // 聚焦的类别\n\n    });\n    _this.registedRenderFunction = [];\n    _this.initFunctionCache = [];\n    _this.tempCache = {};\n    return _this;\n  }\n\n  overlayer_createClass(Overlayer, [{\n    key: "registElement",\n    value: function registElement() {\n      this.hooks.registOverlayer.call();\n    }\n  }, {\n    key: "init",\n    value: function init(container) {\n      this.hooks.initOverlayer.call(container, this.context2d);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      this.hooks.renderOverLayer.call(this.context2d);\n    }\n  }, {\n    key: "afterRender",\n    value: function afterRender() {\n      this.hooks.afterRenderChart.call(this.context2d);\n    }\n  }]);\n\n  return Overlayer;\n}(base);\n\n/* harmony default export */ const overlayer = (Overlayer);\n;// CONCATENATED MODULE: ./src/context-api/context-proxy.js\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = context_proxy_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction context_proxy_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return context_proxy_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return context_proxy_arrayLikeToArray(o, minLen); }\n\nfunction context_proxy_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction context_proxy_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction context_proxy_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction context_proxy_createClass(Constructor, protoProps, staticProps) { if (protoProps) context_proxy_defineProperties(Constructor.prototype, protoProps); if (staticProps) context_proxy_defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n  Created by Mike Chambers\n  Copyright 2018\n\n  Released under an MIT License\n\n  https://github.com/mikechambers\n\n  ES6 JavaScript module and class that proxies,\n  captures and batches all canvas context 2d api\n  calls.\n\n  This can be useful if you want to transform the\n  output and calls into another format such as SVG.\n\n  To use, just pass the context from the canvas into\n  the constructor and make context calls on it as normal.\n  The second argument to the construtor is a boolean which\n  specifies whether the calls will be executed immediately\n  or batched until render is call (default is true)\n\n  calls will be batched until you call render.\n\n  import Context2D from "./context_proxy.js"\n  let ctx = canvas.getContext("2d);\n  let context = new Context2D(ctx, true);\n\n  context.beginPath();\n  context.arc(100, 100, 50, 0, Math.PI * 2);\n  context.stroke();\n\n  context.render();\n\n  You can also set:\n\n  context.debug = true;\n\n  to get some runtime\n  information sent to the // console (currently just number\n  of calls / commands about to be run, as well as time it\n  took to make the calls).\n\n  Note there is room for performance optimizations, but I\n  wanted to share this as a general template in case\n  anyone else found it useful.\n\n  Please post any suggestions, fixes in the comments\n  */\n // import Animation from \'./Animation\';\n// export default class Context extends Animation {\n\nCanvasRenderingContext2D.prototype.wrapText = function (text, x, y, maxWidth, lineHeight) {\n  if (typeof text !== \'string\' || typeof x !== \'number\' || typeof y !== \'number\') {\n    return;\n  }\n\n  var context = this;\n  var canvas = context.canvas;\n\n  if (typeof maxWidth === \'undefined\') {\n    maxWidth = canvas && canvas.width || 300;\n  }\n\n  if (typeof lineHeight === \'undefined\') {\n    lineHeight = 20;\n  }\n\n  var arrText = text.split(\',\');\n  var line = \'\';\n\n  for (var n = 0; n < arrText.length; n++) {\n    var testLine = (line + arrText[n]).trim();\n    var metrics = context.measureText(testLine);\n    var testWidth = metrics.width;\n\n    if (testWidth > maxWidth && n > 0) {\n      context.fillText(line, x, y);\n      line = arrText[n];\n      y += lineHeight;\n    } else {\n      line = testLine;\n    }\n  }\n\n  context.fillText(line.trim(), x, y);\n};\n\nvar Context = /*#__PURE__*/function () {\n  function Context(context) {\n    var capture = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    context_proxy_classCallCheck(this, Context);\n\n    //   super(options.animation);\n    this._context = context;\n    this._commands = [];\n    this._capture = capture;\n    this._debug = false;\n  }\n\n  context_proxy_createClass(Context, [{\n    key: "handleCommand",\n    value: function handleCommand(cmd) {\n      if (this._capture) {\n        this._commands.push(cmd);\n      } else {\n        cmd();\n      }\n    }\n  }, {\n    key: "clearCommands",\n    value: function clearCommands() {\n      this._commands = [];\n    }\n  }, {\n    key: "functionCallWithCondition",\n    value: function functionCallWithCondition(func, condition) {\n      var _this = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      func = this._context[func];\n\n      var c = function c() {\n        if (condition()) {\n          func.apply(_this._context, args);\n        }\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "functionCallWithDynamicParameter",\n    value: function functionCallWithDynamicParameter(func) {\n      var _this2 = this;\n\n      for (var _len2 = arguments.length, argus = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        argus[_key2 - 1] = arguments[_key2];\n      }\n\n      func = this._context[func];\n\n      var c = function c() {\n        var parameters = argus.map(function (arg) {\n          if ((0,lodash.isFunction)(arg)) {\n            return arg();\n          }\n\n          return arg;\n        }); // // console.log(parameters)\n\n        func.apply(_this2._context, parameters);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "functionCallWithLooping",\n    value: function functionCallWithLooping(loopTargetFunc, func) {\n      var _this3 = this;\n\n      var c = function c() {\n        var loopTarget = loopTargetFunc();\n        loopTarget.forEach(function (t, idx) {\n          func(_this3._context, loopTarget, t, idx);\n        });\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "propertySetWithDynamicParameter",\n    value: function propertySetWithDynamicParameter(property, value) {\n      var _this4 = this;\n\n      var c = function c() {\n        var v;\n\n        if ((0,lodash.isFunction)(value)) {\n          v = value();\n        }\n\n        _this4._context[property] = v;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "addConditionBlockBegin",\n    value: function addConditionBlockBegin(condition) {\n      var c = {\n        beginCondition: function beginCondition() {\n          return condition();\n        }\n      };\n      this.handleCommand(c);\n    }\n  }, {\n    key: "addConditionBlockEnd",\n    value: function addConditionBlockEnd() {\n      var c = {\n        endCondition: true\n      };\n      this.handleCommand(c);\n    }\n  }, {\n    key: "functionsCallWithDynamicParameter",\n    value: function functionsCallWithDynamicParameter(computeValues, operations) {\n      var _this5 = this;\n\n      var c = function c() {\n        var values = computeValues();\n        operations(_this5._context, values);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "functionsCall",\n    value: function functionsCall(func) {\n      var _this6 = this;\n\n      var c = function c() {\n        func(_this6._context);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // let start;\n      // if (this._debug) {\n      //     start = Date.now();\n      // }\n      var condition = false;\n\n      var _iterator = _createForOfIteratorHelper(this._commands),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var command = _step.value;\n\n          if (command.endCondition) {\n            condition = false;\n            continue;\n          }\n\n          if (command.beginCondition) {\n            condition = command.beginCondition();\n            continue;\n          }\n\n          if (condition) {\n            continue;\n          }\n\n          command();\n        } // this.clearCommands();\n        // if (this._debug) {\n        //     // console.log(`RENDER_COMPLETE : ${Date.now() - start}ms`);\n        // }\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: "onStopAnimation",\n    value: function onStopAnimation() {\n      this.clearCommands();\n    }\n  }, {\n    key: "debug",\n    get: function get() {\n      return this._debug;\n    },\n    set: function set(value) {\n      this._debug = value;\n    }\n  }, {\n    key: "canvas",\n    get: function get() {\n      return this._context.canvas;\n    }\n    /** ***** currentTransform*******/\n\n  }, {\n    key: "currentTransform",\n    get: function get() {\n      return this._context.currentTransform;\n    }\n    /** ***** direction*******/\n    ,\n    set: function set(value) {\n      var _this7 = this;\n\n      var c = function c() {\n        _this7._context.currentTransform = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "direction",\n    get: function get() {\n      return this._context.direction;\n    }\n    /** ***** fillStyle*******/\n    ,\n    set: function set(value) {\n      var _this8 = this;\n\n      var c = function c() {\n        _this8._context.direction = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "fillStyle",\n    get: function get() {\n      return this._context.fillStyle;\n    }\n    /** ***** filter*******/\n    ,\n    set: function set(value) {\n      var _this9 = this;\n\n      var c = function c() {\n        _this9._context.fillStyle = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "filter",\n    get: function get() {\n      return this._context.filter;\n    }\n    /** ***** font*******/\n    ,\n    set: function set(value) {\n      var _this10 = this;\n\n      var c = function c() {\n        _this10._context.filter = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "font",\n    get: function get() {\n      return this._context.font;\n    }\n    /** ***** globalAlpha*******/\n    ,\n    set: function set(value) {\n      var _this11 = this;\n\n      var c = function c() {\n        _this11._context.font = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "globalAlpha",\n    get: function get() {\n      return this._context.globalAlpha;\n    }\n    /** ***** globalCompositeOperation*******/\n    ,\n    set: function set(value) {\n      var _this12 = this;\n\n      var c = function c() {\n        _this12._context.globalAlpha = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "globalCompositeOperation",\n    get: function get() {\n      return this._context.globalCompositeOperation;\n    }\n    /** ***** imageSmoothingEnabled*******/\n    ,\n    set: function set(value) {\n      var _this13 = this;\n\n      var c = function c() {\n        _this13._context.globalCompositeOperation = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "imageSmoothingEnabled",\n    get: function get() {\n      return this._context.imageSmoothingEnabled;\n    }\n    /** ***** imageSmoothingQuality*******/\n    ,\n    set: function set(value) {\n      var _this14 = this;\n\n      var c = function c() {\n        _this14._context.imageSmoothingEnabled = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "imageSmoothingQuality",\n    get: function get() {\n      return this._context.imageSmoothingQuality;\n    }\n    /** ***** lineCap*******/\n    ,\n    set: function set(value) {\n      var _this15 = this;\n\n      var c = function c() {\n        _this15._context.imageSmoothingQuality = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "lineCap",\n    get: function get() {\n      return this._context.lineCap;\n    }\n    /** ***** lineDashOffset*******/\n    ,\n    set: function set(value) {\n      var _this16 = this;\n\n      var c = function c() {\n        _this16._context.lineCap = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "lineDashOffset",\n    get: function get() {\n      return this._context.lineDashOffset;\n    }\n    /** ***** lineJoin*******/\n    ,\n    set: function set(value) {\n      var _this17 = this;\n\n      var c = function c() {\n        _this17._context.lineDashOffset = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "lineJoin",\n    get: function get() {\n      return this._context.lineJoin;\n    }\n    /** ***** lineWidth*******/\n    ,\n    set: function set(value) {\n      var _this18 = this;\n\n      var c = function c() {\n        _this18._context.lineJoin = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "lineWidth",\n    get: function get() {\n      return this._context.lineWidth;\n    }\n    /** ***** miterLimit*******/\n    ,\n    set: function set(value) {\n      var _this19 = this;\n\n      var c = function c() {\n        _this19._context.lineWidth = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "miterLimit",\n    get: function get() {\n      return this._context.miterLimit;\n    }\n    /** ***** shadowBlur*******/\n    ,\n    set: function set(value) {\n      var _this20 = this;\n\n      var c = function c() {\n        _this20._context.miterLimit = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "shadowBlur",\n    get: function get() {\n      return this._context.shadowBlur;\n    }\n    /** ***** shadowColor*******/\n    ,\n    set: function set(value) {\n      var _this21 = this;\n\n      var c = function c() {\n        _this21._context.shadowBlur = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "shadowColor",\n    get: function get() {\n      return this._context.shadowColor;\n    }\n    /** ***** shadowOffsetX*******/\n    ,\n    set: function set(value) {\n      var _this22 = this;\n\n      var c = function c() {\n        _this22._context.shadowColor = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "shadowOffsetX",\n    get: function get() {\n      return this._context.shadowOffsetX;\n    }\n    /** ***** shadowOffsetY*******/\n    ,\n    set: function set(value) {\n      var _this23 = this;\n\n      var c = function c() {\n        _this23._context.shadowOffsetX = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "shadowOffsetY",\n    get: function get() {\n      return this._context.shadowOffsetY;\n    },\n    set: function set(value) {\n      var _this24 = this;\n\n      var c = function c() {\n        _this24._context.shadowOffsetY = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "strokeStyle",\n    get: function get() {\n      return this._context.strokeStyle;\n    }\n    /** ***** textAlign*******/\n    ,\n    set: function set(value) {\n      var _this25 = this;\n\n      var c = function c() {\n        _this25._context.strokeStyle = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "textAlign",\n    get: function get() {\n      return this._context.textAlign;\n    }\n    /** ***** textBaseline*******/\n    ,\n    set: function set(value) {\n      var _this26 = this;\n\n      var c = function c() {\n        _this26._context.textAlign = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "textBaseline",\n    get: function get() {\n      return this._context.textBaseline;\n    },\n    set: function set(value) {\n      var _this27 = this;\n\n      var c = function c() {\n        _this27._context.textBaseline = value;\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "addHitRegion",\n    value: function addHitRegion() {\n      var _this28 = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var c = function c() {\n        var _this28$_context;\n\n        (_this28$_context = _this28._context).addHitRegion.apply(_this28$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "arc",\n    value: function arc() {\n      var _this29 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      var c = function c() {\n        var _this29$_context;\n\n        (_this29$_context = _this29._context).arc.apply(_this29$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "arcTo",\n    value: function arcTo() {\n      var _this30 = this;\n\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      var c = function c() {\n        var _this30$_context;\n\n        (_this30$_context = _this30._context).arcTo.apply(_this30$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "beginPath",\n    value: function beginPath() {\n      var _this31 = this;\n\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      var c = function c() {\n        var _this31$_context;\n\n        (_this31$_context = _this31._context).beginPath.apply(_this31$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "bezierCurveTo",\n    value: function bezierCurveTo() {\n      var _this32 = this;\n\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      var c = function c() {\n        var _this32$_context;\n\n        (_this32$_context = _this32._context).bezierCurveTo.apply(_this32$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "clearHitRegions",\n    value: function clearHitRegions() {\n      var _this33 = this;\n\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n\n      var c = function c() {\n        var _this33$_context;\n\n        (_this33$_context = _this33._context).clearHitRegions.apply(_this33$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "clearRect",\n    value: function clearRect() {\n      var _this34 = this;\n\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n\n      var c = function c() {\n        var _this34$_context;\n\n        (_this34$_context = _this34._context).clearRect.apply(_this34$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "clip",\n    value: function clip() {\n      var _this35 = this;\n\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n\n      var c = function c() {\n        var _this35$_context;\n\n        (_this35$_context = _this35._context).clip.apply(_this35$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "closePath",\n    value: function closePath() {\n      var _this36 = this;\n\n      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n        args[_key11] = arguments[_key11];\n      }\n\n      var c = function c() {\n        var _this36$_context;\n\n        (_this36$_context = _this36._context).closePath.apply(_this36$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "createImageData",\n    value: function createImageData() {\n      var _this37 = this;\n\n      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n        args[_key12] = arguments[_key12];\n      }\n\n      var c = function c() {\n        var _this37$_context;\n\n        (_this37$_context = _this37._context).createImageData.apply(_this37$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "createLinearGradient",\n    value: function createLinearGradient() {\n      var _this38 = this;\n\n      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n        args[_key13] = arguments[_key13];\n      }\n\n      var c = function c() {\n        var _this38$_context;\n\n        (_this38$_context = _this38._context).createLinearGradient.apply(_this38$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "createPattern",\n    value: function createPattern() {\n      var _this39 = this;\n\n      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n        args[_key14] = arguments[_key14];\n      }\n\n      var c = function c() {\n        var _this39$_context;\n\n        (_this39$_context = _this39._context).createPattern.apply(_this39$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "createRadialGradient",\n    value: function createRadialGradient() {\n      var _this40 = this;\n\n      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n        args[_key15] = arguments[_key15];\n      }\n\n      var c = function c() {\n        var _this40$_context;\n\n        (_this40$_context = _this40._context).createRadialGradient.apply(_this40$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "drawFocusIfNeeded",\n    value: function drawFocusIfNeeded() {\n      var _this41 = this;\n\n      for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n        args[_key16] = arguments[_key16];\n      }\n\n      var c = function c() {\n        var _this41$_context;\n\n        (_this41$_context = _this41._context).drawFocusIfNeeded.apply(_this41$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "drawImage",\n    value: function drawImage() {\n      var _this42 = this;\n\n      for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n        args[_key17] = arguments[_key17];\n      }\n\n      var c = function c() {\n        var _this42$_context;\n\n        (_this42$_context = _this42._context).drawImage.apply(_this42$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "drawWidgetAsOnScreen",\n    value: function drawWidgetAsOnScreen() {\n      var _this43 = this;\n\n      for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n        args[_key18] = arguments[_key18];\n      }\n\n      var c = function c() {\n        var _this43$_context;\n\n        (_this43$_context = _this43._context).drawWidgetAsOnScreen.apply(_this43$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "drawWindow",\n    value: function drawWindow() {\n      var _this44 = this;\n\n      for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {\n        args[_key19] = arguments[_key19];\n      }\n\n      var c = function c() {\n        var _this44$_context;\n\n        (_this44$_context = _this44._context).drawWindow.apply(_this44$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "ellipse",\n    value: function ellipse() {\n      var _this45 = this;\n\n      for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {\n        args[_key20] = arguments[_key20];\n      }\n\n      var c = function c() {\n        var _this45$_context;\n\n        (_this45$_context = _this45._context).ellipse.apply(_this45$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "fill",\n    value: function fill() {\n      var _this46 = this;\n\n      for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {\n        args[_key21] = arguments[_key21];\n      }\n\n      var c = function c() {\n        var _this46$_context;\n\n        (_this46$_context = _this46._context).fill.apply(_this46$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "fillRect",\n    value: function fillRect() {\n      var _this47 = this;\n\n      for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n        args[_key22] = arguments[_key22];\n      }\n\n      var c = function c() {\n        var _this47$_context;\n\n        (_this47$_context = _this47._context).fillRect.apply(_this47$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "fillText",\n    value: function fillText() {\n      var _this48 = this;\n\n      for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {\n        args[_key23] = arguments[_key23];\n      }\n\n      var c = function c() {\n        var _this48$_context;\n\n        (_this48$_context = _this48._context).fillText.apply(_this48$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "getImageData",\n    value: function getImageData() {\n      var _this49 = this;\n\n      for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n        args[_key24] = arguments[_key24];\n      }\n\n      var c = function c() {\n        var _this49$_context;\n\n        (_this49$_context = _this49._context).getImageData.apply(_this49$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "getLineDash",\n    value: function getLineDash() {\n      var _this50 = this;\n\n      for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {\n        args[_key25] = arguments[_key25];\n      }\n\n      var c = function c() {\n        var _this50$_context;\n\n        (_this50$_context = _this50._context).getLineDash.apply(_this50$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "isPointInPath",\n    value: function isPointInPath() {\n      var _this51 = this;\n\n      for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {\n        args[_key26] = arguments[_key26];\n      }\n\n      var c = function c() {\n        var _this51$_context;\n\n        (_this51$_context = _this51._context).isPointInPath.apply(_this51$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "isPointInStroke",\n    value: function isPointInStroke() {\n      var _this52 = this;\n\n      for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {\n        args[_key27] = arguments[_key27];\n      }\n\n      var c = function c() {\n        var _this52$_context;\n\n        (_this52$_context = _this52._context).isPointInStroke.apply(_this52$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "lineTo",\n    value: function lineTo() {\n      var _this53 = this;\n\n      for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {\n        args[_key28] = arguments[_key28];\n      }\n\n      var c = function c() {\n        var _this53$_context;\n\n        (_this53$_context = _this53._context).lineTo.apply(_this53$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "wrapText",\n    value: function wrapText() {\n      var _this54 = this;\n\n      for (var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++) {\n        args[_key29] = arguments[_key29];\n      }\n\n      var c = function c() {\n        var _this54$_context;\n\n        (_this54$_context = _this54._context).wrapText.apply(_this54$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "moveTo",\n    value: function moveTo() {\n      var _this55 = this;\n\n      for (var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++) {\n        args[_key30] = arguments[_key30];\n      }\n\n      var c = function c() {\n        var _this55$_context;\n\n        (_this55$_context = _this55._context).moveTo.apply(_this55$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "putImageData",\n    value: function putImageData() {\n      var _this56 = this;\n\n      for (var _len31 = arguments.length, args = new Array(_len31), _key31 = 0; _key31 < _len31; _key31++) {\n        args[_key31] = arguments[_key31];\n      }\n\n      var c = function c() {\n        var _this56$_context;\n\n        (_this56$_context = _this56._context).putImageData.apply(_this56$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "quadraticCurveTo",\n    value: function quadraticCurveTo() {\n      var _this57 = this;\n\n      for (var _len32 = arguments.length, args = new Array(_len32), _key32 = 0; _key32 < _len32; _key32++) {\n        args[_key32] = arguments[_key32];\n      }\n\n      var c = function c() {\n        var _this57$_context;\n\n        (_this57$_context = _this57._context).quadraticCurveTo.apply(_this57$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "rect",\n    value: function rect() {\n      var _this58 = this;\n\n      for (var _len33 = arguments.length, args = new Array(_len33), _key33 = 0; _key33 < _len33; _key33++) {\n        args[_key33] = arguments[_key33];\n      }\n\n      var c = function c() {\n        var _this58$_context;\n\n        (_this58$_context = _this58._context).rect.apply(_this58$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "removeHitRegion",\n    value: function removeHitRegion() {\n      var _this59 = this;\n\n      for (var _len34 = arguments.length, args = new Array(_len34), _key34 = 0; _key34 < _len34; _key34++) {\n        args[_key34] = arguments[_key34];\n      }\n\n      var c = function c() {\n        var _this59$_context;\n\n        (_this59$_context = _this59._context).removeHitRegion.apply(_this59$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "resetTransform",\n    value: function resetTransform() {\n      var _this60 = this;\n\n      for (var _len35 = arguments.length, args = new Array(_len35), _key35 = 0; _key35 < _len35; _key35++) {\n        args[_key35] = arguments[_key35];\n      }\n\n      var c = function c() {\n        var _this60$_context;\n\n        (_this60$_context = _this60._context).resetTransform.apply(_this60$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "restore",\n    value: function restore() {\n      var _this61 = this;\n\n      for (var _len36 = arguments.length, args = new Array(_len36), _key36 = 0; _key36 < _len36; _key36++) {\n        args[_key36] = arguments[_key36];\n      }\n\n      var c = function c() {\n        var _this61$_context;\n\n        (_this61$_context = _this61._context).restore.apply(_this61$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "rotate",\n    value: function rotate() {\n      var _this62 = this;\n\n      for (var _len37 = arguments.length, args = new Array(_len37), _key37 = 0; _key37 < _len37; _key37++) {\n        args[_key37] = arguments[_key37];\n      }\n\n      var c = function c() {\n        var _this62$_context;\n\n        (_this62$_context = _this62._context).rotate.apply(_this62$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "save",\n    value: function save() {\n      var _this63 = this;\n\n      for (var _len38 = arguments.length, args = new Array(_len38), _key38 = 0; _key38 < _len38; _key38++) {\n        args[_key38] = arguments[_key38];\n      }\n\n      var c = function c() {\n        var _this63$_context;\n\n        (_this63$_context = _this63._context).save.apply(_this63$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "scale",\n    value: function scale() {\n      var _this64 = this;\n\n      for (var _len39 = arguments.length, args = new Array(_len39), _key39 = 0; _key39 < _len39; _key39++) {\n        args[_key39] = arguments[_key39];\n      }\n\n      var c = function c() {\n        var _this64$_context;\n\n        (_this64$_context = _this64._context).scale.apply(_this64$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "scrollPathIntoView",\n    value: function scrollPathIntoView() {\n      var _this65 = this;\n\n      for (var _len40 = arguments.length, args = new Array(_len40), _key40 = 0; _key40 < _len40; _key40++) {\n        args[_key40] = arguments[_key40];\n      }\n\n      var c = function c() {\n        var _this65$_context;\n\n        (_this65$_context = _this65._context).scrollPathIntoView.apply(_this65$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "setLineDash",\n    value: function setLineDash() {\n      var _this66 = this;\n\n      for (var _len41 = arguments.length, args = new Array(_len41), _key41 = 0; _key41 < _len41; _key41++) {\n        args[_key41] = arguments[_key41];\n      }\n\n      var c = function c() {\n        var _this66$_context;\n\n        (_this66$_context = _this66._context).setLineDash.apply(_this66$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "setTransform",\n    value: function setTransform() {\n      var _this67 = this;\n\n      for (var _len42 = arguments.length, args = new Array(_len42), _key42 = 0; _key42 < _len42; _key42++) {\n        args[_key42] = arguments[_key42];\n      }\n\n      var c = function c() {\n        var _this67$_context;\n\n        (_this67$_context = _this67._context).setTransform.apply(_this67$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "stroke",\n    value: function stroke() {\n      var _this68 = this;\n\n      for (var _len43 = arguments.length, args = new Array(_len43), _key43 = 0; _key43 < _len43; _key43++) {\n        args[_key43] = arguments[_key43];\n      }\n\n      var c = function c() {\n        var _this68$_context;\n\n        (_this68$_context = _this68._context).stroke.apply(_this68$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "strokeRect",\n    value: function strokeRect() {\n      var _this69 = this;\n\n      for (var _len44 = arguments.length, args = new Array(_len44), _key44 = 0; _key44 < _len44; _key44++) {\n        args[_key44] = arguments[_key44];\n      }\n\n      var c = function c() {\n        var _this69$_context;\n\n        (_this69$_context = _this69._context).strokeRect.apply(_this69$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "strokeText",\n    value: function strokeText() {\n      var _this70 = this;\n\n      for (var _len45 = arguments.length, args = new Array(_len45), _key45 = 0; _key45 < _len45; _key45++) {\n        args[_key45] = arguments[_key45];\n      }\n\n      var c = function c() {\n        var _this70$_context;\n\n        (_this70$_context = _this70._context).strokeText.apply(_this70$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }, {\n    key: "transform",\n    value: function transform() {\n      var _this71 = this;\n\n      for (var _len46 = arguments.length, args = new Array(_len46), _key46 = 0; _key46 < _len46; _key46++) {\n        args[_key46] = arguments[_key46];\n      }\n\n      var c = function c() {\n        var _this71$_context;\n\n        (_this71$_context = _this71._context).transform.apply(_this71$_context, args);\n      };\n\n      this.handleCommand(c);\n    } // getTransform() {\n    //     let c = () => {\n    //         // console.log(this._context.getTransform());\n    //     };\n    //     this.handleCommand(c);\n    // }\n\n  }, {\n    key: "translate",\n    value: function translate() {\n      var _this72 = this;\n\n      for (var _len47 = arguments.length, args = new Array(_len47), _key47 = 0; _key47 < _len47; _key47++) {\n        args[_key47] = arguments[_key47];\n      }\n\n      var c = function c() {\n        var _this72$_context;\n\n        (_this72$_context = _this72._context).translate.apply(_this72$_context, args);\n      };\n\n      this.handleCommand(c);\n    }\n  }]);\n\n  return Context;\n}();\n\n\n;// CONCATENATED MODULE: ./src/context/global-context.js\nfunction global_context_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction global_context_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction global_context_createClass(Constructor, protoProps, staticProps) { if (protoProps) global_context_defineProperties(Constructor.prototype, protoProps); if (staticProps) global_context_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\n\n\n\nvar GlobalContext = /*#__PURE__*/function () {\n  function GlobalContext() {\n    global_context_classCallCheck(this, GlobalContext);\n\n    var _initSchedule = initSchedule(),\n        queueJob = _initSchedule.queueJob,\n        nextTick = _initSchedule.nextTick;\n\n    this.effect = function (fn) {\n      effect(fn, {\n        scheduler: queueJob\n      });\n    };\n\n    this.$nextTick = nextTick; // this.globalData = globalData;\n\n    this.boundingBox = reactive({\n      width: 0,\n      height: 0\n    });\n    this.DPRMat = null;\n    this.DPR = 0;\n    this.theme = {\n      getColor: undefined,\n      fontSize: undefined\n    };\n    this._mouse = reactive({\n      x: undefined,\n      y: undefined,\n      event: undefined\n    });\n    this.Layout = reactive({\n      translateMtx: undefined,\n      translateMtxInvert: undefined,\n      spanHorizontal: undefined,\n      rawSpanHorizontal: undefined,\n      spanVertical: undefined,\n      xStep: undefined,\n      xScaler: undefined,\n      yStep: undefined,\n      yScaler: undefined,\n      left: undefined,\n      top: undefined,\n      right: undefined,\n      bottom: undefined,\n      xFloat: undefined\n    });\n    this.hooks = Object.freeze({\n      initTheme: new lib.SyncHook([\'container\']),\n      beforeInitGlobalLayout: new lib.SyncHook([\'container\', \'layoutContext\']),\n      initGlobalLayout: new lib.SyncHook([\'container\', \'layoutContext\']),\n      afterDataAndLayoutReady: new lib.SyncHook(),\n      initCanvas: new lib.SyncHook([\'canvas\']),\n      initContext: new lib.SyncHook([\'context\', \'canvasElem\', \'container\'])\n    });\n    this.globalData = new data();\n    this.Coordinate = new coordinate();\n    this.Chart = new chart();\n    this.Overlayer = new overlayer();\n  }\n\n  global_context_createClass(GlobalContext, [{\n    key: "init",\n    value: function init(container, dataOptions) {\n      var _this = this;\n\n      this.hooks.initTheme.call(container);\n      this.container = container;\n      this.globalData.init(dataOptions);\n      var layoutContext = {\n        canvasWrapper: null,\n        legendWrapper: null\n      };\n      this.hooks.beforeInitGlobalLayout.call(container, layoutContext);\n      this.hooks.initGlobalLayout.call(container, layoutContext);\n      this.hooks.afterDataAndLayoutReady.call();\n      this.initContext(layoutContext.canvasWrapper, function (ContextProxy, canvas) {\n        _this.Coordinate.context2d = ContextProxy;\n        _this.Coordinate.canvasElm = canvas;\n\n        _this.Coordinate.init();\n      });\n      this.initContext(layoutContext.canvasWrapper, function (ContextProxy, canvas) {\n        _this.Chart.context2d = ContextProxy;\n        _this.Chart.canvasElm = canvas;\n\n        _this.Chart.init();\n      });\n      this.initContext(layoutContext.canvasWrapper, function (ContextProxy, canvas) {\n        _this.Overlayer.context2d = ContextProxy;\n        _this.Overlayer.canvasElm = canvas;\n\n        _this.Overlayer.init(layoutContext.canvasWrapper);\n      });\n    }\n  }, {\n    key: "initContext",\n    value: function initContext(container, callback) {\n      var _createCanvas = createCanvas(container),\n          context2d = _createCanvas.context2d,\n          canvas = _createCanvas.canvas;\n\n      this.hooks.initCanvas.call(canvas);\n      var ContextProxy = new Context(context2d, true);\n      this.hooks.initContext.call(ContextProxy, canvas, container);\n      callback(ContextProxy, canvas);\n    }\n  }, {\n    key: "setTransform",\n    value: function setTransform(ctx) {\n      var mtx = this.Coordinate.transformMeta.transformMtx;\n      ctx.setTransform(mtx[0], mtx[1], mtx[2], mtx[3], mtx[4], mtx[5]);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n\n      this.effect(function () {\n        var _this2$Coordinate = _this2.Coordinate,\n            context2d = _this2$Coordinate.context2d,\n            canvasElm = _this2$Coordinate.canvasElm;\n        clearCanvas(context2d, canvasElm);\n\n        _this2.setTransform(context2d);\n\n        _this2.Coordinate.render();\n      });\n      this.effect(function () {\n        console.log(\'render begin\');\n        var _this2$Chart = _this2.Chart,\n            context2d = _this2$Chart.context2d,\n            canvasElm = _this2$Chart.canvasElm;\n        clearCanvas(context2d, canvasElm);\n\n        _this2.setTransform(context2d);\n\n        _this2.Chart.render();\n      });\n      this.effect(function () {\n        var _this2$Overlayer = _this2.Overlayer,\n            context2d = _this2$Overlayer.context2d,\n            canvasElm = _this2$Overlayer.canvasElm;\n        clearCanvas(context2d, canvasElm);\n\n        _this2.setTransform(context2d);\n\n        _this2.Overlayer.render();\n      });\n      this.Coordinate.afterRender();\n      this.Chart.afterRender();\n      this.Overlayer.afterRender();\n    }\n  }, {\n    key: "resetData",\n    value: function resetData(options) {\n      this.globalData.resetData(options);\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      destroyCanvas(this.container, this.Overlayer.canvasElm);\n      destroyCanvas(this.container, this.Chart.canvasElm);\n      destroyCanvas(this.container, this.Coordinate.canvasElm);\n    }\n  }]);\n\n  return GlobalContext;\n}();\n\n/* harmony default export */ const global_context = (GlobalContext);\n;// CONCATENATED MODULE: ./src/plugins/inner/DPIPlugin.js\nfunction DPIPlugin_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction DPIPlugin_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DPIPlugin_createClass(Constructor, protoProps, staticProps) { if (protoProps) DPIPlugin_defineProperties(Constructor.prototype, protoProps); if (staticProps) DPIPlugin_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar DPIPlugin = /*#__PURE__*/function () {\n  function DPIPlugin() {\n    DPIPlugin_classCallCheck(this, DPIPlugin);\n  }\n\n  DPIPlugin_createClass(DPIPlugin, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      globalCtx.hooks.initCanvas.tap(\'DPIPlugin\', function (canvasElem) {\n        globalCtx.effect(function () {\n          var dpr = window.devicePixelRatio || 1;\n          var rect = globalCtx.boundingBox;\n          canvasElem.width = rect.width * dpr;\n          canvasElem.height = rect.height * dpr;\n\n          if (!globalCtx.DPRMat) {\n            globalCtx.DPR = dpr;\n            globalCtx.DPRMat = create();\n            multiplyScalar(globalCtx.DPRMat, globalCtx.DPRMat, dpr);\n          }\n\n          canvasElem.style.position = "absolute";\n          canvasElem.style.left = "0";\n          canvasElem.style.top = "0";\n          canvasElem.style.width = "".concat(rect.width, "px");\n          canvasElem.style.height = "".concat(rect.height, "px");\n        });\n      });\n    }\n  }]);\n\n  return DPIPlugin;\n}();\n\n/* harmony default export */ const inner_DPIPlugin = (DPIPlugin);\n;// CONCATENATED MODULE: ./src/plugins/inner/ThemePlugin.js\nfunction ThemePlugin_toConsumableArray(arr) { return ThemePlugin_arrayWithoutHoles(arr) || ThemePlugin_iterableToArray(arr) || ThemePlugin_unsupportedIterableToArray(arr) || ThemePlugin_nonIterableSpread(); }\n\nfunction ThemePlugin_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction ThemePlugin_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ThemePlugin_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ThemePlugin_arrayLikeToArray(o, minLen); }\n\nfunction ThemePlugin_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction ThemePlugin_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return ThemePlugin_arrayLikeToArray(arr); }\n\nfunction ThemePlugin_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ThemePlugin_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction ThemePlugin_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ThemePlugin_createClass(Constructor, protoProps, staticProps) { if (protoProps) ThemePlugin_defineProperties(Constructor.prototype, protoProps); if (staticProps) ThemePlugin_defineProperties(Constructor, staticProps); return Constructor; }\n\n// import colorString from \'color-string\';\nvar DEFAULT_COLORS = [[103, 170, 245], [255, 174, 60], [78, 201, 171], [245, 131, 122], [158, 156, 246], [30, 192, 216], [138, 205, 78], [237, 139, 204], [135, 206, 232], [97, 218, 198], [198, 156, 246], [137, 170, 247], [134, 187, 231], [245, 196, 80], [135, 206, 232], [239, 216, 22], [92, 208, 133], [241, 126, 248]];\n\nvar ThemePlugin = /*#__PURE__*/function () {\n  function ThemePlugin() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    ThemePlugin_classCallCheck(this, ThemePlugin);\n\n    this.name = \'ThemePlugin\';\n    var colors = options.colors,\n        disabledOpacity = options.disabledOpacity,\n        fadeOpacity = options.fadeOpacity;\n    this.colors = colors || DEFAULT_COLORS;\n    this.disabledOpacity = disabledOpacity || 0.1;\n    this.fadeOpacity = fadeOpacity || 0.4;\n  }\n\n  ThemePlugin_createClass(ThemePlugin, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      globalCtx.hooks.initTheme.tap(this.name, function (container) {\n        var colors = _this.colors,\n            disabledOpacity = _this.disabledOpacity,\n            fadeOpacity = _this.fadeOpacity;\n        var length = colors.length;\n        var disabledColors = colors.map(function (c) {\n          return [].concat(ThemePlugin_toConsumableArray(c), [disabledOpacity]);\n        });\n        var fadeColors = colors.map(function (c) {\n          return [].concat(ThemePlugin_toConsumableArray(c), [fadeOpacity]);\n        });\n        var font = getComputedStyle(container).font;\n        var fontSize = parseFloat(font);\n        globalCtx.theme = {\n          getColor: function getColor(idx) {\n            var i = idx % length + 1;\n            return {\n              color: colors[i],\n              disabledColor: disabledColors[i],\n              fadeColor: fadeColors[i]\n            };\n          },\n          fontSize: fontSize,\n          axis: {\n            strokeStyle: \'#eee\',\n            lineWidth: 1\n          }\n        };\n      });\n    }\n  }]);\n\n  return ThemePlugin;\n}();\n\n/* harmony default export */ const inner_ThemePlugin = (ThemePlugin);\n;// CONCATENATED MODULE: ./src/plugins/inner/LayoutPlugin.js\nfunction LayoutPlugin_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction LayoutPlugin_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction LayoutPlugin_createClass(Constructor, protoProps, staticProps) { if (protoProps) LayoutPlugin_defineProperties(Constructor.prototype, protoProps); if (staticProps) LayoutPlugin_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DEFAULT_OPTION = {\n  left: 0,\n  right: 0,\n  bottom: 0,\n  top: 0\n};\n\nvar LayoutPlugin = /*#__PURE__*/function () {\n  function LayoutPlugin(options) {\n    LayoutPlugin_classCallCheck(this, LayoutPlugin);\n\n    this.name = \'layoutPlugin\';\n    this.options = Object.assign({}, DEFAULT_OPTION, options);\n  }\n\n  LayoutPlugin_createClass(LayoutPlugin, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      globalCtx.hooks.afterDataAndLayoutReady.tap(this.name, function () {\n        globalCtx.effect(function () {\n          console.log(\'effect init layout\');\n          var _this$options = _this.options,\n              left = _this$options.left,\n              right = _this$options.right,\n              bottom = _this$options.bottom,\n              top = _this$options.top,\n              _this$options$xFloat = _this$options.xFloat,\n              xFloat = _this$options$xFloat === void 0 ? 10 : _this$options$xFloat;\n          Object.assign(globalCtx.Layout, {\n            bounding: {\n              left: left,\n              right: right,\n              bottom: bottom,\n              top: top,\n              xFloat: xFloat\n            }\n          }); // console.log(globalCtx.Layout);\n        });\n      });\n    }\n  }]);\n\n  return LayoutPlugin;\n}();\n\n/* harmony default export */ const inner_LayoutPlugin = (LayoutPlugin);\n;// CONCATENATED MODULE: ./src/plugins/inner/EventListenerPlugin.js\nfunction EventListenerPlugin_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction EventListenerPlugin_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction EventListenerPlugin_createClass(Constructor, protoProps, staticProps) { if (protoProps) EventListenerPlugin_defineProperties(Constructor.prototype, protoProps); if (staticProps) EventListenerPlugin_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar EventListenerPlugin = /*#__PURE__*/function () {\n  function EventListenerPlugin() {\n    EventListenerPlugin_classCallCheck(this, EventListenerPlugin);\n\n    this.name = \'EventListener\';\n  }\n\n  EventListenerPlugin_createClass(EventListenerPlugin, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      var _this = this;\n\n      globalCtx.Overlayer.hooks.initOverlayer.tap(this.name, function () {\n        _this.addEventListener(globalCtx);\n      });\n    }\n  }, {\n    key: "addEventListener",\n    value: function addEventListener(globalCtx) {\n      var canvasElem = globalCtx.Overlayer.canvasElm;\n      this.bindListener(canvasElem, \'pointerdown\', globalCtx);\n      this.bindThrottleListener(canvasElem, \'pointermove\', globalCtx);\n      this.bindListener(canvasElem, \'pointerup\', globalCtx); // this.bindListener(canvasElem, \'touchstart\', globalCtx);\n      // this.bindListener(canvasElem, \'touchmove\', globalCtx);\n      // this.bindListener(canvasElem, \'touchend\', globalCtx);\n      // this.bindListener(canvasElem, \'mousedown\', globalCtx);\n      // this.bindListener(canvasElem, \'mousemove\', globalCtx);\n      // this.bindListener(canvasElem, \'mouseup\', globalCtx);\n\n      this.bindListener(canvasElem, \'mouseenter\', globalCtx);\n      this.bindListener(canvasElem, \'mouseleave\', globalCtx); // globalCtx._mouse = this.mouse;\n    }\n  }, {\n    key: "bindThrottleListener",\n    value: function bindThrottleListener(elem, event, globalCtx) {\n      elem.addEventListener(event, (0,lodash.throttle)(function (e) {\n        e.preventDefault(); // console.log(e.offsetX, e.offsetY);\n\n        Object.assign(globalCtx._mouse, {\n          x: e.offsetX,\n          y: e.offsetY,\n          deltaY: e.deltaY,\n          event: event\n        });\n      }, 16));\n    }\n  }, {\n    key: "bindListener",\n    value: function bindListener(elem, event, globalCtx) {\n      elem.addEventListener(event, function (e) {\n        e.preventDefault(); // console.log(e.offsetX, e.offsetY);\n\n        Object.assign(globalCtx._mouse, {\n          x: e.offsetX,\n          y: e.offsetY,\n          deltaY: e.deltaY,\n          event: event\n        });\n      }, false);\n    }\n  }]);\n\n  return EventListenerPlugin;\n}();\n\n/* harmony default export */ const inner_EventListenerPlugin = (EventListenerPlugin);\n;// CONCATENATED MODULE: ./src/plugins/inner/GlobalLayoutPlugin.js\nfunction GlobalLayoutPlugin_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction GlobalLayoutPlugin_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction GlobalLayoutPlugin_createClass(Constructor, protoProps, staticProps) { if (protoProps) GlobalLayoutPlugin_defineProperties(Constructor.prototype, protoProps); if (staticProps) GlobalLayoutPlugin_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar GlobalLayoutPlugin = /*#__PURE__*/function () {\n  function GlobalLayoutPlugin() {\n    GlobalLayoutPlugin_classCallCheck(this, GlobalLayoutPlugin);\n\n    this.name = \'GlobalLayoutPlugin\';\n  }\n\n  GlobalLayoutPlugin_createClass(GlobalLayoutPlugin, [{\n    key: "apply",\n    value: function apply(globalCtx) {\n      globalCtx.hooks.initGlobalLayout.tap(this.name, function (container, layoutContext) {\n        container.style.position = \'relative\';\n        container.style.display = \'flex\';\n        container.style[\'flex-direction\'] = \'column\';\n        container.style[\'justify-content\'] = \'flex-end\';\n        var chartcontainer = document.createElement(\'div\');\n        chartcontainer.setAttribute(\'style\', "\\n                flex: 1;\\n                width: 100%;\\n                position: relative;\\n            ");\n        container.prepend(chartcontainer);\n        layoutContext.canvasWrapper = chartcontainer;\n        var box = chartcontainer.getBoundingClientRect();\n        globalCtx.boundingBox.width = box.width;\n        globalCtx.boundingBox.height = box.height;\n      });\n    }\n  }]);\n\n  return GlobalLayoutPlugin;\n}();\n\n/* harmony default export */ const inner_GlobalLayoutPlugin = (GlobalLayoutPlugin);\n;// CONCATENATED MODULE: ./src/context/index.js\n\n\n\n\n\n\nfunction initContext(plugins) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var globalCtx = new global_context();\n  var innerPlugins = [new inner_ThemePlugin(options.theme), new inner_LayoutPlugin(options.layout), new inner_EventListenerPlugin(), new inner_GlobalLayoutPlugin(), new inner_DPIPlugin()];\n  plugins = innerPlugins.concat(plugins);\n  plugins.forEach(function (plugin) {\n    plugin.apply(globalCtx);\n  });\n  return globalCtx;\n}\n;// CONCATENATED MODULE: ./src/index.js\n\n/* harmony default export */ function src(plugins, options) {\n  var globalCtx = initContext(plugins, options);\n  return function (container, data) {\n    globalCtx.init(container, data);\n    globalCtx.render();\n    return globalCtx;\n  };\n}\n;// CONCATENATED MODULE: ./demo/data-big-1.json\nconst data_big_1_namespaceObject = JSON.parse(\'{"status":"success","data":{"resultType":"matrix","result":[{"metric":{"pod":"myapp-9f6b45458-ks8p2"},"values":[[1626150094.407,"0"],[1626150154.407,"0"],[1626150214.407,"0"],[1626150274.407,"0"],[1626150334.407,"0"],[1626150394.407,"0"],[1626150454.407,"0"],[1626150514.407,"0"],[1626150574.407,"0"],[1626150634.407,"0"],[1626150694.407,"0"],[1626150754.407,"0"],[1626150814.407,"0"],[1626150874.407,"0"],[1626150934.407,"0"],[1626150994.407,"0"],[1626151054.407,"0"],[1626151114.407,"0"],[1626151174.407,"0"],[1626151234.407,"0"],[1626151294.407,"0"],[1626151354.407,"0"],[1626151414.407,"0"],[1626151474.407,"0"],[1626151534.407,"0"],[1626151594.407,"0"],[1626151654.407,"0"],[1626151714.407,"0"],[1626151774.407,"0"],[1626151834.407,"0"],[1626151894.407,"0"]]},{"metric":{"pod":"myapp-d748b8c48-4vs6j"},"values":[[1626150094.407,"1"],[1626150154.407,"1"],[1626150214.407,"1"],[1626150274.407,"1"],[1626150334.407,"1"],[1626150394.407,"1"],[1626150454.407,"1"],[1626150514.407,"1"],[1626150574.407,"1"],[1626150634.407,"1"],[1626150694.407,"1"],[1626150754.407,"1"],[1626150814.407,"1"],[1626150874.407,"1"],[1626150934.407,"1"],[1626150994.407,"1"],[1626151054.407,"1"],[1626151114.407,"1"],[1626151174.407,"1"],[1626151234.407,"1"],[1626151294.407,"1"],[1626151354.407,"1"],[1626151414.407,"1"],[1626151474.407,"1"],[1626151534.407,"1"],[1626151594.407,"1"],[1626151654.407,"1"],[1626151714.407,"1"],[1626151774.407,"1"],[1626151834.407,"1"],[1626151894.407,"1"]]},{"metric":{"pod":"myapp-d748b8c48-j66hk"},"values":[[1626150094.407,"1"],[1626150154.407,"1"],[1626150214.407,"1"],[1626150274.407,"0"],[1626150334.407,"0"],[1626150394.407,"0"],[1626150454.407,"0"],[1626150514.407,"0"],[1626150574.407,"0"],[1626150634.407,"0"],[1626150694.407,"0"],[1626150754.407,"0"],[1626150814.407,"0"],[1626150874.407,"0"],[1626150934.407,"1"],[1626150994.407,"1"],[1626151054.407,"1"],[1626151114.407,"1"],[1626151174.407,"1"],[1626151234.407,"1"],[1626151294.407,"1"],[1626151354.407,"0"],[1626151414.407,"0"],[1626151474.407,"0"],[1626151534.407,"0"],[1626151594.407,"0"],[1626151654.407,"0"],[1626151714.407,"0"],[1626151774.407,"0"],[1626151834.407,"0"],[1626151894.407,"0"]]},{"metric":{"pod":"pumba-nr77p"},"values":[[1626150094.407,"0"],[1626150154.407,"0"],[1626150214.407,"0"],[1626150274.407,"0"],[1626150334.407,"0"],[1626150394.407,"0"],[1626150454.407,"0"],[1626150514.407,"0"],[1626150574.407,"0"],[1626150634.407,"0"],[1626150694.407,"0"],[1626150754.407,"0"],[1626150814.407,"0"],[1626150874.407,"0"],[1626150934.407,"0"],[1626150994.407,"0"],[1626151054.407,"0"],[1626151114.407,"0"],[1626151174.407,"0"],[1626151234.407,"0"],[1626151294.407,"0"],[1626151354.407,"0"],[1626151414.407,"0"],[1626151474.407,"0"],[1626151534.407,"0"],[1626151594.407,"0"],[1626151654.407,"0"],[1626151714.407,"0"],[1626151774.407,"0"],[1626151834.407,"0"],[1626151894.407,"0"]]},{"metric":{"pod":"test-stress-0"},"values":[[1626150094.407,"8"],[1626150154.407,"9"],[1626150214.407,"9"],[1626150274.407,"8"],[1626150334.407,"9"],[1626150394.407,"3"],[1626150454.407,"5"],[1626150514.407,"7"],[1626150574.407,"10"],[1626150634.407,"7"],[1626150694.407,"8"],[1626150754.407,"4"],[1626150814.407,"4"],[1626150874.407,"0"],[1626150934.407,"0"],[1626150994.407,"0"],[1626151054.407,"4"],[1626151114.407,"4"],[1626151174.407,"4"],[1626151234.407,"4"],[1626151294.407,"10"],[1626151354.407,"7"],[1626151414.407,"7"],[1626151474.407,"7"],[1626151534.407,"14"],[1626151594.407,"8"],[1626151654.407,"18"],[1626151714.407,"18"],[1626151774.407,"29"],[1626151834.407,"21"],[1626151894.407,"17"]]},{"metric":{"pod":"test-stress-1"},"values":[[1626150094.407,"6"],[1626150154.407,"0"],[1626150214.407,"0"],[1626150274.407,"0"],[1626150334.407,"10"],[1626150394.407,"11"],[1626150454.407,"11"],[1626150514.407,"11"],[1626150574.407,"13"],[1626150634.407,"11"],[1626150694.407,"20"],[1626150754.407,"20"],[1626150814.407,"17"],[1626150874.407,"11"],[1626150934.407,"3"],[1626150994.407,"0"],[1626151054.407,"0"],[1626151114.407,"0"],[1626151174.407,"0"],[1626151234.407,"0"],[1626151294.407,"11"],[1626151354.407,"11"],[1626151414.407,"21"],[1626151474.407,"21"],[1626151534.407,"26"],[1626151594.407,"22"],[1626151654.407,"15"],[1626151714.407,"11"],[1626151774.407,"10"],[1626151834.407,"8"],[1626151894.407,"14"]]}]}}\');\n;// CONCATENATED MODULE: ./demo/data-big-2.json\nconst data_big_2_namespaceObject = JSON.parse(\'{"status":"success","data":{"resultType":"matrix","result":[{"metric":{"pod":"myapp-9f6b45458-ks8p2"},"values":[[1626071030.142,"0"],[1626071150.142,"0"],[1626071270.142,"0"],[1626071390.142,"0"],[1626071510.142,"0"],[1626071630.142,"0"],[1626071750.142,"0"],[1626071870.142,"0"],[1626071990.142,"0"],[1626072110.142,"0"],[1626072230.142,"0"],[1626072350.142,"0"],[1626072470.142,"0"],[1626072590.142,"0"],[1626072710.142,"0"],[1626072830.142,"0"],[1626072950.142,"0"],[1626073070.142,"0"],[1626073190.142,"0"],[1626073310.142,"0"],[1626073430.142,"0"],[1626073550.142,"0"],[1626073670.142,"0"],[1626073790.142,"0"],[1626073910.142,"0"],[1626074030.142,"0"],[1626074150.142,"0"],[1626074270.142,"0"],[1626074390.142,"0"],[1626074510.142,"0"],[1626074630.142,"0"],[1626074750.142,"0"],[1626074870.142,"0"],[1626074990.142,"0"],[1626075110.142,"0"],[1626075230.142,"0"],[1626075350.142,"0"],[1626075470.142,"0"],[1626075590.142,"0"],[1626075710.142,"0"],[1626075830.142,"0"],[1626075950.142,"0"],[1626076070.142,"0"],[1626076190.142,"0"],[1626076310.142,"0"],[1626076430.142,"0"],[1626076550.142,"0"],[1626076670.142,"0"],[1626076790.142,"0"],[1626076910.142,"0"],[1626077030.142,"0"],[1626077150.142,"0"],[1626077270.142,"0"],[1626077390.142,"0"],[1626077510.142,"0"],[1626077630.142,"0"],[1626077750.142,"0"],[1626077870.142,"0"],[1626077990.142,"0"],[1626078110.142,"0"],[1626078230.142,"0"],[1626078350.142,"0"],[1626078470.142,"0"],[1626078590.142,"0"],[1626078710.142,"0"],[1626078830.142,"0"],[1626078950.142,"0"],[1626079070.142,"0"],[1626079190.142,"0"],[1626079310.142,"0"],[1626079430.142,"0"],[1626079550.142,"0"],[1626079670.142,"0"],[1626079790.142,"0"],[1626079910.142,"0"],[1626080030.142,"0"],[1626080150.142,"0"],[1626080270.142,"0"],[1626080390.142,"0"],[1626080510.142,"0"],[1626080630.142,"0"],[1626080750.142,"0"],[1626080870.142,"0"],[1626080990.142,"0"],[1626081110.142,"0"],[1626081230.142,"0"],[1626081350.142,"0"],[1626081470.142,"0"],[1626081590.142,"0"],[1626081710.142,"0"],[1626081830.142,"0"],[1626081950.142,"0"],[1626082070.142,"0"],[1626082190.142,"0"],[1626082310.142,"0"],[1626082430.142,"0"],[1626082550.142,"0"],[1626082670.142,"0"],[1626082790.142,"0"],[1626082910.142,"0"],[1626083030.142,"0"],[1626083150.142,"0"],[1626083270.142,"0"],[1626083390.142,"0"],[1626083510.142,"0"],[1626083630.142,"0"],[1626083750.142,"0"],[1626083870.142,"0"],[1626083990.142,"0"],[1626084110.142,"0"],[1626084230.142,"0"],[1626084350.142,"0"],[1626084470.142,"0"],[1626084590.142,"0"],[1626084710.142,"0"],[1626084830.142,"0"],[1626084950.142,"0"],[1626085070.142,"0"],[1626085190.142,"0"],[1626085310.142,"0"],[1626085430.142,"0"],[1626085550.142,"0"],[1626085670.142,"0"],[1626085790.142,"0"],[1626085910.142,"0"],[1626086030.142,"0"],[1626086150.142,"0"],[1626086270.142,"0"],[1626086390.142,"0"],[1626086510.142,"0"],[1626086630.142,"0"],[1626086750.142,"0"],[1626086870.142,"0"],[1626086990.142,"0"],[1626087110.142,"0"],[1626087230.142,"0"],[1626087350.142,"0"],[1626087470.142,"0"],[1626087590.142,"0"],[1626087710.142,"0"],[1626087830.142,"0"],[1626087950.142,"0"],[1626088070.142,"0"],[1626088190.142,"0"],[1626088310.142,"0"],[1626088430.142,"0"],[1626088550.142,"0"],[1626088670.142,"0"],[1626088790.142,"0"],[1626088910.142,"0"],[1626089030.142,"0"],[1626089150.142,"0"],[1626089270.142,"0"],[1626089390.142,"0"],[1626089510.142,"0"],[1626089630.142,"0"],[1626089750.142,"0"],[1626089870.142,"0"],[1626089990.142,"0"],[1626090110.142,"0"],[1626090230.142,"0"],[1626090350.142,"0"],[1626090470.142,"0"],[1626090590.142,"0"],[1626090710.142,"0"],[1626090830.142,"0"],[1626090950.142,"0"],[1626091070.142,"0"],[1626091190.142,"0"],[1626091310.142,"0"],[1626091430.142,"0"],[1626091550.142,"0"],[1626091670.142,"0"],[1626091790.142,"0"],[1626091910.142,"0"],[1626092030.142,"0"],[1626092150.142,"0"],[1626092270.142,"0"],[1626092390.142,"0"],[1626092510.142,"0"],[1626092630.142,"0"],[1626092750.142,"0"],[1626092870.142,"0"],[1626092990.142,"0"],[1626093110.142,"0"],[1626093230.142,"0"],[1626093350.142,"0"],[1626093470.142,"0"],[1626093590.142,"0"],[1626093710.142,"0"],[1626093830.142,"0"],[1626093950.142,"0"],[1626094070.142,"0"],[1626094190.142,"0"],[1626094310.142,"0"],[1626094430.142,"0"],[1626094550.142,"0"],[1626094670.142,"0"],[1626094790.142,"0"],[1626094910.142,"0"],[1626095030.142,"0"],[1626095150.142,"0"],[1626095270.142,"0"],[1626095390.142,"0"],[1626095510.142,"0"],[1626095630.142,"0"],[1626095750.142,"0"],[1626095870.142,"0"],[1626095990.142,"0"],[1626096110.142,"0"],[1626096230.142,"0"],[1626096350.142,"0"],[1626096470.142,"0"],[1626096590.142,"0"],[1626096710.142,"0"],[1626096830.142,"0"],[1626096950.142,"0"],[1626097070.142,"0"],[1626097190.142,"0"],[1626097310.142,"0"],[1626097430.142,"0"],[1626097550.142,"0"],[1626097670.142,"0"],[1626097790.142,"0"],[1626097910.142,"0"],[1626098030.142,"0"],[1626098150.142,"0"],[1626098270.142,"0"],[1626098390.142,"0"],[1626098510.142,"0"],[1626098630.142,"0"],[1626098750.142,"0"],[1626098870.142,"0"],[1626098990.142,"0"],[1626099110.142,"0"],[1626099230.142,"0"],[1626099350.142,"0"],[1626099470.142,"0"],[1626099590.142,"0"],[1626099710.142,"0"],[1626099830.142,"0"],[1626099950.142,"0"],[1626100070.142,"0"],[1626100190.142,"0"],[1626100310.142,"0"],[1626100430.142,"0"],[1626100550.142,"0"],[1626100670.142,"0"],[1626100790.142,"0"],[1626100910.142,"0"],[1626101030.142,"0"],[1626101150.142,"0"],[1626101270.142,"0"],[1626101390.142,"0"],[1626101510.142,"0"],[1626101630.142,"0"],[1626101750.142,"0"],[1626101870.142,"0"],[1626101990.142,"0"],[1626102110.142,"0"],[1626102230.142,"0"],[1626102350.142,"0"],[1626102470.142,"0"],[1626102590.142,"0"],[1626102710.142,"0"],[1626102830.142,"0"],[1626102950.142,"0"],[1626103070.142,"0"],[1626103190.142,"0"],[1626103310.142,"0"],[1626103430.142,"0"],[1626103550.142,"0"],[1626103670.142,"0"],[1626103790.142,"0"],[1626103910.142,"0"],[1626104030.142,"0"],[1626104150.142,"0"],[1626104270.142,"0"],[1626104390.142,"0"],[1626104510.142,"0"],[1626104630.142,"0"],[1626104750.142,"0"],[1626104870.142,"0"],[1626104990.142,"0"],[1626105110.142,"0"],[1626105230.142,"0"],[1626105350.142,"0"],[1626105470.142,"0"],[1626105590.142,"0"],[1626105710.142,"0"],[1626105830.142,"0"],[1626105950.142,"0"],[1626106070.142,"0"],[1626106190.142,"0"],[1626106310.142,"0"],[1626106430.142,"0"],[1626106550.142,"0"],[1626106670.142,"0"],[1626106790.142,"0"],[1626106910.142,"0"],[1626107030.142,"0"],[1626107150.142,"0"],[1626107270.142,"0"],[1626107390.142,"0"],[1626107510.142,"0"],[1626107630.142,"0"],[1626107750.142,"0"],[1626107870.142,"0"],[1626107990.142,"0"],[1626108110.142,"0"],[1626108230.142,"0"],[1626108350.142,"0"],[1626108470.142,"0"],[1626108590.142,"0"],[1626108710.142,"0"],[1626108830.142,"0"],[1626108950.142,"0"],[1626109070.142,"0"],[1626109190.142,"0"],[1626109310.142,"0"],[1626109430.142,"0"],[1626109550.142,"0"],[1626109670.142,"0"],[1626109790.142,"0"],[1626109910.142,"0"],[1626110030.142,"0"],[1626110150.142,"0"],[1626110270.142,"0"],[1626110390.142,"0"],[1626110510.142,"0"],[1626110630.142,"0"],[1626110750.142,"0"],[1626110870.142,"0"],[1626110990.142,"0"],[1626111110.142,"0"],[1626111230.142,"0"],[1626111350.142,"0"],[1626111470.142,"0"],[1626111590.142,"0"],[1626111710.142,"0"],[1626111830.142,"0"],[1626111950.142,"0"],[1626112070.142,"0"],[1626112190.142,"0"],[1626112310.142,"0"],[1626112430.142,"0"],[1626112550.142,"0"],[1626112670.142,"0"],[1626112790.142,"0"],[1626112910.142,"0"],[1626113030.142,"0"],[1626113150.142,"0"],[1626113270.142,"0"],[1626113390.142,"0"],[1626113510.142,"0"],[1626113630.142,"0"],[1626113750.142,"0"],[1626113870.142,"0"],[1626113990.142,"0"],[1626114110.142,"0"],[1626114230.142,"0"],[1626114350.142,"0"],[1626114470.142,"0"],[1626114590.142,"0"],[1626114710.142,"0"],[1626114830.142,"0"],[1626114950.142,"0"],[1626115070.142,"0"],[1626115190.142,"0"],[1626115310.142,"0"],[1626115430.142,"0"],[1626115550.142,"0"],[1626115670.142,"0"],[1626115790.142,"0"],[1626115910.142,"0"],[1626116030.142,"0"],[1626116150.142,"0"],[1626116270.142,"0"],[1626116390.142,"0"],[1626116510.142,"0"],[1626116630.142,"0"],[1626116750.142,"0"],[1626116870.142,"0"],[1626116990.142,"0"],[1626117110.142,"0"],[1626117230.142,"0"],[1626117350.142,"0"],[1626117470.142,"0"],[1626117590.142,"0"],[1626117710.142,"0"],[1626117830.142,"0"],[1626117950.142,"0"],[1626118070.142,"0"],[1626118190.142,"0"],[1626118310.142,"0"],[1626118430.142,"0"],[1626118550.142,"0"],[1626118670.142,"0"],[1626118790.142,"0"],[1626118910.142,"0"],[1626119030.142,"0"],[1626119150.142,"0"],[1626119270.142,"0"],[1626119390.142,"0"],[1626119510.142,"0"],[1626119630.142,"0"],[1626119750.142,"0"],[1626119870.142,"0"],[1626119990.142,"0"],[1626120110.142,"0"],[1626120230.142,"0"],[1626120350.142,"0"],[1626120470.142,"0"],[1626120590.142,"0"],[1626120710.142,"0"],[1626120830.142,"0"],[1626120950.142,"0"],[1626121070.142,"0"],[1626121190.142,"0"],[1626121310.142,"0"],[1626121430.142,"0"],[1626121550.142,"0"],[1626121670.142,"0"],[1626121790.142,"0"],[1626121910.142,"0"],[1626122030.142,"0"],[1626122150.142,"0"],[1626122270.142,"0"],[1626122390.142,"0"],[1626122510.142,"0"],[1626122630.142,"0"],[1626122750.142,"0"],[1626122870.142,"0"],[1626122990.142,"0"],[1626123110.142,"0"],[1626123230.142,"0"],[1626123350.142,"0"],[1626123470.142,"0"],[1626123590.142,"0"],[1626123710.142,"0"],[1626123830.142,"0"],[1626123950.142,"0"],[1626124070.142,"0"],[1626124190.142,"0"],[1626124310.142,"0"],[1626124430.142,"0"],[1626124550.142,"0"],[1626124670.142,"0"],[1626124790.142,"0"],[1626124910.142,"0"],[1626125030.142,"0"],[1626125150.142,"0"],[1626125270.142,"0"],[1626125390.142,"0"],[1626125510.142,"0"],[1626125630.142,"0"],[1626125750.142,"0"],[1626125870.142,"0"],[1626125990.142,"0"],[1626126110.142,"0"],[1626126230.142,"0"],[1626126350.142,"0"],[1626126470.142,"0"],[1626126590.142,"0"],[1626126710.142,"0"],[1626126830.142,"0"],[1626126950.142,"0"],[1626127070.142,"0"],[1626127190.142,"0"],[1626127310.142,"0"],[1626127430.142,"0"],[1626127550.142,"0"],[1626127670.142,"0"],[1626127790.142,"0"],[1626127910.142,"0"],[1626128030.142,"0"],[1626128150.142,"0"],[1626128270.142,"0"],[1626128390.142,"0"],[1626128510.142,"0"],[1626128630.142,"0"],[1626128750.142,"0"],[1626128870.142,"0"],[1626128990.142,"0"],[1626129110.142,"0"],[1626129230.142,"0"],[1626129350.142,"0"],[1626129470.142,"0"],[1626129590.142,"0"],[1626129710.142,"0"],[1626129830.142,"0"],[1626129950.142,"0"],[1626130070.142,"0"],[1626130190.142,"0"],[1626130310.142,"0"],[1626130430.142,"0"],[1626130550.142,"0"],[1626130670.142,"0"],[1626130790.142,"0"],[1626130910.142,"0"],[1626131030.142,"0"],[1626131150.142,"0"],[1626131270.142,"0"],[1626131390.142,"0"],[1626131510.142,"0"],[1626131630.142,"0"],[1626131750.142,"0"],[1626131870.142,"0"],[1626131990.142,"0"],[1626132110.142,"0"],[1626132230.142,"0"],[1626132350.142,"0"],[1626132470.142,"0"],[1626132590.142,"0"],[1626132710.142,"0"],[1626132830.142,"0"],[1626132950.142,"0"],[1626133070.142,"0"],[1626133190.142,"0"],[1626133310.142,"0"],[1626133430.142,"0"],[1626133550.142,"0"],[1626133670.142,"0"],[1626133790.142,"0"],[1626133910.142,"0"],[1626134030.142,"0"],[1626134150.142,"0"],[1626134270.142,"0"],[1626134390.142,"0"],[1626134510.142,"0"],[1626134630.142,"0"],[1626134750.142,"0"],[1626134870.142,"0"],[1626134990.142,"0"],[1626135110.142,"0"],[1626135230.142,"0"],[1626135350.142,"0"],[1626135470.142,"0"],[1626135590.142,"0"],[1626135710.142,"0"],[1626135830.142,"0"],[1626135950.142,"0"],[1626136070.142,"0"],[1626136190.142,"0"],[1626136310.142,"0"],[1626136430.142,"0"],[1626136550.142,"0"],[1626136670.142,"0"],[1626136790.142,"0"],[1626136910.142,"0"],[1626137030.142,"0"],[1626137150.142,"0"],[1626137270.142,"0"],[1626137390.142,"0"],[1626137510.142,"0"],[1626137630.142,"0"],[1626137750.142,"0"],[1626137870.142,"0"],[1626137990.142,"0"],[1626138110.142,"0"],[1626138230.142,"0"],[1626138350.142,"0"],[1626138470.142,"0"],[1626138590.142,"0"],[1626138710.142,"0"],[1626138830.142,"0"],[1626138950.142,"0"],[1626139070.142,"0"],[1626139190.142,"0"],[1626139310.142,"0"],[1626139430.142,"0"],[1626139550.142,"0"],[1626139670.142,"0"],[1626139790.142,"0"],[1626139910.142,"0"],[1626140030.142,"0"],[1626140150.142,"0"],[1626140270.142,"0"],[1626140390.142,"0"],[1626140510.142,"0"],[1626140630.142,"0"],[1626140750.142,"0"],[1626140870.142,"0"],[1626140990.142,"0"],[1626141110.142,"0"],[1626141230.142,"0"],[1626141350.142,"0"],[1626141470.142,"0"],[1626141590.142,"0"],[1626141710.142,"0"],[1626141830.142,"0"],[1626141950.142,"0"],[1626142070.142,"0"],[1626142190.142,"0"],[1626142310.142,"0"],[1626142430.142,"0"],[1626142550.142,"0"],[1626142670.142,"0"],[1626142790.142,"0"],[1626142910.142,"0"],[1626143030.142,"0"],[1626143150.142,"0"],[1626143270.142,"0"],[1626143390.142,"0"],[1626143510.142,"0"],[1626143630.142,"0"],[1626143750.142,"0"],[1626143870.142,"0"],[1626143990.142,"0"],[1626144110.142,"0"],[1626144230.142,"0"],[1626144350.142,"0"],[1626144470.142,"0"],[1626144590.142,"0"],[1626144710.142,"0"],[1626144830.142,"0"],[1626144950.142,"0"],[1626145070.142,"0"],[1626145190.142,"0"],[1626145310.142,"0"],[1626145430.142,"0"],[1626145550.142,"0"],[1626145670.142,"0"],[1626145790.142,"0"],[1626145910.142,"0"],[1626146030.142,"0"],[1626146150.142,"0"],[1626146270.142,"0"],[1626146390.142,"0"],[1626146510.142,"0"],[1626146630.142,"0"],[1626146750.142,"0"],[1626146870.142,"0"],[1626146990.142,"0"],[1626147110.142,"0"],[1626147230.142,"0"],[1626147350.142,"0"],[1626147470.142,"0"],[1626147590.142,"0"],[1626147710.142,"0"],[1626147830.142,"0"],[1626147950.142,"0"],[1626148070.142,"0"],[1626148190.142,"0"],[1626148310.142,"0"],[1626148430.142,"0"],[1626148550.142,"0"],[1626148670.142,"0"],[1626148790.142,"0"],[1626148910.142,"0"],[1626149030.142,"0"],[1626149150.142,"0"],[1626149270.142,"0"],[1626149390.142,"0"],[1626149510.142,"0"],[1626149630.142,"0"],[1626149750.142,"0"],[1626149870.142,"0"],[1626149990.142,"0"],[1626150110.142,"0"],[1626150230.142,"0"],[1626150350.142,"0"],[1626150470.142,"0"],[1626150590.142,"0"],[1626150710.142,"0"],[1626150830.142,"0"],[1626150950.142,"0"],[1626151070.142,"0"],[1626151190.142,"0"],[1626151310.142,"0"],[1626151430.142,"0"],[1626151550.142,"0"],[1626151670.142,"0"],[1626151790.142,"0"],[1626151910.142,"0"],[1626152030.142,"0"],[1626152150.142,"0"],[1626152270.142,"0"],[1626152390.142,"0"],[1626152510.142,"0"],[1626152630.142,"0"],[1626152750.142,"0"],[1626152870.142,"0"],[1626152990.142,"0"],[1626153110.142,"0"],[1626153230.142,"0"],[1626153350.142,"0"],[1626153470.142,"0"],[1626153590.142,"0"],[1626153710.142,"0"],[1626153830.142,"0"],[1626153950.142,"0"],[1626154070.142,"0"],[1626154190.142,"0"],[1626154310.142,"0"],[1626154430.142,"0"],[1626154550.142,"0"],[1626154670.142,"0"],[1626154790.142,"0"],[1626154910.142,"0"],[1626155030.142,"0"],[1626155150.142,"0"],[1626155270.142,"0"],[1626155390.142,"0"],[1626155510.142,"0"],[1626155630.142,"0"],[1626155750.142,"0"],[1626155870.142,"0"],[1626155990.142,"0"],[1626156110.142,"0"],[1626156230.142,"0"],[1626156350.142,"0"],[1626156470.142,"0"],[1626156590.142,"0"],[1626156710.142,"0"],[1626156830.142,"0"],[1626156950.142,"0"],[1626157070.142,"0"],[1626157190.142,"0"],[1626157310.142,"0"],[1626157430.142,"0"]]},{"metric":{"pod":"myapp-d748b8c48-4vs6j"},"values":[[1626071030.142,"1"],[1626071150.142,"1"],[1626071270.142,"1"],[1626071390.142,"1"],[1626071510.142,"0"],[1626071630.142,"0"],[1626071750.142,"0"],[1626071870.142,"0"],[1626071990.142,"0"],[1626072110.142,"1"],[1626072230.142,"1"],[1626072350.142,"1"],[1626072470.142,"1"],[1626072590.142,"1"],[1626072710.142,"1"],[1626072830.142,"1"],[1626072950.142,"1"],[1626073070.142,"1"],[1626073190.142,"1"],[1626073310.142,"1"],[1626073430.142,"1"],[1626073550.142,"1"],[1626073670.142,"1"],[1626073790.142,"1"],[1626073910.142,"1"],[1626074030.142,"1"],[1626074150.142,"0"],[1626074270.142,"0"],[1626074390.142,"1"],[1626074510.142,"1"],[1626074630.142,"1"],[1626074750.142,"1"],[1626074870.142,"1"],[1626074990.142,"1"],[1626075110.142,"1"],[1626075230.142,"1"],[1626075350.142,"1"],[1626075470.142,"0"],[1626075590.142,"1"],[1626075710.142,"1"],[1626075830.142,"0"],[1626075950.142,"1"],[1626076070.142,"1"],[1626076190.142,"1"],[1626076310.142,"1"],[1626076430.142,"1"],[1626076550.142,"1"],[1626076670.142,"1"],[1626076790.142,"1"],[1626076910.142,"1"],[1626077030.142,"1"],[1626077150.142,"1"],[1626077270.142,"1"],[1626077390.142,"1"],[1626077510.142,"1"],[1626077630.142,"0"],[1626077750.142,"0"],[1626077870.142,"0"],[1626077990.142,"0"],[1626078110.142,"1"],[1626078230.142,"1"],[1626078350.142,"1"],[1626078470.142,"1"],[1626078590.142,"0"],[1626078710.142,"1"],[1626078830.142,"1"],[1626078950.142,"1"],[1626079070.142,"0"],[1626079190.142,"0"],[1626079310.142,"0"],[1626079430.142,"0"],[1626079550.142,"0"],[1626079670.142,"1"],[1626079790.142,"1"],[1626079910.142,"1"],[1626080030.142,"1"],[1626080150.142,"0"],[1626080270.142,"0"],[1626080390.142,"0"],[1626080510.142,"1"],[1626080630.142,"1"],[1626080750.142,"0"],[1626080870.142,"0"],[1626080990.142,"1"],[1626081110.142,"1"],[1626081230.142,"1"],[1626081350.142,"1"],[1626081470.142,"1"],[1626081590.142,"1"],[1626081710.142,"1"],[1626081830.142,"1"],[1626081950.142,"0"],[1626082070.142,"0"],[1626082190.142,"0"],[1626082310.142,"1"],[1626082430.142,"1"],[1626082550.142,"1"],[1626082670.142,"1"],[1626082790.142,"1"],[1626082910.142,"1"],[1626083030.142,"0"],[1626083150.142,"0"],[1626083270.142,"1"],[1626083390.142,"1"],[1626083510.142,"0"],[1626083630.142,"0"],[1626083750.142,"0"],[1626083870.142,"0"],[1626083990.142,"1"],[1626084110.142,"1"],[1626084230.142,"1"],[1626084350.142,"0"],[1626084470.142,"1"],[1626084590.142,"1"],[1626084710.142,"1"],[1626084830.142,"1"],[1626084950.142,"1"],[1626085070.142,"1"],[1626085190.142,"1"],[1626085310.142,"0"],[1626085430.142,"1"],[1626085550.142,"1"],[1626085670.142,"0"],[1626085790.142,"0"],[1626085910.142,"1"],[1626086030.142,"1"],[1626086150.142,"1"],[1626086270.142,"1"],[1626086390.142,"1"],[1626086510.142,"0"],[1626086630.142,"0"],[1626086750.142,"1"],[1626086870.142,"1"],[1626086990.142,"1"],[1626087110.142,"0"],[1626087230.142,"1"],[1626087350.142,"1"],[1626087470.142,"1"],[1626087590.142,"1"],[1626087710.142,"0"],[1626087830.142,"0"],[1626087950.142,"1"],[1626088070.142,"1"],[1626088190.142,"1"],[1626088310.142,"1"],[1626088430.142,"1"],[1626088550.142,"0"],[1626088670.142,"1"],[1626088790.142,"1"],[1626088910.142,"1"],[1626089030.142,"1"],[1626089150.142,"1"],[1626089270.142,"1"],[1626089390.142,"1"],[1626089510.142,"1"],[1626089630.142,"0"],[1626089750.142,"1"],[1626089870.142,"1"],[1626089990.142,"1"],[1626090110.142,"1"],[1626090230.142,"1"],[1626090350.142,"0"],[1626090470.142,"1"],[1626090590.142,"1"],[1626090710.142,"0"],[1626090830.142,"0"],[1626090950.142,"1"],[1626091070.142,"1"],[1626091190.142,"1"],[1626091310.142,"1"],[1626091430.142,"1"],[1626091550.142,"1"],[1626091670.142,"1"],[1626091790.142,"0"],[1626091910.142,"1"],[1626092030.142,"1"],[1626092150.142,"1"],[1626092270.142,"1"],[1626092390.142,"1"],[1626092510.142,"1"],[1626092630.142,"1"],[1626092750.142,"0"],[1626092870.142,"0"],[1626092990.142,"0"],[1626093110.142,"0"],[1626093230.142,"1"],[1626093350.142,"1"],[1626093470.142,"1"],[1626093590.142,"1"],[1626093710.142,"1"],[1626093830.142,"1"],[1626093950.142,"1"],[1626094070.142,"1"],[1626094190.142,"1"],[1626094310.142,"1"],[1626094430.142,"1"],[1626094550.142,"1"],[1626094670.142,"1"],[1626094790.142,"1"],[1626094910.142,"1"],[1626095030.142,"1"],[1626095150.142,"1"],[1626095270.142,"1"],[1626095390.142,"1"],[1626095510.142,"0"],[1626095630.142,"1"],[1626095750.142,"1"],[1626095870.142,"0"],[1626095990.142,"0"],[1626096110.142,"1"],[1626096230.142,"1"],[1626096350.142,"1"],[1626096470.142,"1"],[1626096590.142,"1"],[1626096710.142,"1"],[1626096830.142,"1"],[1626096950.142,"0"],[1626097070.142,"0"],[1626097190.142,"0"],[1626097310.142,"1"],[1626097430.142,"1"],[1626097550.142,"1"],[1626097670.142,"1"],[1626097790.142,"1"],[1626097910.142,"0"],[1626098030.142,"0"],[1626098150.142,"0"],[1626098270.142,"1"],[1626098390.142,"1"],[1626098510.142,"1"],[1626098630.142,"1"],[1626098750.142,"1"],[1626098870.142,"0"],[1626098990.142,"0"],[1626099110.142,"0"],[1626099230.142,"0"],[1626099350.142,"1"],[1626099470.142,"1"],[1626099590.142,"1"],[1626099710.142,"1"],[1626099830.142,"1"],[1626099950.142,"1"],[1626100070.142,"1"],[1626100190.142,"1"],[1626100310.142,"1"],[1626100430.142,"1"],[1626100550.142,"1"],[1626100670.142,"0"],[1626100790.142,"1"],[1626100910.142,"1"],[1626101030.142,"1"],[1626101150.142,"1"],[1626101270.142,"1"],[1626101390.142,"1"],[1626101510.142,"1"],[1626101630.142,"1"],[1626101750.142,"1"],[1626101870.142,"1"],[1626101990.142,"1"],[1626102110.142,"1"],[1626102230.142,"1"],[1626102350.142,"1"],[1626102470.142,"1"],[1626102590.142,"1"],[1626102710.142,"1"],[1626102830.142,"0"],[1626102950.142,"1"],[1626103070.142,"1"],[1626103190.142,"1"],[1626103310.142,"0"],[1626103430.142,"0"],[1626103550.142,"0"],[1626103670.142,"0"],[1626103790.142,"0"],[1626103910.142,"1"],[1626104030.142,"1"],[1626104150.142,"1"],[1626104270.142,"1"],[1626104390.142,"1"],[1626104510.142,"1"],[1626104630.142,"1"],[1626104750.142,"1"],[1626104870.142,"1"],[1626104990.142,"1"],[1626105110.142,"1"],[1626105230.142,"1"],[1626105350.142,"1"],[1626105470.142,"1"],[1626105590.142,"1"],[1626105710.142,"0"],[1626105830.142,"0"],[1626105950.142,"0"],[1626106070.142,"0"],[1626106190.142,"1"],[1626106310.142,"1"],[1626106430.142,"1"],[1626106550.142,"1"],[1626106670.142,"1"],[1626106790.142,"1"],[1626106910.142,"1"],[1626107030.142,"1"],[1626107150.142,"1"],[1626107270.142,"1"],[1626107390.142,"0"],[1626107510.142,"1"],[1626107630.142,"1"],[1626107750.142,"1"],[1626107870.142,"1"],[1626107990.142,"1"],[1626108110.142,"1"],[1626108230.142,"1"],[1626108350.142,"1"],[1626108470.142,"0"],[1626108590.142,"1"],[1626108710.142,"1"],[1626108830.142,"1"],[1626108950.142,"1"],[1626109070.142,"0"],[1626109190.142,"1"],[1626109310.142,"1"],[1626109430.142,"1"],[1626109550.142,"1"],[1626109670.142,"1"],[1626109790.142,"1"],[1626109910.142,"1"],[1626110030.142,"1"],[1626110150.142,"1"],[1626110270.142,"1"],[1626110390.142,"1"],[1626110510.142,"1"],[1626110630.142,"1"],[1626110750.142,"1"],[1626110870.142,"1"],[1626110990.142,"1"],[1626111110.142,"1"],[1626111230.142,"1"],[1626111350.142,"1"],[1626111470.142,"1"],[1626111590.142,"1"],[1626111710.142,"1"],[1626111830.142,"1"],[1626111950.142,"1"],[1626112070.142,"1"],[1626112190.142,"0"],[1626112310.142,"1"],[1626112430.142,"1"],[1626112550.142,"0"],[1626112670.142,"1"],[1626112790.142,"1"],[1626112910.142,"1"],[1626113030.142,"1"],[1626113150.142,"1"],[1626113270.142,"0"],[1626113390.142,"0"],[1626113510.142,"0"],[1626113630.142,"0"],[1626113750.142,"1"],[1626113870.142,"1"],[1626113990.142,"1"],[1626114110.142,"1"],[1626114230.142,"1"],[1626114350.142,"1"],[1626114470.142,"1"],[1626114590.142,"1"],[1626114710.142,"1"],[1626114830.142,"1"],[1626114950.142,"1"],[1626115070.142,"0"],[1626115190.142,"1"],[1626115310.142,"1"],[1626115430.142,"1"],[1626115550.142,"0"],[1626115670.142,"0"],[1626115790.142,"1"],[1626115910.142,"1"],[1626116030.142,"0"],[1626116150.142,"1"],[1626116270.142,"1"],[1626116390.142,"0"],[1626116510.142,"1"],[1626116630.142,"1"],[1626116750.142,"1"],[1626116870.142,"1"],[1626116990.142,"1"],[1626117110.142,"1"],[1626117230.142,"0"],[1626117350.142,"0"],[1626117470.142,"0"],[1626117590.142,"1"],[1626117710.142,"1"],[1626117830.142,"1"],[1626117950.142,"1"],[1626118070.142,"1"],[1626118190.142,"1"],[1626118310.142,"1"],[1626118430.142,"1"],[1626118550.142,"1"],[1626118670.142,"0"],[1626118790.142,"0"],[1626118910.142,"1"],[1626119030.142,"1"],[1626119150.142,"1"],[1626119270.142,"0"],[1626119390.142,"1"],[1626119510.142,"1"],[1626119630.142,"1"],[1626119750.142,"0"],[1626119870.142,"1"],[1626119990.142,"1"],[1626120110.142,"1"],[1626120230.142,"1"],[1626120350.142,"1"],[1626120470.142,"1"],[1626120590.142,"0"],[1626120710.142,"0"],[1626120830.142,"0"],[1626120950.142,"0"],[1626121070.142,"0"],[1626121190.142,"1"],[1626121310.142,"1"],[1626121430.142,"1"],[1626121550.142,"1"],[1626121670.142,"1"],[1626121790.142,"1"],[1626121910.142,"1"],[1626122030.142,"1"],[1626122150.142,"0"],[1626122270.142,"0"],[1626122390.142,"1"],[1626122510.142,"1"],[1626122630.142,"1"],[1626122750.142,"1"],[1626122870.142,"1"],[1626122990.142,"1"],[1626123110.142,"1"],[1626123230.142,"0"],[1626123350.142,"1"],[1626123470.142,"1"],[1626123590.142,"1"],[1626123710.142,"1"],[1626123830.142,"1"],[1626123950.142,"1"],[1626124070.142,"1"],[1626124190.142,"0"],[1626124310.142,"0"],[1626124430.142,"0"],[1626124550.142,"1"],[1626124670.142,"1"],[1626124790.142,"0"],[1626124910.142,"1"],[1626125030.142,"1"],[1626125150.142,"1"],[1626125270.142,"1"],[1626125390.142,"1"],[1626125510.142,"0"],[1626125630.142,"0"],[1626125750.142,"0"],[1626125870.142,"1"],[1626125990.142,"1"],[1626126110.142,"0"],[1626126230.142,"0"],[1626126350.142,"1"],[1626126470.142,"1"],[1626126590.142,"1"],[1626126710.142,"1"],[1626126830.142,"1"],[1626126950.142,"1"],[1626127070.142,"1"],[1626127190.142,"1"],[1626127310.142,"1"],[1626127430.142,"1"],[1626127550.142,"0"],[1626127670.142,"1"],[1626127790.142,"1"],[1626127910.142,"1"],[1626128030.142,"1"],[1626128150.142,"1"],[1626128270.142,"1"],[1626128390.142,"1"],[1626128510.142,"1"],[1626128630.142,"0"],[1626128750.142,"1"],[1626128870.142,"1"],[1626128990.142,"1"],[1626129110.142,"1"],[1626129230.142,"1"],[1626129350.142,"1"],[1626129470.142,"1"],[1626129590.142,"1"],[1626129710.142,"1"],[1626129830.142,"1"],[1626129950.142,"1"],[1626130070.142,"1"],[1626130190.142,"1"],[1626130310.142,"1"],[1626130430.142,"0"],[1626130550.142,"1"],[1626130670.142,"1"],[1626130790.142,"1"],[1626130910.142,"1"],[1626131030.142,"1"],[1626131150.142,"1"],[1626131270.142,"1"],[1626131390.142,"1"],[1626131510.142,"1"],[1626131630.142,"1"],[1626131750.142,"1"],[1626131870.142,"1"],[1626131990.142,"1"],[1626132110.142,"1"],[1626132230.142,"1"],[1626132350.142,"1"],[1626132470.142,"0"],[1626132590.142,"0"],[1626132710.142,"0"],[1626132830.142,"1"],[1626132950.142,"1"],[1626133070.142,"1"],[1626133190.142,"0"],[1626133310.142,"0"],[1626133430.142,"0"],[1626133550.142,"0"],[1626133670.142,"0"],[1626133790.142,"1"],[1626133910.142,"1"],[1626134030.142,"1"],[1626134150.142,"1"],[1626134270.142,"1"],[1626134390.142,"1"],[1626134510.142,"1"],[1626134630.142,"1"],[1626134750.142,"1"],[1626134870.142,"1"],[1626134990.142,"1"],[1626135110.142,"1"],[1626135230.142,"1"],[1626135350.142,"0"],[1626135470.142,"0"],[1626135590.142,"0"],[1626135710.142,"0"],[1626135830.142,"0"],[1626135950.142,"0"],[1626136070.142,"0"],[1626136190.142,"0"],[1626136310.142,"0"],[1626136430.142,"0"],[1626136550.142,"1"],[1626136670.142,"1"],[1626136790.142,"1"],[1626136910.142,"1"],[1626137030.142,"1"],[1626137150.142,"1"],[1626137270.142,"1"],[1626137390.142,"1"],[1626137510.142,"1"],[1626137630.142,"1"],[1626137750.142,"1"],[1626137870.142,"1"],[1626137990.142,"1"],[1626138110.142,"1"],[1626138230.142,"0"],[1626138350.142,"0"],[1626138470.142,"0"],[1626138590.142,"1"],[1626138710.142,"1"],[1626138830.142,"1"],[1626138950.142,"1"],[1626139070.142,"1"],[1626139190.142,"0"],[1626139310.142,"0"],[1626139430.142,"0"],[1626139550.142,"1"],[1626139670.142,"1"],[1626139790.142,"1"],[1626139910.142,"1"],[1626140030.142,"1"],[1626140150.142,"1"],[1626140270.142,"0"],[1626140390.142,"0"],[1626140510.142,"0"],[1626140630.142,"0"],[1626140750.142,"0"],[1626140870.142,"0"],[1626140990.142,"1"],[1626141110.142,"1"],[1626141230.142,"1"],[1626141350.142,"1"],[1626141470.142,"1"],[1626141590.142,"1"],[1626141710.142,"0"],[1626141830.142,"0"],[1626141950.142,"1"],[1626142070.142,"1"],[1626142190.142,"1"],[1626142310.142,"1"],[1626142430.142,"1"],[1626142550.142,"1"],[1626142670.142,"1"],[1626142790.142,"1"],[1626142910.142,"1"],[1626143030.142,"0"],[1626143150.142,"1"],[1626143270.142,"1"],[1626143390.142,"1"],[1626143510.142,"1"],[1626143630.142,"1"],[1626143750.142,"0"],[1626143870.142,"1"],[1626143990.142,"1"],[1626144110.142,"0"],[1626144230.142,"1"],[1626144350.142,"1"],[1626144470.142,"1"],[1626144590.142,"1"],[1626144710.142,"1"],[1626144830.142,"0"],[1626144950.142,"0"],[1626145070.142,"0"],[1626145190.142,"1"],[1626145310.142,"1"],[1626145430.142,"1"],[1626145550.142,"1"],[1626145670.142,"1"],[1626145790.142,"1"],[1626145910.142,"0"],[1626146030.142,"0"],[1626146150.142,"1"],[1626146270.142,"1"],[1626146390.142,"1"],[1626146510.142,"1"],[1626146630.142,"0"],[1626146750.142,"0"],[1626146870.142,"0"],[1626146990.142,"0"],[1626147110.142,"0"],[1626147230.142,"0"],[1626147350.142,"0"],[1626147470.142,"1"],[1626147590.142,"1"],[1626147710.142,"1"],[1626147830.142,"1"],[1626147950.142,"1"],[1626148070.142,"0"],[1626148190.142,"1"],[1626148310.142,"1"],[1626148430.142,"0"],[1626148550.142,"1"],[1626148670.142,"1"],[1626148790.142,"1"],[1626148910.142,"0"],[1626149030.142,"1"],[1626149150.142,"1"],[1626149270.142,"1"],[1626149390.142,"1"],[1626149510.142,"1"],[1626149630.142,"1"],[1626149750.142,"1"],[1626149870.142,"1"],[1626149990.142,"1"],[1626150110.142,"1"],[1626150230.142,"1"],[1626150350.142,"1"],[1626150470.142,"1"],[1626150590.142,"1"],[1626150710.142,"1"],[1626150830.142,"1"],[1626150950.142,"1"],[1626151070.142,"1"],[1626151190.142,"1"],[1626151310.142,"1"],[1626151430.142,"1"],[1626151550.142,"1"],[1626151670.142,"1"],[1626151790.142,"1"],[1626151910.142,"1"],[1626152030.142,"1"],[1626152150.142,"1"],[1626152270.142,"1"],[1626152390.142,"1"],[1626152510.142,"1"],[1626152630.142,"0"],[1626152750.142,"1"],[1626152870.142,"1"],[1626152990.142,"1"],[1626153110.142,"1"],[1626153230.142,"1"],[1626153350.142,"1"],[1626153470.142,"1"],[1626153590.142,"1"],[1626153710.142,"0"],[1626153830.142,"0"],[1626153950.142,"1"],[1626154070.142,"1"],[1626154190.142,"1"],[1626154310.142,"1"],[1626154430.142,"0"],[1626154550.142,"1"],[1626154670.142,"1"],[1626154790.142,"1"],[1626154910.142,"1"],[1626155030.142,"1"],[1626155150.142,"0"],[1626155270.142,"0"],[1626155390.142,"0"],[1626155510.142,"1"],[1626155630.142,"1"],[1626155750.142,"1"],[1626155870.142,"1"],[1626155990.142,"1"],[1626156110.142,"1"],[1626156230.142,"1"],[1626156350.142,"1"],[1626156470.142,"1"],[1626156590.142,"1"],[1626156710.142,"1"],[1626156830.142,"0"],[1626156950.142,"1"],[1626157070.142,"1"],[1626157190.142,"1"],[1626157310.142,"1"],[1626157430.142,"0"]]},{"metric":{"pod":"myapp-d748b8c48-j66hk"},"values":[[1626071030.142,"1"],[1626071150.142,"1"],[1626071270.142,"1"],[1626071390.142,"0"],[1626071510.142,"1"],[1626071630.142,"1"],[1626071750.142,"1"],[1626071870.142,"1"],[1626071990.142,"1"],[1626072110.142,"1"],[1626072230.142,"0"],[1626072350.142,"0"],[1626072470.142,"1"],[1626072590.142,"1"],[1626072710.142,"1"],[1626072830.142,"0"],[1626072950.142,"1"],[1626073070.142,"1"],[1626073190.142,"1"],[1626073310.142,"1"],[1626073430.142,"1"],[1626073550.142,"1"],[1626073670.142,"1"],[1626073790.142,"1"],[1626073910.142,"1"],[1626074030.142,"1"],[1626074150.142,"1"],[1626074270.142,"1"],[1626074390.142,"1"],[1626074510.142,"1"],[1626074630.142,"0"],[1626074750.142,"1"],[1626074870.142,"1"],[1626074990.142,"1"],[1626075110.142,"1"],[1626075230.142,"1"],[1626075350.142,"1"],[1626075470.142,"1"],[1626075590.142,"1"],[1626075710.142,"1"],[1626075830.142,"1"],[1626075950.142,"1"],[1626076070.142,"1"],[1626076190.142,"1"],[1626076310.142,"1"],[1626076430.142,"1"],[1626076550.142,"1"],[1626076670.142,"1"],[1626076790.142,"1"],[1626076910.142,"1"],[1626077030.142,"1"],[1626077150.142,"1"],[1626077270.142,"1"],[1626077390.142,"1"],[1626077510.142,"1"],[1626077630.142,"1"],[1626077750.142,"0"],[1626077870.142,"0"],[1626077990.142,"0"],[1626078110.142,"0"],[1626078230.142,"0"],[1626078350.142,"0"],[1626078470.142,"0"],[1626078590.142,"0"],[1626078710.142,"0"],[1626078830.142,"0"],[1626078950.142,"1"],[1626079070.142,"1"],[1626079190.142,"1"],[1626079310.142,"1"],[1626079430.142,"1"],[1626079550.142,"1"],[1626079670.142,"0"],[1626079790.142,"0"],[1626079910.142,"0"],[1626080030.142,"0"],[1626080150.142,"1"],[1626080270.142,"1"],[1626080390.142,"1"],[1626080510.142,"1"],[1626080630.142,"1"],[1626080750.142,"1"],[1626080870.142,"0"],[1626080990.142,"0"],[1626081110.142,"1"],[1626081230.142,"1"],[1626081350.142,"1"],[1626081470.142,"1"],[1626081590.142,"1"],[1626081710.142,"1"],[1626081830.142,"1"],[1626081950.142,"1"],[1626082070.142,"1"],[1626082190.142,"1"],[1626082310.142,"1"],[1626082430.142,"1"],[1626082550.142,"1"],[1626082670.142,"1"],[1626082790.142,"0"],[1626082910.142,"0"],[1626083030.142,"0"],[1626083150.142,"1"],[1626083270.142,"1"],[1626083390.142,"1"],[1626083510.142,"1"],[1626083630.142,"1"],[1626083750.142,"1"],[1626083870.142,"1"],[1626083990.142,"1"],[1626084110.142,"1"],[1626084230.142,"1"],[1626084350.142,"1"],[1626084470.142,"1"],[1626084590.142,"1"],[1626084710.142,"1"],[1626084830.142,"1"],[1626084950.142,"1"],[1626085070.142,"1"],[1626085190.142,"1"],[1626085310.142,"1"],[1626085430.142,"0"],[1626085550.142,"0"],[1626085670.142,"0"],[1626085790.142,"1"],[1626085910.142,"1"],[1626086030.142,"0"],[1626086150.142,"0"],[1626086270.142,"0"],[1626086390.142,"0"],[1626086510.142,"1"],[1626086630.142,"1"],[1626086750.142,"0"],[1626086870.142,"1"],[1626086990.142,"1"],[1626087110.142,"1"],[1626087230.142,"1"],[1626087350.142,"0"],[1626087470.142,"0"],[1626087590.142,"1"],[1626087710.142,"1"],[1626087830.142,"1"],[1626087950.142,"1"],[1626088070.142,"1"],[1626088190.142,"1"],[1626088310.142,"1"],[1626088430.142,"0"],[1626088550.142,"1"],[1626088670.142,"1"],[1626088790.142,"1"],[1626088910.142,"1"],[1626089030.142,"1"],[1626089150.142,"1"],[1626089270.142,"1"],[1626089390.142,"1"],[1626089510.142,"1"],[1626089630.142,"1"],[1626089750.142,"1"],[1626089870.142,"1"],[1626089990.142,"0"],[1626090110.142,"1"],[1626090230.142,"1"],[1626090350.142,"1"],[1626090470.142,"1"],[1626090590.142,"1"],[1626090710.142,"1"],[1626090830.142,"1"],[1626090950.142,"1"],[1626091070.142,"1"],[1626091190.142,"1"],[1626091310.142,"1"],[1626091430.142,"1"],[1626091550.142,"1"],[1626091670.142,"1"],[1626091790.142,"1"],[1626091910.142,"1"],[1626092030.142,"1"],[1626092150.142,"1"],[1626092270.142,"1"],[1626092390.142,"1"],[1626092510.142,"1"],[1626092630.142,"1"],[1626092750.142,"1"],[1626092870.142,"1"],[1626092990.142,"1"],[1626093110.142,"1"],[1626093230.142,"1"],[1626093350.142,"1"],[1626093470.142,"1"],[1626093590.142,"1"],[1626093710.142,"1"],[1626093830.142,"1"],[1626093950.142,"1"],[1626094070.142,"1"],[1626094190.142,"1"],[1626094310.142,"1"],[1626094430.142,"1"],[1626094550.142,"0"],[1626094670.142,"1"],[1626094790.142,"1"],[1626094910.142,"1"],[1626095030.142,"1"],[1626095150.142,"1"],[1626095270.142,"1"],[1626095390.142,"1"],[1626095510.142,"1"],[1626095630.142,"1"],[1626095750.142,"1"],[1626095870.142,"1"],[1626095990.142,"1"],[1626096110.142,"1"],[1626096230.142,"1"],[1626096350.142,"0"],[1626096470.142,"0"],[1626096590.142,"0"],[1626096710.142,"0"],[1626096830.142,"0"],[1626096950.142,"0"],[1626097070.142,"1"],[1626097190.142,"1"],[1626097310.142,"1"],[1626097430.142,"1"],[1626097550.142,"1"],[1626097670.142,"1"],[1626097790.142,"1"],[1626097910.142,"1"],[1626098030.142,"1"],[1626098150.142,"1"],[1626098270.142,"1"],[1626098390.142,"0"],[1626098510.142,"0"],[1626098630.142,"0"],[1626098750.142,"0"],[1626098870.142,"0"],[1626098990.142,"1"],[1626099110.142,"1"],[1626099230.142,"1"],[1626099350.142,"1"],[1626099470.142,"0"],[1626099590.142,"1"],[1626099710.142,"1"],[1626099830.142,"1"],[1626099950.142,"1"],[1626100070.142,"1"],[1626100190.142,"0"],[1626100310.142,"0"],[1626100430.142,"0"],[1626100550.142,"1"],[1626100670.142,"1"],[1626100790.142,"0"],[1626100910.142,"0"],[1626101030.142,"1"],[1626101150.142,"1"],[1626101270.142,"1"],[1626101390.142,"1"],[1626101510.142,"1"],[1626101630.142,"1"],[1626101750.142,"1"],[1626101870.142,"0"],[1626101990.142,"0"],[1626102110.142,"0"],[1626102230.142,"1"],[1626102350.142,"1"],[1626102470.142,"1"],[1626102590.142,"1"],[1626102710.142,"1"],[1626102830.142,"1"],[1626102950.142,"0"],[1626103070.142,"0"],[1626103190.142,"0"],[1626103310.142,"1"],[1626103430.142,"1"],[1626103550.142,"1"],[1626103670.142,"1"],[1626103790.142,"1"],[1626103910.142,"1"],[1626104030.142,"1"],[1626104150.142,"1"],[1626104270.142,"1"],[1626104390.142,"0"],[1626104510.142,"1"],[1626104630.142,"1"],[1626104750.142,"1"],[1626104870.142,"1"],[1626104990.142,"1"],[1626105110.142,"1"],[1626105230.142,"1"],[1626105350.142,"1"],[1626105470.142,"1"],[1626105590.142,"1"],[1626105710.142,"1"],[1626105830.142,"1"],[1626105950.142,"1"],[1626106070.142,"1"],[1626106190.142,"1"],[1626106310.142,"1"],[1626106430.142,"1"],[1626106550.142,"1"],[1626106670.142,"0"],[1626106790.142,"0"],[1626106910.142,"0"],[1626107030.142,"1"],[1626107150.142,"1"],[1626107270.142,"1"],[1626107390.142,"0"],[1626107510.142,"0"],[1626107630.142,"1"],[1626107750.142,"1"],[1626107870.142,"1"],[1626107990.142,"1"],[1626108110.142,"0"],[1626108230.142,"1"],[1626108350.142,"1"],[1626108470.142,"1"],[1626108590.142,"1"],[1626108710.142,"1"],[1626108830.142,"1"],[1626108950.142,"1"],[1626109070.142,"1"],[1626109190.142,"1"],[1626109310.142,"1"],[1626109430.142,"0"],[1626109550.142,"1"],[1626109670.142,"1"],[1626109790.142,"1"],[1626109910.142,"1"],[1626110030.142,"0"],[1626110150.142,"0"],[1626110270.142,"0"],[1626110390.142,"0"],[1626110510.142,"0"],[1626110630.142,"1"],[1626110750.142,"1"],[1626110870.142,"1"],[1626110990.142,"0"],[1626111110.142,"1"],[1626111230.142,"1"],[1626111350.142,"1"],[1626111470.142,"1"],[1626111590.142,"1"],[1626111710.142,"1"],[1626111830.142,"1"],[1626111950.142,"1"],[1626112070.142,"1"],[1626112190.142,"1"],[1626112310.142,"1"],[1626112430.142,"1"],[1626112550.142,"1"],[1626112670.142,"1"],[1626112790.142,"1"],[1626112910.142,"1"],[1626113030.142,"1"],[1626113150.142,"1"],[1626113270.142,"1"],[1626113390.142,"1"],[1626113510.142,"1"],[1626113630.142,"1"],[1626113750.142,"0"],[1626113870.142,"1"],[1626113990.142,"1"],[1626114110.142,"1"],[1626114230.142,"1"],[1626114350.142,"1"],[1626114470.142,"1"],[1626114590.142,"1"],[1626114710.142,"1"],[1626114830.142,"0"],[1626114950.142,"1"],[1626115070.142,"1"],[1626115190.142,"1"],[1626115310.142,"1"],[1626115430.142,"1"],[1626115550.142,"1"],[1626115670.142,"1"],[1626115790.142,"0"],[1626115910.142,"0"],[1626116030.142,"1"],[1626116150.142,"1"],[1626116270.142,"1"],[1626116390.142,"1"],[1626116510.142,"1"],[1626116630.142,"1"],[1626116750.142,"1"],[1626116870.142,"1"],[1626116990.142,"0"],[1626117110.142,"1"],[1626117230.142,"1"],[1626117350.142,"1"],[1626117470.142,"1"],[1626117590.142,"1"],[1626117710.142,"1"],[1626117830.142,"1"],[1626117950.142,"1"],[1626118070.142,"1"],[1626118190.142,"1"],[1626118310.142,"1"],[1626118430.142,"1"],[1626118550.142,"0"],[1626118670.142,"0"],[1626118790.142,"0"],[1626118910.142,"0"],[1626119030.142,"0"],[1626119150.142,"1"],[1626119270.142,"1"],[1626119390.142,"1"],[1626119510.142,"1"],[1626119630.142,"1"],[1626119750.142,"1"],[1626119870.142,"1"],[1626119990.142,"1"],[1626120110.142,"0"],[1626120230.142,"0"],[1626120350.142,"0"],[1626120470.142,"0"],[1626120590.142,"1"],[1626120710.142,"1"],[1626120830.142,"1"],[1626120950.142,"1"],[1626121070.142,"1"],[1626121190.142,"0"],[1626121310.142,"0"],[1626121430.142,"0"],[1626121550.142,"0"],[1626121670.142,"0"],[1626121790.142,"0"],[1626121910.142,"0"],[1626122030.142,"0"],[1626122150.142,"0"],[1626122270.142,"1"],[1626122390.142,"1"],[1626122510.142,"0"],[1626122630.142,"0"],[1626122750.142,"1"],[1626122870.142,"1"],[1626122990.142,"1"],[1626123110.142,"1"],[1626123230.142,"1"],[1626123350.142,"0"],[1626123470.142,"1"],[1626123590.142,"1"],[1626123710.142,"1"],[1626123830.142,"1"],[1626123950.142,"0"],[1626124070.142,"0"],[1626124190.142,"0"],[1626124310.142,"1"],[1626124430.142,"1"],[1626124550.142,"1"],[1626124670.142,"1"],[1626124790.142,"1"],[1626124910.142,"1"],[1626125030.142,"1"],[1626125150.142,"1"],[1626125270.142,"1"],[1626125390.142,"1"],[1626125510.142,"1"],[1626125630.142,"1"],[1626125750.142,"1"],[1626125870.142,"1"],[1626125990.142,"1"],[1626126110.142,"1"],[1626126230.142,"1"],[1626126350.142,"1"],[1626126470.142,"1"],[1626126590.142,"1"],[1626126710.142,"1"],[1626126830.142,"1"],[1626126950.142,"1"],[1626127070.142,"1"],[1626127190.142,"0"],[1626127310.142,"0"],[1626127430.142,"0"],[1626127550.142,"0"],[1626127670.142,"0"],[1626127790.142,"0"],[1626127910.142,"0"],[1626128030.142,"0"],[1626128150.142,"1"],[1626128270.142,"1"],[1626128390.142,"1"],[1626128510.142,"0"],[1626128630.142,"1"],[1626128750.142,"1"],[1626128870.142,"1"],[1626128990.142,"0"],[1626129110.142,"0"],[1626129230.142,"0"],[1626129350.142,"0"],[1626129470.142,"1"],[1626129590.142,"1"],[1626129710.142,"1"],[1626129830.142,"1"],[1626129950.142,"0"],[1626130070.142,"0"],[1626130190.142,"0"],[1626130310.142,"1"],[1626130430.142,"1"],[1626130550.142,"1"],[1626130670.142,"1"],[1626130790.142,"1"],[1626130910.142,"1"],[1626131030.142,"1"],[1626131150.142,"1"],[1626131270.142,"1"],[1626131390.142,"1"],[1626131510.142,"1"],[1626131630.142,"1"],[1626131750.142,"1"],[1626131870.142,"1"],[1626131990.142,"1"],[1626132110.142,"1"],[1626132230.142,"0"],[1626132350.142,"1"],[1626132470.142,"1"],[1626132590.142,"1"],[1626132710.142,"1"],[1626132830.142,"1"],[1626132950.142,"1"],[1626133070.142,"1"],[1626133190.142,"1"],[1626133310.142,"1"],[1626133430.142,"1"],[1626133550.142,"1"],[1626133670.142,"1"],[1626133790.142,"1"],[1626133910.142,"1"],[1626134030.142,"1"],[1626134150.142,"1"],[1626134270.142,"1"],[1626134390.142,"1"],[1626134510.142,"1"],[1626134630.142,"1"],[1626134750.142,"1"],[1626134870.142,"1"],[1626134990.142,"1"],[1626135110.142,"1"],[1626135230.142,"1"],[1626135350.142,"1"],[1626135470.142,"1"],[1626135590.142,"1"],[1626135710.142,"1"],[1626135830.142,"1"],[1626135950.142,"1"],[1626136070.142,"1"],[1626136190.142,"1"],[1626136310.142,"1"],[1626136430.142,"1"],[1626136550.142,"0"],[1626136670.142,"1"],[1626136790.142,"1"],[1626136910.142,"0"],[1626137030.142,"1"],[1626137150.142,"1"],[1626137270.142,"0"],[1626137390.142,"1"],[1626137510.142,"1"],[1626137630.142,"1"],[1626137750.142,"1"],[1626137870.142,"1"],[1626137990.142,"1"],[1626138110.142,"1"],[1626138230.142,"1"],[1626138350.142,"1"],[1626138470.142,"1"],[1626138590.142,"1"],[1626138710.142,"1"],[1626138830.142,"1"],[1626138950.142,"1"],[1626139070.142,"1"],[1626139190.142,"0"],[1626139310.142,"0"],[1626139430.142,"0"],[1626139550.142,"1"],[1626139670.142,"1"],[1626139790.142,"1"],[1626139910.142,"1"],[1626140030.142,"0"],[1626140150.142,"1"],[1626140270.142,"1"],[1626140390.142,"0"],[1626140510.142,"1"],[1626140630.142,"1"],[1626140750.142,"1"],[1626140870.142,"1"],[1626140990.142,"0"],[1626141110.142,"0"],[1626141230.142,"0"],[1626141350.142,"1"],[1626141470.142,"1"],[1626141590.142,"1"],[1626141710.142,"1"],[1626141830.142,"1"],[1626141950.142,"1"],[1626142070.142,"0"],[1626142190.142,"0"],[1626142310.142,"1"],[1626142430.142,"1"],[1626142550.142,"1"],[1626142670.142,"1"],[1626142790.142,"1"],[1626142910.142,"0"],[1626143030.142,"1"],[1626143150.142,"1"],[1626143270.142,"1"],[1626143390.142,"0"],[1626143510.142,"0"],[1626143630.142,"0"],[1626143750.142,"1"],[1626143870.142,"1"],[1626143990.142,"1"],[1626144110.142,"1"],[1626144230.142,"1"],[1626144350.142,"1"],[1626144470.142,"1"],[1626144590.142,"1"],[1626144710.142,"1"],[1626144830.142,"1"],[1626144950.142,"1"],[1626145070.142,"0"],[1626145190.142,"0"],[1626145310.142,"0"],[1626145430.142,"0"],[1626145550.142,"0"],[1626145670.142,"0"],[1626145790.142,"1"],[1626145910.142,"1"],[1626146030.142,"1"],[1626146150.142,"1"],[1626146270.142,"1"],[1626146390.142,"1"],[1626146510.142,"1"],[1626146630.142,"1"],[1626146750.142,"1"],[1626146870.142,"1"],[1626146990.142,"1"],[1626147110.142,"1"],[1626147230.142,"1"],[1626147350.142,"1"],[1626147470.142,"1"],[1626147590.142,"1"],[1626147710.142,"1"],[1626147830.142,"0"],[1626147950.142,"0"],[1626148070.142,"0"],[1626148190.142,"1"],[1626148310.142,"1"],[1626148430.142,"1"],[1626148550.142,"1"],[1626148670.142,"1"],[1626148790.142,"1"],[1626148910.142,"1"],[1626149030.142,"1"],[1626149150.142,"0"],[1626149270.142,"1"],[1626149390.142,"1"],[1626149510.142,"1"],[1626149630.142,"1"],[1626149750.142,"1"],[1626149870.142,"0"],[1626149990.142,"1"],[1626150110.142,"1"],[1626150230.142,"1"],[1626150350.142,"0"],[1626150470.142,"0"],[1626150590.142,"0"],[1626150710.142,"0"],[1626150830.142,"0"],[1626150950.142,"1"],[1626151070.142,"1"],[1626151190.142,"1"],[1626151310.142,"0"],[1626151430.142,"0"],[1626151550.142,"0"],[1626151670.142,"0"],[1626151790.142,"0"],[1626151910.142,"0"],[1626152030.142,"0"],[1626152150.142,"1"],[1626152270.142,"1"],[1626152390.142,"1"],[1626152510.142,"0"],[1626152630.142,"0"],[1626152750.142,"0"],[1626152870.142,"0"],[1626152990.142,"0"],[1626153110.142,"0"],[1626153230.142,"0"],[1626153350.142,"0"],[1626153470.142,"0"],[1626153590.142,"1"],[1626153710.142,"1"],[1626153830.142,"1"],[1626153950.142,"1"],[1626154070.142,"0"],[1626154190.142,"0"],[1626154310.142,"1"],[1626154430.142,"1"],[1626154550.142,"1"],[1626154670.142,"0"],[1626154790.142,"1"],[1626154910.142,"1"],[1626155030.142,"1"],[1626155150.142,"1"],[1626155270.142,"1"],[1626155390.142,"1"],[1626155510.142,"1"],[1626155630.142,"0"],[1626155750.142,"0"],[1626155870.142,"0"],[1626155990.142,"0"],[1626156110.142,"0"],[1626156230.142,"1"],[1626156350.142,"1"],[1626156470.142,"1"],[1626156590.142,"0"],[1626156710.142,"0"],[1626156830.142,"1"],[1626156950.142,"1"],[1626157070.142,"0"],[1626157190.142,"0"],[1626157310.142,"1"],[1626157430.142,"1"]]},{"metric":{"pod":"pumba-nr77p"},"values":[[1626071030.142,"0"],[1626071150.142,"0"],[1626071270.142,"0"],[1626071390.142,"0"],[1626071510.142,"0"],[1626071630.142,"0"],[1626071750.142,"0"],[1626071870.142,"0"],[1626071990.142,"0"],[1626072110.142,"0"],[1626072230.142,"0"],[1626072350.142,"0"],[1626072470.142,"0"],[1626072590.142,"0"],[1626072710.142,"0"],[1626072830.142,"0"],[1626072950.142,"0"],[1626073070.142,"0"],[1626073190.142,"0"],[1626073310.142,"0"],[1626073430.142,"0"],[1626073550.142,"0"],[1626073670.142,"0"],[1626073790.142,"0"],[1626073910.142,"0"],[1626074030.142,"0"],[1626074150.142,"0"],[1626074270.142,"0"],[1626074390.142,"0"],[1626074510.142,"0"],[1626074630.142,"0"],[1626074750.142,"0"],[1626074870.142,"0"],[1626074990.142,"0"],[1626075110.142,"0"],[1626075230.142,"0"],[1626075350.142,"0"],[1626075470.142,"0"],[1626075590.142,"0"],[1626075710.142,"0"],[1626075830.142,"0"],[1626075950.142,"0"],[1626076070.142,"0"],[1626076190.142,"0"],[1626076310.142,"0"],[1626076430.142,"0"],[1626076550.142,"0"],[1626076670.142,"0"],[1626076790.142,"0"],[1626076910.142,"0"],[1626077030.142,"0"],[1626077150.142,"0"],[1626077270.142,"0"],[1626077390.142,"0"],[1626077510.142,"0"],[1626077630.142,"0"],[1626077750.142,"0"],[1626077870.142,"0"],[1626077990.142,"0"],[1626078110.142,"0"],[1626078230.142,"0"],[1626078350.142,"0"],[1626078470.142,"0"],[1626078590.142,"0"],[1626078710.142,"0"],[1626078830.142,"0"],[1626078950.142,"0"],[1626079070.142,"0"],[1626079190.142,"0"],[1626079310.142,"0"],[1626079430.142,"0"],[1626079550.142,"0"],[1626079670.142,"0"],[1626079790.142,"0"],[1626079910.142,"0"],[1626080030.142,"0"],[1626080150.142,"0"],[1626080270.142,"0"],[1626080390.142,"0"],[1626080510.142,"0"],[1626080630.142,"0"],[1626080750.142,"0"],[1626080870.142,"0"],[1626080990.142,"0"],[1626081110.142,"0"],[1626081230.142,"0"],[1626081350.142,"0"],[1626081470.142,"0"],[1626081590.142,"0"],[1626081710.142,"0"],[1626081830.142,"0"],[1626081950.142,"0"],[1626082070.142,"0"],[1626082190.142,"0"],[1626082310.142,"0"],[1626082430.142,"0"],[1626082550.142,"0"],[1626082670.142,"0"],[1626082790.142,"0"],[1626082910.142,"0"],[1626083030.142,"0"],[1626083150.142,"0"],[1626083270.142,"0"],[1626083390.142,"0"],[1626083510.142,"0"],[1626083630.142,"0"],[1626083750.142,"0"],[1626083870.142,"0"],[1626083990.142,"0"],[1626084110.142,"0"],[1626084230.142,"0"],[1626084350.142,"0"],[1626084470.142,"0"],[1626084590.142,"0"],[1626084710.142,"0"],[1626084830.142,"0"],[1626084950.142,"0"],[1626085070.142,"0"],[1626085190.142,"0"],[1626085310.142,"0"],[1626085430.142,"0"],[1626085550.142,"0"],[1626085670.142,"0"],[1626085790.142,"0"],[1626085910.142,"0"],[1626086030.142,"0"],[1626086150.142,"0"],[1626086270.142,"0"],[1626086390.142,"0"],[1626086510.142,"0"],[1626086630.142,"0"],[1626086750.142,"0"],[1626086870.142,"0"],[1626086990.142,"0"],[1626087110.142,"0"],[1626087230.142,"0"],[1626087350.142,"0"],[1626087470.142,"0"],[1626087590.142,"0"],[1626087710.142,"0"],[1626087830.142,"0"],[1626087950.142,"0"],[1626088070.142,"0"],[1626088190.142,"0"],[1626088310.142,"0"],[1626088430.142,"0"],[1626088550.142,"0"],[1626088670.142,"0"],[1626088790.142,"0"],[1626088910.142,"0"],[1626089030.142,"0"],[1626089150.142,"0"],[1626089270.142,"0"],[1626089390.142,"0"],[1626089510.142,"0"],[1626089630.142,"0"],[1626089750.142,"0"],[1626089870.142,"0"],[1626089990.142,"0"],[1626090110.142,"0"],[1626090230.142,"0"],[1626090350.142,"0"],[1626090470.142,"0"],[1626090590.142,"0"],[1626090710.142,"0"],[1626090830.142,"0"],[1626090950.142,"0"],[1626091070.142,"0"],[1626091190.142,"0"],[1626091310.142,"0"],[1626091430.142,"0"],[1626091550.142,"0"],[1626091670.142,"0"],[1626091790.142,"0"],[1626091910.142,"0"],[1626092030.142,"0"],[1626092150.142,"0"],[1626092270.142,"0"],[1626092390.142,"0"],[1626092510.142,"0"],[1626092630.142,"0"],[1626092750.142,"0"],[1626092870.142,"0"],[1626092990.142,"0"],[1626093110.142,"0"],[1626093230.142,"0"],[1626093350.142,"0"],[1626093470.142,"0"],[1626093590.142,"0"],[1626093710.142,"0"],[1626093830.142,"0"],[1626093950.142,"0"],[1626094070.142,"0"],[1626094190.142,"0"],[1626094310.142,"0"],[1626094430.142,"0"],[1626094550.142,"0"],[1626094670.142,"0"],[1626094790.142,"0"],[1626094910.142,"0"],[1626095030.142,"0"],[1626095150.142,"0"],[1626095270.142,"0"],[1626095390.142,"0"],[1626095510.142,"0"],[1626095630.142,"0"],[1626095750.142,"0"],[1626095870.142,"0"],[1626095990.142,"0"],[1626096110.142,"0"],[1626096230.142,"0"],[1626096350.142,"0"],[1626096470.142,"0"],[1626096590.142,"0"],[1626096710.142,"0"],[1626096830.142,"0"],[1626096950.142,"0"],[1626097070.142,"0"],[1626097190.142,"0"],[1626097310.142,"0"],[1626097430.142,"0"],[1626097550.142,"0"],[1626097670.142,"0"],[1626097790.142,"0"],[1626097910.142,"0"],[1626098030.142,"0"],[1626098150.142,"0"],[1626098270.142,"0"],[1626098390.142,"0"],[1626098510.142,"0"],[1626098630.142,"0"],[1626098750.142,"0"],[1626098870.142,"0"],[1626098990.142,"0"],[1626099110.142,"0"],[1626099230.142,"0"],[1626099350.142,"0"],[1626099470.142,"0"],[1626099590.142,"0"],[1626099710.142,"0"],[1626099830.142,"0"],[1626099950.142,"0"],[1626100070.142,"0"],[1626100190.142,"0"],[1626100310.142,"0"],[1626100430.142,"0"],[1626100550.142,"0"],[1626100670.142,"0"],[1626100790.142,"0"],[1626100910.142,"0"],[1626101030.142,"0"],[1626101150.142,"0"],[1626101270.142,"0"],[1626101390.142,"0"],[1626101510.142,"0"],[1626101630.142,"0"],[1626101750.142,"0"],[1626101870.142,"0"],[1626101990.142,"0"],[1626102110.142,"0"],[1626102230.142,"0"],[1626102350.142,"0"],[1626102470.142,"0"],[1626102590.142,"0"],[1626102710.142,"0"],[1626102830.142,"0"],[1626102950.142,"0"],[1626103070.142,"0"],[1626103190.142,"0"],[1626103310.142,"0"],[1626103430.142,"0"],[1626103550.142,"0"],[1626103670.142,"0"],[1626103790.142,"0"],[1626103910.142,"0"],[1626104030.142,"0"],[1626104150.142,"0"],[1626104270.142,"0"],[1626104390.142,"0"],[1626104510.142,"0"],[1626104630.142,"0"],[1626104750.142,"0"],[1626104870.142,"0"],[1626104990.142,"0"],[1626105110.142,"0"],[1626105230.142,"0"],[1626105350.142,"0"],[1626105470.142,"0"],[1626105590.142,"0"],[1626105710.142,"0"],[1626105830.142,"0"],[1626105950.142,"0"],[1626106070.142,"0"],[1626106190.142,"0"],[1626106310.142,"0"],[1626106430.142,"0"],[1626106550.142,"0"],[1626106670.142,"0"],[1626106790.142,"0"],[1626106910.142,"0"],[1626107030.142,"0"],[1626107150.142,"0"],[1626107270.142,"0"],[1626107390.142,"0"],[1626107510.142,"0"],[1626107630.142,"0"],[1626107750.142,"0"],[1626107870.142,"0"],[1626107990.142,"0"],[1626108110.142,"0"],[1626108230.142,"0"],[1626108350.142,"0"],[1626108470.142,"0"],[1626108590.142,"0"],[1626108710.142,"0"],[1626108830.142,"0"],[1626108950.142,"0"],[1626109070.142,"0"],[1626109190.142,"0"],[1626109310.142,"0"],[1626109430.142,"0"],[1626109550.142,"0"],[1626109670.142,"0"],[1626109790.142,"0"],[1626109910.142,"0"],[1626110030.142,"0"],[1626110150.142,"0"],[1626110270.142,"0"],[1626110390.142,"0"],[1626110510.142,"0"],[1626110630.142,"0"],[1626110750.142,"0"],[1626110870.142,"0"],[1626110990.142,"0"],[1626111110.142,"0"],[1626111230.142,"0"],[1626111350.142,"0"],[1626111470.142,"0"],[1626111590.142,"0"],[1626111710.142,"0"],[1626111830.142,"0"],[1626111950.142,"0"],[1626112070.142,"0"],[1626112190.142,"0"],[1626112310.142,"0"],[1626112430.142,"0"],[1626112550.142,"0"],[1626112670.142,"0"],[1626112790.142,"0"],[1626112910.142,"0"],[1626113030.142,"0"],[1626113150.142,"0"],[1626113270.142,"0"],[1626113390.142,"0"],[1626113510.142,"0"],[1626113630.142,"0"],[1626113750.142,"0"],[1626113870.142,"0"],[1626113990.142,"0"],[1626114110.142,"0"],[1626114230.142,"0"],[1626114350.142,"0"],[1626114470.142,"0"],[1626114590.142,"0"],[1626114710.142,"0"],[1626114830.142,"0"],[1626114950.142,"0"],[1626115070.142,"0"],[1626115190.142,"0"],[1626115310.142,"0"],[1626115430.142,"0"],[1626115550.142,"0"],[1626115670.142,"0"],[1626115790.142,"0"],[1626115910.142,"0"],[1626116030.142,"0"],[1626116150.142,"0"],[1626116270.142,"0"],[1626116390.142,"0"],[1626116510.142,"0"],[1626116630.142,"0"],[1626116750.142,"0"],[1626116870.142,"0"],[1626116990.142,"0"],[1626117110.142,"0"],[1626117230.142,"0"],[1626117350.142,"0"],[1626117470.142,"0"],[1626117590.142,"0"],[1626117710.142,"0"],[1626117830.142,"0"],[1626117950.142,"0"],[1626118070.142,"0"],[1626118190.142,"0"],[1626118310.142,"0"],[1626118430.142,"0"],[1626118550.142,"0"],[1626118670.142,"0"],[1626118790.142,"0"],[1626118910.142,"0"],[1626119030.142,"0"],[1626119150.142,"0"],[1626119270.142,"0"],[1626119390.142,"0"],[1626119510.142,"0"],[1626119630.142,"0"],[1626119750.142,"0"],[1626119870.142,"0"],[1626119990.142,"0"],[1626120110.142,"0"],[1626120230.142,"0"],[1626120350.142,"0"],[1626120470.142,"0"],[1626120590.142,"0"],[1626120710.142,"0"],[1626120830.142,"0"],[1626120950.142,"0"],[1626121070.142,"0"],[1626121190.142,"0"],[1626121310.142,"0"],[1626121430.142,"0"],[1626121550.142,"0"],[1626121670.142,"0"],[1626121790.142,"0"],[1626121910.142,"0"],[1626122030.142,"0"],[1626122150.142,"0"],[1626122270.142,"0"],[1626122390.142,"0"],[1626122510.142,"0"],[1626122630.142,"0"],[1626122750.142,"0"],[1626122870.142,"0"],[1626122990.142,"0"],[1626123110.142,"0"],[1626123230.142,"0"],[1626123350.142,"0"],[1626123470.142,"0"],[1626123590.142,"0"],[1626123710.142,"0"],[1626123830.142,"0"],[1626123950.142,"0"],[1626124070.142,"0"],[1626124190.142,"0"],[1626124310.142,"0"],[1626124430.142,"0"],[1626124550.142,"0"],[1626124670.142,"0"],[1626124790.142,"0"],[1626124910.142,"0"],[1626125030.142,"0"],[1626125150.142,"0"],[1626125270.142,"0"],[1626125390.142,"0"],[1626125510.142,"0"],[1626125630.142,"0"],[1626125750.142,"0"],[1626125870.142,"0"],[1626125990.142,"0"],[1626126110.142,"0"],[1626126230.142,"0"],[1626126350.142,"0"],[1626126470.142,"0"],[1626126590.142,"0"],[1626126710.142,"0"],[1626126830.142,"0"],[1626126950.142,"0"],[1626127070.142,"0"],[1626127190.142,"0"],[1626127310.142,"0"],[1626127430.142,"0"],[1626127550.142,"0"],[1626127670.142,"0"],[1626127790.142,"0"],[1626127910.142,"0"],[1626128030.142,"0"],[1626128150.142,"0"],[1626128270.142,"0"],[1626128390.142,"0"],[1626128510.142,"0"],[1626128630.142,"0"],[1626128750.142,"0"],[1626128870.142,"0"],[1626128990.142,"0"],[1626129110.142,"0"],[1626129230.142,"0"],[1626129350.142,"0"],[1626129470.142,"0"],[1626129590.142,"0"],[1626129710.142,"0"],[1626129830.142,"0"],[1626129950.142,"0"],[1626130070.142,"0"],[1626130190.142,"0"],[1626130310.142,"0"],[1626130430.142,"0"],[1626130550.142,"0"],[1626130670.142,"0"],[1626130790.142,"0"],[1626130910.142,"0"],[1626131030.142,"0"],[1626131150.142,"0"],[1626131270.142,"0"],[1626131390.142,"0"],[1626131510.142,"0"],[1626131630.142,"0"],[1626131750.142,"0"],[1626131870.142,"0"],[1626131990.142,"0"],[1626132110.142,"0"],[1626132230.142,"0"],[1626132350.142,"0"],[1626132470.142,"0"],[1626132590.142,"0"],[1626132710.142,"0"],[1626132830.142,"0"],[1626132950.142,"0"],[1626133070.142,"0"],[1626133190.142,"0"],[1626133310.142,"0"],[1626133430.142,"0"],[1626133550.142,"0"],[1626133670.142,"0"],[1626133790.142,"0"],[1626133910.142,"0"],[1626134030.142,"0"],[1626134150.142,"0"],[1626134270.142,"0"],[1626134390.142,"0"],[1626134510.142,"0"],[1626134630.142,"0"],[1626134750.142,"0"],[1626134870.142,"0"],[1626134990.142,"0"],[1626135110.142,"0"],[1626135230.142,"0"],[1626135350.142,"0"],[1626135470.142,"0"],[1626135590.142,"0"],[1626135710.142,"0"],[1626135830.142,"0"],[1626135950.142,"0"],[1626136070.142,"0"],[1626136190.142,"0"],[1626136310.142,"0"],[1626136430.142,"0"],[1626136550.142,"0"],[1626136670.142,"0"],[1626136790.142,"0"],[1626136910.142,"0"],[1626137030.142,"0"],[1626137150.142,"0"],[1626137270.142,"0"],[1626137390.142,"0"],[1626137510.142,"0"],[1626137630.142,"0"],[1626137750.142,"0"],[1626137870.142,"0"],[1626137990.142,"0"],[1626138110.142,"0"],[1626138230.142,"0"],[1626138350.142,"0"],[1626138470.142,"0"],[1626138590.142,"0"],[1626138710.142,"0"],[1626138830.142,"0"],[1626138950.142,"0"],[1626139070.142,"0"],[1626139190.142,"0"],[1626139310.142,"0"],[1626139430.142,"0"],[1626139550.142,"0"],[1626139670.142,"0"],[1626139790.142,"0"],[1626139910.142,"0"],[1626140030.142,"0"],[1626140150.142,"0"],[1626140270.142,"0"],[1626140390.142,"0"],[1626140510.142,"0"],[1626140630.142,"0"],[1626140750.142,"0"],[1626140870.142,"0"],[1626140990.142,"0"],[1626141110.142,"0"],[1626141230.142,"0"],[1626141350.142,"0"],[1626141470.142,"0"],[1626141590.142,"0"],[1626141710.142,"0"],[1626141830.142,"0"],[1626141950.142,"0"],[1626142070.142,"0"],[1626142190.142,"0"],[1626142310.142,"0"],[1626142430.142,"0"],[1626142550.142,"0"],[1626142670.142,"0"],[1626142790.142,"0"],[1626142910.142,"0"],[1626143030.142,"0"],[1626143150.142,"0"],[1626143270.142,"0"],[1626143390.142,"0"],[1626143510.142,"0"],[1626143630.142,"0"],[1626143750.142,"0"],[1626143870.142,"0"],[1626143990.142,"0"],[1626144110.142,"0"],[1626144230.142,"0"],[1626144350.142,"0"],[1626144470.142,"0"],[1626144590.142,"0"],[1626144710.142,"0"],[1626144830.142,"0"],[1626144950.142,"0"],[1626145070.142,"0"],[1626145190.142,"0"],[1626145310.142,"0"],[1626145430.142,"0"],[1626145550.142,"0"],[1626145670.142,"0"],[1626145790.142,"0"],[1626145910.142,"0"],[1626146030.142,"0"],[1626146150.142,"0"],[1626146270.142,"0"],[1626146390.142,"0"],[1626146510.142,"0"],[1626146630.142,"0"],[1626146750.142,"0"],[1626146870.142,"0"],[1626146990.142,"0"],[1626147110.142,"0"],[1626147230.142,"0"],[1626147350.142,"0"],[1626147470.142,"0"],[1626147590.142,"0"],[1626147710.142,"0"],[1626147830.142,"0"],[1626147950.142,"0"],[1626148070.142,"0"],[1626148190.142,"0"],[1626148310.142,"0"],[1626148430.142,"0"],[1626148550.142,"0"],[1626148670.142,"0"],[1626148790.142,"0"],[1626148910.142,"0"],[1626149030.142,"0"],[1626149150.142,"0"],[1626149270.142,"0"],[1626149390.142,"0"],[1626149510.142,"0"],[1626149630.142,"0"],[1626149750.142,"0"],[1626149870.142,"0"],[1626149990.142,"0"],[1626150110.142,"0"],[1626150230.142,"0"],[1626150350.142,"0"],[1626150470.142,"0"],[1626150590.142,"0"],[1626150710.142,"0"],[1626150830.142,"0"],[1626150950.142,"0"],[1626151070.142,"0"],[1626151190.142,"0"],[1626151310.142,"0"],[1626151430.142,"0"],[1626151550.142,"0"],[1626151670.142,"0"],[1626151790.142,"0"],[1626151910.142,"0"],[1626152030.142,"0"],[1626152150.142,"0"],[1626152270.142,"0"],[1626152390.142,"0"],[1626152510.142,"0"],[1626152630.142,"0"],[1626152750.142,"0"],[1626152870.142,"0"],[1626152990.142,"0"],[1626153110.142,"0"],[1626153230.142,"0"],[1626153350.142,"0"],[1626153470.142,"0"],[1626153590.142,"0"],[1626153710.142,"0"],[1626153830.142,"0"],[1626153950.142,"0"],[1626154070.142,"0"],[1626154190.142,"0"],[1626154310.142,"0"],[1626154430.142,"0"],[1626154550.142,"0"],[1626154670.142,"0"],[1626154790.142,"0"],[1626154910.142,"0"],[1626155030.142,"0"],[1626155150.142,"0"],[1626155270.142,"0"],[1626155390.142,"0"],[1626155510.142,"0"],[1626155630.142,"0"],[1626155750.142,"0"],[1626155870.142,"0"],[1626155990.142,"0"],[1626156110.142,"0"],[1626156230.142,"0"],[1626156350.142,"0"],[1626156470.142,"0"],[1626156590.142,"0"],[1626156710.142,"0"],[1626156830.142,"0"],[1626156950.142,"0"],[1626157070.142,"0"],[1626157190.142,"0"],[1626157310.142,"0"],[1626157430.142,"0"]]},{"metric":{"pod":"test-stress-0"},"values":[[1626071030.142,"17"],[1626071150.142,"17"],[1626071270.142,"0"],[1626071390.142,"11"],[1626071510.142,"10"],[1626071630.142,"0"],[1626071750.142,"7"],[1626071870.142,"7"],[1626071990.142,"10"],[1626072110.142,"4"],[1626072230.142,"4"],[1626072350.142,"0"],[1626072470.142,"0"],[1626072590.142,"3"],[1626072710.142,"3"],[1626072830.142,"3"],[1626072950.142,"0"],[1626073070.142,"0"],[1626073190.142,"4"],[1626073310.142,"4"],[1626073430.142,"4"],[1626073550.142,"10"],[1626073670.142,"21"],[1626073790.142,"20"],[1626073910.142,"0"],[1626074030.142,"8"],[1626074150.142,"18"],[1626074270.142,"19"],[1626074390.142,"0"],[1626074510.142,"0"],[1626074630.142,"0"],[1626074750.142,"10"],[1626074870.142,"20"],[1626074990.142,"30"],[1626075110.142,"12"],[1626075230.142,"11"],[1626075350.142,"11"],[1626075470.142,"11"],[1626075590.142,"20"],[1626075710.142,"10"],[1626075830.142,"17"],[1626075950.142,"9"],[1626076070.142,"20"],[1626076190.142,"11"],[1626076310.142,"10"],[1626076430.142,"11"],[1626076550.142,"17"],[1626076670.142,"7"],[1626076790.142,"9"],[1626076910.142,"3"],[1626077030.142,"3"],[1626077150.142,"5"],[1626077270.142,"5"],[1626077390.142,"10"],[1626077510.142,"6"],[1626077630.142,"13"],[1626077750.142,"9"],[1626077870.142,"23"],[1626077990.142,"22"],[1626078110.142,"11"],[1626078230.142,"6"],[1626078350.142,"3"],[1626078470.142,"18"],[1626078590.142,"30"],[1626078710.142,"16"],[1626078830.142,"14"],[1626078950.142,"12"],[1626079070.142,"9"],[1626079190.142,"8"],[1626079310.142,"7"],[1626079430.142,"11"],[1626079550.142,"11"],[1626079670.142,"11"],[1626079790.142,"27"],[1626079910.142,"16"],[1626080030.142,"25"],[1626080150.142,"21"],[1626080270.142,"20"],[1626080390.142,"19"],[1626080510.142,"12"],[1626080630.142,"16"],[1626080750.142,"9"],[1626080870.142,"6"],[1626080990.142,"2"],[1626081110.142,"0"],[1626081230.142,"0"],[1626081350.142,"8"],[1626081470.142,"10"],[1626081590.142,"11"],[1626081710.142,"10"],[1626081830.142,"6"],[1626081950.142,"23"],[1626082070.142,"23"],[1626082190.142,"22"],[1626082310.142,"15"],[1626082430.142,"11"],[1626082550.142,"15"],[1626082670.142,"16"],[1626082790.142,"25"],[1626082910.142,"18"],[1626083030.142,"9"],[1626083150.142,"8"],[1626083270.142,"0"],[1626083390.142,"8"],[1626083510.142,"18"],[1626083630.142,"17"],[1626083750.142,"7"],[1626083870.142,"7"],[1626083990.142,"7"],[1626084110.142,"4"],[1626084230.142,"4"],[1626084350.142,"4"],[1626084470.142,"0"],[1626084590.142,"10"],[1626084710.142,"10"],[1626084830.142,"0"],[1626084950.142,"0"],[1626085070.142,"0"],[1626085190.142,"4"],[1626085310.142,"8"],[1626085430.142,"8"],[1626085550.142,"5"],[1626085670.142,"20"],[1626085790.142,"29"],[1626085910.142,"28"],[1626086030.142,"38"],[1626086150.142,"19"],[1626086270.142,"9"],[1626086390.142,"0"],[1626086510.142,"7"],[1626086630.142,"17"],[1626086750.142,"17"],[1626086870.142,"0"],[1626086990.142,"11"],[1626087110.142,"17"],[1626087230.142,"7"],[1626087350.142,"7"],[1626087470.142,"0"],[1626087590.142,"0"],[1626087710.142,"0"],[1626087830.142,"22"],[1626087950.142,"21"],[1626088070.142,"11"],[1626088190.142,"0"],[1626088310.142,"4"],[1626088430.142,"16"],[1626088550.142,"16"],[1626088670.142,"3"],[1626088790.142,"0"],[1626088910.142,"0"],[1626089030.142,"0"],[1626089150.142,"14"],[1626089270.142,"14"],[1626089390.142,"4"],[1626089510.142,"11"],[1626089630.142,"10"],[1626089750.142,"11"],[1626089870.142,"11"],[1626089990.142,"0"],[1626090110.142,"0"],[1626090230.142,"12"],[1626090350.142,"12"],[1626090470.142,"2"],[1626090590.142,"6"],[1626090710.142,"6"],[1626090830.142,"14"],[1626090950.142,"9"],[1626091070.142,"20"],[1626091190.142,"21"],[1626091310.142,"10"],[1626091430.142,"9"],[1626091550.142,"9"],[1626091670.142,"8"],[1626091790.142,"0"],[1626091910.142,"11"],[1626092030.142,"11"],[1626092150.142,"11"],[1626092270.142,"11"],[1626092390.142,"0"],[1626092510.142,"0"],[1626092630.142,"0"],[1626092750.142,"0"],[1626092870.142,"0"],[1626092990.142,"11"],[1626093110.142,"11"],[1626093230.142,"1"],[1626093350.142,"0"],[1626093470.142,"7"],[1626093590.142,"17"],[1626093710.142,"18"],[1626093830.142,"0"],[1626093950.142,"11"],[1626094070.142,"10"],[1626094190.142,"0"],[1626094310.142,"11"],[1626094430.142,"11"],[1626094550.142,"10"],[1626094670.142,"18"],[1626094790.142,"26"],[1626094910.142,"21"],[1626095030.142,"19"],[1626095150.142,"8"],[1626095270.142,"9"],[1626095390.142,"6"],[1626095510.142,"16"],[1626095630.142,"16"],[1626095750.142,"7"],[1626095870.142,"23"],[1626095990.142,"22"],[1626096110.142,"7"],[1626096230.142,"6"],[1626096350.142,"6"],[1626096470.142,"16"],[1626096590.142,"20"],[1626096710.142,"18"],[1626096830.142,"28"],[1626096950.142,"29"],[1626097070.142,"20"],[1626097190.142,"9"],[1626097310.142,"9"],[1626097430.142,"0"],[1626097550.142,"0"],[1626097670.142,"0"],[1626097790.142,"0"],[1626097910.142,"0"],[1626098030.142,"20"],[1626098150.142,"20"],[1626098270.142,"11"],[1626098390.142,"4"],[1626098510.142,"4"],[1626098630.142,"7"],[1626098750.142,"11"],[1626098870.142,"28"],[1626098990.142,"36"],[1626099110.142,"19"],[1626099230.142,"17"],[1626099350.142,"16"],[1626099470.142,"16"],[1626099590.142,"15"],[1626099710.142,"20"],[1626099830.142,"12"],[1626099950.142,"5"],[1626100070.142,"11"],[1626100190.142,"11"],[1626100310.142,"0"],[1626100430.142,"0"],[1626100550.142,"8"],[1626100670.142,"17"],[1626100790.142,"18"],[1626100910.142,"0"],[1626101030.142,"0"],[1626101150.142,"0"],[1626101270.142,"0"],[1626101390.142,"11"],[1626101510.142,"11"],[1626101630.142,"2"],[1626101750.142,"11"],[1626101870.142,"11"],[1626101990.142,"0"],[1626102110.142,"8"],[1626102230.142,"8"],[1626102350.142,"10"],[1626102470.142,"3"],[1626102590.142,"3"],[1626102710.142,"0"],[1626102830.142,"0"],[1626102950.142,"0"],[1626103070.142,"10"],[1626103190.142,"10"],[1626103310.142,"0"],[1626103430.142,"0"],[1626103550.142,"0"],[1626103670.142,"18"],[1626103790.142,"28"],[1626103910.142,"17"],[1626104030.142,"1"],[1626104150.142,"8"],[1626104270.142,"8"],[1626104390.142,"8"],[1626104510.142,"0"],[1626104630.142,"0"],[1626104750.142,"0"],[1626104870.142,"0"],[1626104990.142,"3"],[1626105110.142,"13"],[1626105230.142,"24"],[1626105350.142,"11"],[1626105470.142,"15"],[1626105590.142,"15"],[1626105710.142,"15"],[1626105830.142,"12"],[1626105950.142,"25"],[1626106070.142,"25"],[1626106190.142,"3"],[1626106310.142,"12"],[1626106430.142,"19"],[1626106550.142,"16"],[1626106670.142,"26"],[1626106790.142,"18"],[1626106910.142,"3"],[1626107030.142,"0"],[1626107150.142,"7"],[1626107270.142,"20"],[1626107390.142,"29"],[1626107510.142,"11"],[1626107630.142,"9"],[1626107750.142,"0"],[1626107870.142,"11"],[1626107990.142,"11"],[1626108110.142,"0"],[1626108230.142,"0"],[1626108350.142,"2"],[1626108470.142,"13"],[1626108590.142,"13"],[1626108710.142,"0"],[1626108830.142,"11"],[1626108950.142,"11"],[1626109070.142,"0"],[1626109190.142,"0"],[1626109310.142,"5"],[1626109430.142,"20"],[1626109550.142,"20"],[1626109670.142,"6"],[1626109790.142,"0"],[1626109910.142,"0"],[1626110030.142,"0"],[1626110150.142,"5"],[1626110270.142,"5"],[1626110390.142,"18"],[1626110510.142,"27"],[1626110630.142,"16"],[1626110750.142,"13"],[1626110870.142,"16"],[1626110990.142,"6"],[1626111110.142,"6"],[1626111230.142,"0"],[1626111350.142,"4"],[1626111470.142,"14"],[1626111590.142,"14"],[1626111710.142,"11"],[1626111830.142,"21"],[1626111950.142,"10"],[1626112070.142,"4"],[1626112190.142,"4"],[1626112310.142,"12"],[1626112430.142,"11"],[1626112550.142,"11"],[1626112670.142,"14"],[1626112790.142,"11"],[1626112910.142,"21"],[1626113030.142,"11"],[1626113150.142,"2"],[1626113270.142,"11"],[1626113390.142,"22"],[1626113510.142,"11"],[1626113630.142,"11"],[1626113750.142,"19"],[1626113870.142,"9"],[1626113990.142,"9"],[1626114110.142,"0"],[1626114230.142,"6"],[1626114350.142,"6"],[1626114470.142,"6"],[1626114590.142,"0"],[1626114710.142,"0"],[1626114830.142,"10"],[1626114950.142,"11"],[1626115070.142,"0"],[1626115190.142,"6"],[1626115310.142,"6"],[1626115430.142,"6"],[1626115550.142,"12"],[1626115670.142,"21"],[1626115790.142,"9"],[1626115910.142,"16"],[1626116030.142,"7"],[1626116150.142,"10"],[1626116270.142,"14"],[1626116390.142,"32"],[1626116510.142,"18"],[1626116630.142,"18"],[1626116750.142,"14"],[1626116870.142,"4"],[1626116990.142,"20"],[1626117110.142,"17"],[1626117230.142,"16"],[1626117350.142,"9"],[1626117470.142,"9"],[1626117590.142,"5"],[1626117710.142,"5"],[1626117830.142,"5"],[1626117950.142,"0"],[1626118070.142,"0"],[1626118190.142,"16"],[1626118310.142,"16"],[1626118430.142,"17"],[1626118550.142,"14"],[1626118670.142,"16"],[1626118790.142,"23"],[1626118910.142,"9"],[1626119030.142,"9"],[1626119150.142,"11"],[1626119270.142,"14"],[1626119390.142,"3"],[1626119510.142,"4"],[1626119630.142,"11"],[1626119750.142,"11"],[1626119870.142,"0"],[1626119990.142,"0"],[1626120110.142,"18"],[1626120230.142,"19"],[1626120350.142,"9"],[1626120470.142,"10"],[1626120590.142,"10"],[1626120710.142,"6"],[1626120830.142,"14"],[1626120950.142,"17"],[1626121070.142,"14"],[1626121190.142,"7"],[1626121310.142,"4"],[1626121430.142,"0"],[1626121550.142,"14"],[1626121670.142,"19"],[1626121790.142,"10"],[1626121910.142,"12"],[1626122030.142,"11"],[1626122150.142,"27"],[1626122270.142,"32"],[1626122390.142,"27"],[1626122510.142,"33"],[1626122630.142,"13"],[1626122750.142,"3"],[1626122870.142,"0"],[1626122990.142,"8"],[1626123110.142,"11"],[1626123230.142,"25"],[1626123350.142,"17"],[1626123470.142,"15"],[1626123590.142,"11"],[1626123710.142,"1"],[1626123830.142,"11"],[1626123950.142,"25"],[1626124070.142,"28"],[1626124190.142,"24"],[1626124310.142,"10"],[1626124430.142,"18"],[1626124550.142,"11"],[1626124670.142,"5"],[1626124790.142,"5"],[1626124910.142,"5"],[1626125030.142,"0"],[1626125150.142,"0"],[1626125270.142,"0"],[1626125390.142,"0"],[1626125510.142,"0"],[1626125630.142,"0"],[1626125750.142,"0"],[1626125870.142,"0"],[1626125990.142,"0"],[1626126110.142,"11"],[1626126230.142,"14"],[1626126350.142,"4"],[1626126470.142,"4"],[1626126590.142,"7"],[1626126710.142,"18"],[1626126830.142,"27"],[1626126950.142,"10"],[1626127070.142,"7"],[1626127190.142,"17"],[1626127310.142,"20"],[1626127430.142,"6"],[1626127550.142,"17"],[1626127670.142,"18"],[1626127790.142,"16"],[1626127910.142,"16"],[1626128030.142,"0"],[1626128150.142,"0"],[1626128270.142,"0"],[1626128390.142,"0"],[1626128510.142,"15"],[1626128630.142,"24"],[1626128750.142,"15"],[1626128870.142,"0"],[1626128990.142,"0"],[1626129110.142,"15"],[1626129230.142,"15"],[1626129350.142,"4"],[1626129470.142,"0"],[1626129590.142,"11"],[1626129710.142,"10"],[1626129830.142,"0"],[1626129950.142,"0"],[1626130070.142,"11"],[1626130190.142,"20"],[1626130310.142,"12"],[1626130430.142,"12"],[1626130550.142,"3"],[1626130670.142,"0"],[1626130790.142,"0"],[1626130910.142,"11"],[1626131030.142,"12"],[1626131150.142,"0"],[1626131270.142,"0"],[1626131390.142,"11"],[1626131510.142,"10"],[1626131630.142,"9"],[1626131750.142,"19"],[1626131870.142,"19"],[1626131990.142,"0"],[1626132110.142,"0"],[1626132230.142,"0"],[1626132350.142,"0"],[1626132470.142,"0"],[1626132590.142,"0"],[1626132710.142,"0"],[1626132830.142,"0"],[1626132950.142,"11"],[1626133070.142,"11"],[1626133190.142,"11"],[1626133310.142,"11"],[1626133430.142,"0"],[1626133550.142,"5"],[1626133670.142,"5"],[1626133790.142,"5"],[1626133910.142,"0"],[1626134030.142,"0"],[1626134150.142,"0"],[1626134270.142,"0"],[1626134390.142,"0"],[1626134510.142,"0"],[1626134630.142,"0"],[1626134750.142,"0"],[1626134870.142,"0"],[1626134990.142,"0"],[1626135110.142,"11"],[1626135230.142,"11"],[1626135350.142,"12"],[1626135470.142,"20"],[1626135590.142,"16"],[1626135710.142,"21"],[1626135830.142,"12"],[1626135950.142,"6"],[1626136070.142,"12"],[1626136190.142,"21"],[1626136310.142,"25"],[1626136430.142,"15"],[1626136550.142,"5"],[1626136670.142,"0"],[1626136790.142,"8"],[1626136910.142,"8"],[1626137030.142,"7"],[1626137150.142,"7"],[1626137270.142,"7"],[1626137390.142,"7"],[1626137510.142,"0"],[1626137630.142,"11"],[1626137750.142,"22"],[1626137870.142,"12"],[1626137990.142,"10"],[1626138110.142,"0"],[1626138230.142,"0"],[1626138350.142,"0"],[1626138470.142,"0"],[1626138590.142,"11"],[1626138710.142,"11"],[1626138830.142,"2"],[1626138950.142,"0"],[1626139070.142,"10"],[1626139190.142,"21"],[1626139310.142,"22"],[1626139430.142,"13"],[1626139550.142,"3"],[1626139670.142,"3"],[1626139790.142,"0"],[1626139910.142,"0"],[1626140030.142,"0"],[1626140150.142,"4"],[1626140270.142,"15"],[1626140390.142,"22"],[1626140510.142,"19"],[1626140630.142,"18"],[1626140750.142,"22"],[1626140870.142,"22"],[1626140990.142,"12"],[1626141110.142,"0"],[1626141230.142,"0"],[1626141350.142,"0"],[1626141470.142,"7"],[1626141590.142,"24"],[1626141710.142,"44"],[1626141830.142,"30"],[1626141950.142,"22"],[1626142070.142,"24"],[1626142190.142,"13"],[1626142310.142,"0"],[1626142430.142,"0"],[1626142550.142,"0"],[1626142670.142,"5"],[1626142790.142,"11"],[1626142910.142,"20"],[1626143030.142,"19"],[1626143150.142,"12"],[1626143270.142,"4"],[1626143390.142,"0"],[1626143510.142,"0"],[1626143630.142,"0"],[1626143750.142,"0"],[1626143870.142,"0"],[1626143990.142,"0"],[1626144110.142,"11"],[1626144230.142,"11"],[1626144350.142,"0"],[1626144470.142,"0"],[1626144590.142,"3"],[1626144710.142,"3"],[1626144830.142,"7"],[1626144950.142,"7"],[1626145070.142,"14"],[1626145190.142,"10"],[1626145310.142,"11"],[1626145430.142,"14"],[1626145550.142,"23"],[1626145670.142,"22"],[1626145790.142,"12"],[1626145910.142,"4"],[1626146030.142,"0"],[1626146150.142,"0"],[1626146270.142,"0"],[1626146390.142,"0"],[1626146510.142,"0"],[1626146630.142,"0"],[1626146750.142,"11"],[1626146870.142,"11"],[1626146990.142,"0"],[1626147110.142,"0"],[1626147230.142,"10"],[1626147350.142,"21"],[1626147470.142,"10"],[1626147590.142,"10"],[1626147710.142,"9"],[1626147830.142,"10"],[1626147950.142,"19"],[1626148070.142,"29"],[1626148190.142,"20"],[1626148310.142,"0"],[1626148430.142,"10"],[1626148550.142,"10"],[1626148670.142,"0"],[1626148790.142,"10"],[1626148910.142,"14"],[1626149030.142,"16"],[1626149150.142,"16"],[1626149270.142,"1"],[1626149390.142,"0"],[1626149510.142,"11"],[1626149630.142,"11"],[1626149750.142,"10"],[1626149870.142,"20"],[1626149990.142,"18"],[1626150110.142,"8"],[1626150230.142,"9"],[1626150350.142,"11"],[1626150470.142,"6"],[1626150590.142,"10"],[1626150710.142,"7"],[1626150830.142,"4"],[1626150950.142,"0"],[1626151070.142,"4"],[1626151190.142,"4"],[1626151310.142,"10"],[1626151430.142,"7"],[1626151550.142,"14"],[1626151670.142,"18"],[1626151790.142,"28"],[1626151910.142,"11"],[1626152030.142,"0"],[1626152150.142,"0"],[1626152270.142,"5"],[1626152390.142,"5"],[1626152510.142,"21"],[1626152630.142,"16"],[1626152750.142,"8"],[1626152870.142,"3"],[1626152990.142,"18"],[1626153110.142,"25"],[1626153230.142,"14"],[1626153350.142,"1"],[1626153470.142,"0"],[1626153590.142,"8"],[1626153710.142,"9"],[1626153830.142,"19"],[1626153950.142,"21"],[1626154070.142,"29"],[1626154190.142,"11"],[1626154310.142,"0"],[1626154430.142,"3"],[1626154550.142,"13"],[1626154670.142,"22"],[1626154790.142,"21"],[1626154910.142,"10"],[1626155030.142,"10"],[1626155150.142,"17"],[1626155270.142,"7"],[1626155390.142,"25"],[1626155510.142,"17"],[1626155630.142,"19"],[1626155750.142,"20"],[1626155870.142,"15"],[1626155990.142,"15"],[1626156110.142,"15"],[1626156230.142,"10"],[1626156350.142,"0"],[1626156470.142,"3"],[1626156590.142,"3"],[1626156710.142,"9"],[1626156830.142,"7"],[1626156950.142,"8"],[1626157070.142,"13"],[1626157190.142,"22"],[1626157310.142,"21"],[1626157430.142,"21"]]},{"metric":{"pod":"test-stress-1"},"values":[[1626071030.142,"10"],[1626071150.142,"6"],[1626071270.142,"10"],[1626071390.142,"18"],[1626071510.142,"23"],[1626071630.142,"31"],[1626071750.142,"21"],[1626071870.142,"18"],[1626071990.142,"18"],[1626072110.142,"19"],[1626072230.142,"21"],[1626072350.142,"12"],[1626072470.142,"11"],[1626072590.142,"0"],[1626072710.142,"18"],[1626072830.142,"31"],[1626072950.142,"21"],[1626073070.142,"4"],[1626073190.142,"11"],[1626073310.142,"11"],[1626073430.142,"0"],[1626073550.142,"10"],[1626073670.142,"10"],[1626073790.142,"2"],[1626073910.142,"7"],[1626074030.142,"7"],[1626074150.142,"10"],[1626074270.142,"15"],[1626074390.142,"15"],[1626074510.142,"0"],[1626074630.142,"11"],[1626074750.142,"11"],[1626074870.142,"0"],[1626074990.142,"0"],[1626075110.142,"0"],[1626075230.142,"0"],[1626075350.142,"0"],[1626075470.142,"7"],[1626075590.142,"7"],[1626075710.142,"7"],[1626075830.142,"0"],[1626075950.142,"0"],[1626076070.142,"9"],[1626076190.142,"9"],[1626076310.142,"9"],[1626076430.142,"0"],[1626076550.142,"10"],[1626076670.142,"10"],[1626076790.142,"2"],[1626076910.142,"0"],[1626077030.142,"0"],[1626077150.142,"0"],[1626077270.142,"0"],[1626077390.142,"11"],[1626077510.142,"20"],[1626077630.142,"21"],[1626077750.142,"36"],[1626077870.142,"18"],[1626077990.142,"18"],[1626078110.142,"16"],[1626078230.142,"19"],[1626078350.142,"20"],[1626078470.142,"5"],[1626078590.142,"3"],[1626078710.142,"3"],[1626078830.142,"3"],[1626078950.142,"11"],[1626079070.142,"23"],[1626079190.142,"25"],[1626079310.142,"23"],[1626079430.142,"16"],[1626079550.142,"16"],[1626079670.142,"15"],[1626079790.142,"3"],[1626079910.142,"3"],[1626080030.142,"4"],[1626080150.142,"14"],[1626080270.142,"11"],[1626080390.142,"12"],[1626080510.142,"11"],[1626080630.142,"1"],[1626080750.142,"11"],[1626080870.142,"25"],[1626080990.142,"26"],[1626081110.142,"16"],[1626081230.142,"19"],[1626081350.142,"19"],[1626081470.142,"9"],[1626081590.142,"0"],[1626081710.142,"10"],[1626081830.142,"21"],[1626081950.142,"12"],[1626082070.142,"10"],[1626082190.142,"10"],[1626082310.142,"0"],[1626082430.142,"0"],[1626082550.142,"0"],[1626082670.142,"0"],[1626082790.142,"5"],[1626082910.142,"16"],[1626083030.142,"29"],[1626083150.142,"16"],[1626083270.142,"5"],[1626083390.142,"11"],[1626083510.142,"11"],[1626083630.142,"9"],[1626083750.142,"20"],[1626083870.142,"24"],[1626083990.142,"6"],[1626084110.142,"15"],[1626084230.142,"11"],[1626084350.142,"10"],[1626084470.142,"10"],[1626084590.142,"10"],[1626084710.142,"11"],[1626084830.142,"11"],[1626084950.142,"1"],[1626085070.142,"0"],[1626085190.142,"11"],[1626085310.142,"20"],[1626085430.142,"15"],[1626085550.142,"19"],[1626085670.142,"19"],[1626085790.142,"6"],[1626085910.142,"0"],[1626086030.142,"0"],[1626086150.142,"0"],[1626086270.142,"18"],[1626086390.142,"19"],[1626086510.142,"9"],[1626086630.142,"6"],[1626086750.142,"16"],[1626086870.142,"15"],[1626086990.142,"8"],[1626087110.142,"9"],[1626087230.142,"19"],[1626087350.142,"13"],[1626087470.142,"16"],[1626087590.142,"26"],[1626087710.142,"18"],[1626087830.142,"5"],[1626087950.142,"4"],[1626088070.142,"0"],[1626088190.142,"7"],[1626088310.142,"7"],[1626088430.142,"7"],[1626088550.142,"11"],[1626088670.142,"19"],[1626088790.142,"8"],[1626088910.142,"9"],[1626089030.142,"0"],[1626089150.142,"0"],[1626089270.142,"10"],[1626089390.142,"18"],[1626089510.142,"17"],[1626089630.142,"22"],[1626089750.142,"15"],[1626089870.142,"23"],[1626089990.142,"28"],[1626090110.142,"18"],[1626090230.142,"0"],[1626090350.142,"0"],[1626090470.142,"0"],[1626090590.142,"0"],[1626090710.142,"10"],[1626090830.142,"20"],[1626090950.142,"21"],[1626091070.142,"11"],[1626091190.142,"0"],[1626091310.142,"0"],[1626091430.142,"0"],[1626091550.142,"0"],[1626091670.142,"0"],[1626091790.142,"11"],[1626091910.142,"11"],[1626092030.142,"0"],[1626092150.142,"0"],[1626092270.142,"4"],[1626092390.142,"4"],[1626092510.142,"13"],[1626092630.142,"10"],[1626092750.142,"12"],[1626092870.142,"31"],[1626092990.142,"20"],[1626093110.142,"30"],[1626093230.142,"20"],[1626093350.142,"10"],[1626093470.142,"0"],[1626093590.142,"0"],[1626093710.142,"0"],[1626093830.142,"11"],[1626093950.142,"10"],[1626094070.142,"1"],[1626094190.142,"0"],[1626094310.142,"2"],[1626094430.142,"12"],[1626094550.142,"12"],[1626094670.142,"0"],[1626094790.142,"0"],[1626094910.142,"0"],[1626095030.142,"0"],[1626095150.142,"0"],[1626095270.142,"0"],[1626095390.142,"11"],[1626095510.142,"11"],[1626095630.142,"7"],[1626095750.142,"7"],[1626095870.142,"7"],[1626095990.142,"0"],[1626096110.142,"11"],[1626096230.142,"11"],[1626096350.142,"9"],[1626096470.142,"7"],[1626096590.142,"7"],[1626096710.142,"0"],[1626096830.142,"4"],[1626096950.142,"6"],[1626097070.142,"6"],[1626097190.142,"7"],[1626097310.142,"11"],[1626097430.142,"11"],[1626097550.142,"6"],[1626097670.142,"3"],[1626097790.142,"13"],[1626097910.142,"33"],[1626098030.142,"19"],[1626098150.142,"8"],[1626098270.142,"0"],[1626098390.142,"0"],[1626098510.142,"0"],[1626098630.142,"11"],[1626098750.142,"22"],[1626098870.142,"11"],[1626098990.142,"0"],[1626099110.142,"0"],[1626099230.142,"0"],[1626099350.142,"10"],[1626099470.142,"21"],[1626099590.142,"11"],[1626099710.142,"0"],[1626099830.142,"0"],[1626099950.142,"11"],[1626100070.142,"12"],[1626100190.142,"30"],[1626100310.142,"19"],[1626100430.142,"26"],[1626100550.142,"19"],[1626100670.142,"13"],[1626100790.142,"6"],[1626100910.142,"27"],[1626101030.142,"22"],[1626101150.142,"23"],[1626101270.142,"11"],[1626101390.142,"4"],[1626101510.142,"4"],[1626101630.142,"4"],[1626101750.142,"0"],[1626101870.142,"0"],[1626101990.142,"4"],[1626102110.142,"4"],[1626102230.142,"5"],[1626102350.142,"0"],[1626102470.142,"4"],[1626102590.142,"4"],[1626102710.142,"22"],[1626102830.142,"35"],[1626102950.142,"35"],[1626103070.142,"23"],[1626103190.142,"23"],[1626103310.142,"22"],[1626103430.142,"8"],[1626103550.142,"11"],[1626103670.142,"11"],[1626103790.142,"2"],[1626103910.142,"0"],[1626104030.142,"0"],[1626104150.142,"0"],[1626104270.142,"0"],[1626104390.142,"18"],[1626104510.142,"19"],[1626104630.142,"24"],[1626104750.142,"24"],[1626104870.142,"19"],[1626104990.142,"12"],[1626105110.142,"6"],[1626105230.142,"0"],[1626105350.142,"0"],[1626105470.142,"0"],[1626105590.142,"0"],[1626105710.142,"0"],[1626105830.142,"0"],[1626105950.142,"0"],[1626106070.142,"0"],[1626106190.142,"0"],[1626106310.142,"0"],[1626106430.142,"11"],[1626106550.142,"11"],[1626106670.142,"0"],[1626106790.142,"0"],[1626106910.142,"10"],[1626107030.142,"20"],[1626107150.142,"10"],[1626107270.142,"0"],[1626107390.142,"10"],[1626107510.142,"21"],[1626107630.142,"22"],[1626107750.142,"11"],[1626107870.142,"11"],[1626107990.142,"11"],[1626108110.142,"20"],[1626108230.142,"21"],[1626108350.142,"11"],[1626108470.142,"11"],[1626108590.142,"0"],[1626108710.142,"0"],[1626108830.142,"0"],[1626108950.142,"0"],[1626109070.142,"6"],[1626109190.142,"17"],[1626109310.142,"26"],[1626109430.142,"11"],[1626109550.142,"0"],[1626109670.142,"0"],[1626109790.142,"11"],[1626109910.142,"21"],[1626110030.142,"34"],[1626110150.142,"14"],[1626110270.142,"14"],[1626110390.142,"10"],[1626110510.142,"0"],[1626110630.142,"0"],[1626110750.142,"0"],[1626110870.142,"11"],[1626110990.142,"13"],[1626111110.142,"3"],[1626111230.142,"3"],[1626111350.142,"0"],[1626111470.142,"0"],[1626111590.142,"0"],[1626111710.142,"0"],[1626111830.142,"0"],[1626111950.142,"11"],[1626112070.142,"22"],[1626112190.142,"23"],[1626112310.142,"10"],[1626112430.142,"11"],[1626112550.142,"10"],[1626112670.142,"0"],[1626112790.142,"4"],[1626112910.142,"4"],[1626113030.142,"14"],[1626113150.142,"21"],[1626113270.142,"10"],[1626113390.142,"10"],[1626113510.142,"8"],[1626113630.142,"13"],[1626113750.142,"13"],[1626113870.142,"5"],[1626113990.142,"7"],[1626114110.142,"7"],[1626114230.142,"7"],[1626114350.142,"0"],[1626114470.142,"0"],[1626114590.142,"0"],[1626114710.142,"11"],[1626114830.142,"17"],[1626114950.142,"19"],[1626115070.142,"30"],[1626115190.142,"11"],[1626115310.142,"5"],[1626115430.142,"5"],[1626115550.142,"10"],[1626115670.142,"16"],[1626115790.142,"23"],[1626115910.142,"17"],[1626116030.142,"27"],[1626116150.142,"11"],[1626116270.142,"1"],[1626116390.142,"0"],[1626116510.142,"0"],[1626116630.142,"0"],[1626116750.142,"11"],[1626116870.142,"10"],[1626116990.142,"0"],[1626117110.142,"7"],[1626117230.142,"18"],[1626117350.142,"27"],[1626117470.142,"10"],[1626117590.142,"1"],[1626117710.142,"4"],[1626117830.142,"7"],[1626117950.142,"6"],[1626118070.142,"3"],[1626118190.142,"0"],[1626118310.142,"0"],[1626118430.142,"4"],[1626118550.142,"14"],[1626118670.142,"23"],[1626118790.142,"21"],[1626118910.142,"30"],[1626119030.142,"11"],[1626119150.142,"2"],[1626119270.142,"0"],[1626119390.142,"0"],[1626119510.142,"10"],[1626119630.142,"20"],[1626119750.142,"11"],[1626119870.142,"20"],[1626119990.142,"32"],[1626120110.142,"21"],[1626120230.142,"21"],[1626120350.142,"26"],[1626120470.142,"30"],[1626120590.142,"20"],[1626120710.142,"17"],[1626120830.142,"11"],[1626120950.142,"11"],[1626121070.142,"11"],[1626121190.142,"16"],[1626121310.142,"7"],[1626121430.142,"26"],[1626121550.142,"19"],[1626121670.142,"8"],[1626121790.142,"6"],[1626121910.142,"6"],[1626122030.142,"17"],[1626122150.142,"11"],[1626122270.142,"0"],[1626122390.142,"0"],[1626122510.142,"0"],[1626122630.142,"12"],[1626122750.142,"15"],[1626122870.142,"4"],[1626122990.142,"4"],[1626123110.142,"0"],[1626123230.142,"0"],[1626123350.142,"0"],[1626123470.142,"0"],[1626123590.142,"0"],[1626123710.142,"11"],[1626123830.142,"11"],[1626123950.142,"1"],[1626124070.142,"0"],[1626124190.142,"10"],[1626124310.142,"21"],[1626124430.142,"11"],[1626124550.142,"0"],[1626124670.142,"0"],[1626124790.142,"10"],[1626124910.142,"21"],[1626125030.142,"11"],[1626125150.142,"13"],[1626125270.142,"20"],[1626125390.142,"16"],[1626125510.142,"23"],[1626125630.142,"25"],[1626125750.142,"11"],[1626125870.142,"3"],[1626125990.142,"0"],[1626126110.142,"0"],[1626126230.142,"11"],[1626126350.142,"11"],[1626126470.142,"9"],[1626126590.142,"9"],[1626126710.142,"8"],[1626126830.142,"0"],[1626126950.142,"0"],[1626127070.142,"11"],[1626127190.142,"11"],[1626127310.142,"11"],[1626127430.142,"22"],[1626127550.142,"17"],[1626127670.142,"7"],[1626127790.142,"7"],[1626127910.142,"11"],[1626128030.142,"29"],[1626128150.142,"19"],[1626128270.142,"21"],[1626128390.142,"16"],[1626128510.142,"6"],[1626128630.142,"6"],[1626128750.142,"0"],[1626128870.142,"7"],[1626128990.142,"18"],[1626129110.142,"18"],[1626129230.142,"19"],[1626129350.142,"18"],[1626129470.142,"12"],[1626129590.142,"3"],[1626129710.142,"12"],[1626129830.142,"28"],[1626129950.142,"37"],[1626130070.142,"29"],[1626130190.142,"11"],[1626130310.142,"11"],[1626130430.142,"3"],[1626130550.142,"13"],[1626130670.142,"23"],[1626130790.142,"11"],[1626130910.142,"6"],[1626131030.142,"13"],[1626131150.142,"13"],[1626131270.142,"7"],[1626131390.142,"0"],[1626131510.142,"9"],[1626131630.142,"8"],[1626131750.142,"9"],[1626131870.142,"0"],[1626131990.142,"0"],[1626132110.142,"10"],[1626132230.142,"18"],[1626132350.142,"14"],[1626132470.142,"23"],[1626132590.142,"33"],[1626132710.142,"37"],[1626132830.142,"25"],[1626132950.142,"9"],[1626133070.142,"0"],[1626133190.142,"3"],[1626133310.142,"3"],[1626133430.142,"3"],[1626133550.142,"0"],[1626133670.142,"19"],[1626133790.142,"19"],[1626133910.142,"13"],[1626134030.142,"8"],[1626134150.142,"18"],[1626134270.142,"11"],[1626134390.142,"0"],[1626134510.142,"10"],[1626134630.142,"10"],[1626134750.142,"6"],[1626134870.142,"16"],[1626134990.142,"18"],[1626135110.142,"12"],[1626135230.142,"23"],[1626135350.142,"22"],[1626135470.142,"11"],[1626135590.142,"11"],[1626135710.142,"0"],[1626135830.142,"0"],[1626135950.142,"0"],[1626136070.142,"8"],[1626136190.142,"8"],[1626136310.142,"8"],[1626136430.142,"14"],[1626136550.142,"14"],[1626136670.142,"10"],[1626136790.142,"4"],[1626136910.142,"15"],[1626137030.142,"19"],[1626137150.142,"9"],[1626137270.142,"13"],[1626137390.142,"15"],[1626137510.142,"26"],[1626137630.142,"12"],[1626137750.142,"0"],[1626137870.142,"0"],[1626137990.142,"9"],[1626138110.142,"12"],[1626138230.142,"21"],[1626138350.142,"13"],[1626138470.142,"16"],[1626138590.142,"15"],[1626138710.142,"4"],[1626138830.142,"0"],[1626138950.142,"7"],[1626139070.142,"17"],[1626139190.142,"23"],[1626139310.142,"28"],[1626139430.142,"30"],[1626139550.142,"21"],[1626139670.142,"1"],[1626139790.142,"0"],[1626139910.142,"11"],[1626140030.142,"13"],[1626140150.142,"3"],[1626140270.142,"11"],[1626140390.142,"19"],[1626140510.142,"19"],[1626140630.142,"0"],[1626140750.142,"0"],[1626140870.142,"22"],[1626140990.142,"31"],[1626141110.142,"29"],[1626141230.142,"16"],[1626141350.142,"15"],[1626141470.142,"8"],[1626141590.142,"0"],[1626141710.142,"0"],[1626141830.142,"0"],[1626141950.142,"0"],[1626142070.142,"10"],[1626142190.142,"19"],[1626142310.142,"25"],[1626142430.142,"28"],[1626142550.142,"10"],[1626142670.142,"0"],[1626142790.142,"0"],[1626142910.142,"11"],[1626143030.142,"11"],[1626143150.142,"4"],[1626143270.142,"14"],[1626143390.142,"24"],[1626143510.142,"14"],[1626143630.142,"18"],[1626143750.142,"27"],[1626143870.142,"15"],[1626143990.142,"2"],[1626144110.142,"10"],[1626144230.142,"10"],[1626144350.142,"21"],[1626144470.142,"11"],[1626144590.142,"0"],[1626144710.142,"10"],[1626144830.142,"21"],[1626144950.142,"22"],[1626145070.142,"22"],[1626145190.142,"11"],[1626145310.142,"0"],[1626145430.142,"10"],[1626145550.142,"10"],[1626145670.142,"0"],[1626145790.142,"8"],[1626145910.142,"9"],[1626146030.142,"13"],[1626146150.142,"6"],[1626146270.142,"12"],[1626146390.142,"7"],[1626146510.142,"6"],[1626146630.142,"4"],[1626146750.142,"4"],[1626146870.142,"13"],[1626146990.142,"11"],[1626147110.142,"0"],[1626147230.142,"0"],[1626147350.142,"6"],[1626147470.142,"6"],[1626147590.142,"6"],[1626147710.142,"11"],[1626147830.142,"16"],[1626147950.142,"6"],[1626148070.142,"15"],[1626148190.142,"9"],[1626148310.142,"13"],[1626148430.142,"9"],[1626148550.142,"9"],[1626148670.142,"11"],[1626148790.142,"10"],[1626148910.142,"10"],[1626149030.142,"3"],[1626149150.142,"10"],[1626149270.142,"10"],[1626149390.142,"0"],[1626149510.142,"0"],[1626149630.142,"6"],[1626149750.142,"6"],[1626149870.142,"11"],[1626149990.142,"6"],[1626150110.142,"6"],[1626150230.142,"0"],[1626150350.142,"11"],[1626150470.142,"11"],[1626150590.142,"10"],[1626150710.142,"21"],[1626150830.142,"11"],[1626150950.142,"0"],[1626151070.142,"0"],[1626151190.142,"0"],[1626151310.142,"11"],[1626151430.142,"21"],[1626151550.142,"21"],[1626151670.142,"11"],[1626151790.142,"8"],[1626151910.142,"14"],[1626152030.142,"14"],[1626152150.142,"17"],[1626152270.142,"12"],[1626152390.142,"10"],[1626152510.142,"11"],[1626152630.142,"28"],[1626152750.142,"18"],[1626152870.142,"28"],[1626152990.142,"19"],[1626153110.142,"9"],[1626153230.142,"11"],[1626153350.142,"14"],[1626153470.142,"10"],[1626153590.142,"11"],[1626153710.142,"8"],[1626153830.142,"0"],[1626153950.142,"0"],[1626154070.142,"0"],[1626154190.142,"15"],[1626154310.142,"26"],[1626154430.142,"24"],[1626154550.142,"11"],[1626154670.142,"0"],[1626154790.142,"0"],[1626154910.142,"0"],[1626155030.142,"4"],[1626155150.142,"15"],[1626155270.142,"16"],[1626155390.142,"0"],[1626155510.142,"8"],[1626155630.142,"17"],[1626155750.142,"17"],[1626155870.142,"10"],[1626155990.142,"0"],[1626156110.142,"15"],[1626156230.142,"15"],[1626156350.142,"5"],[1626156470.142,"0"],[1626156590.142,"19"],[1626156710.142,"30"],[1626156830.142,"24"],[1626156950.142,"6"],[1626157070.142,"7"],[1626157190.142,"9"],[1626157310.142,"10"],[1626157430.142,"9"]]}]}}\');\n;// CONCATENATED MODULE: ./demo/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar chartModel = src([new _2d_data(), new _2d_coord({\n  type: \'vertical\',\n  grid: {\n    vertical: true,\n    horizontal: true\n  }\n}), new chart_LineChart({\n  smooth: true,\n  fill: true\n}), // new BarChart(),\nnew overlayer_LineIndicator(), new overlayer_Legend()], {\n  layout: {\n    left: 0,\n    top: 20,\n    bottom: 40,\n    right: 30,\n    xFloat: 20\n  }\n});\nvar container = document.createElement(\'div\');\ncontainer.setAttribute(\'style\', "\\n    position: relative;\\n    margin: 30px;\\n    width: 680px;\\n    height: 320px;\\n    border: 1px solid rebeccapurple;");\ndocument.body.appendChild(container);\nvar dataFormatter = new Intl.DateTimeFormat(\'en-US\', {\n  year: \'numeric\',\n  month: \'numeric\',\n  day: \'numeric\',\n  hour: \'numeric\',\n  minute: \'numeric\',\n  second: \'numeric\',\n  hour12: false\n});\nvar NumberFormatter = new Intl.NumberFormat(\'en-GB\', {\n  notation: \'compact\',\n  compactDisplay: \'short\'\n});\n\nfunction getSeries(data) {\n  var largest;\n  var l = 0;\n  var results = (0,lodash.get)(data, \'data.result\', []);\n  results.forEach(function (r) {\n    var length = r.values.length;\n\n    if (length > l) {\n      l = length;\n      largest = r.values.map(function (v) {\n        return v[0];\n      });\n    }\n  });\n  return (0,lodash.flatten)((0,lodash.get)(data, \'data.result\', []).map(function (r) {\n    var values = r.values.map(function (v) {\n      return [v[0] * 1000, +v[1]];\n    });\n    var vs = [];\n\n    if (values.length < l) {\n      largest.forEach(function (t) {\n        var time = t * 1000;\n        var q = values.find(function (v) {\n          return v[0] === time;\n        });\n\n        if (q) {\n          vs.push(q);\n        } else {\n          vs.push([t * 1000, 0]);\n        }\n      });\n    } else {\n      vs = values;\n    }\n\n    return {\n      name: r.metric.pod,\n      values: vs\n    };\n  }));\n}\n\nvar globalCtx = chartModel(container, {\n  reference: {\n    type: \'continuous\'\n  },\n  series: getSeries(data_big_1_namespaceObject),\n  stack: true,\n  xAxis: {\n    span: 6,\n    format: function format(value) {\n      var datetime = new Date(value);\n      return dataFormatter.format(datetime);\n    }\n  },\n  yAxis: {\n    min: 0,\n    format: function format(value) {\n      return NumberFormatter.format(value);\n    }\n  }\n});\nvar demo_button = document.createElement(\'button\');\ndemo_button.innerText = "click!!";\nvar flag = false;\ndemo_button.addEventListener(\'click\', function () {\n  globalCtx.resetData({\n    reference: {\n      type: \'continuous\'\n    },\n    series: getSeries(flag ? data_big_1_namespaceObject : data_big_2_namespaceObject),\n    stack: true,\n    xAxis: {\n      span: 6,\n      format: function format(value) {\n        var datetime = new Date(value);\n        return dataFormatter.format(datetime);\n      }\n    },\n    yAxis: {\n      min: 0,\n      format: function format(value) {\n        return NumberFormatter.format(value);\n      }\n    }\n  });\n  flag = !flag;\n});\ndocument.body.appendChild(demo_button);\nvar containerdiscrete = document.createElement(\'div\');\ncontainerdiscrete.setAttribute(\'style\', "\\n    position: relative;\\n    margin: 30px;\\n    width: 680px;\\n    height: 320px;\\n    border: 1px solid rebeccapurple;");\ndocument.body.appendChild(containerdiscrete);\n\nfunction randomData() {\n  var keys = [\'a\', \'b\', \'c\'];\n  var date = [\'2012\', \'2013\', \'2014\', \'2015\', \'2016\', \'2017\', \'2018\'];\n  var slicedData = date.slice(Math.floor(Math.random() * 4));\n  return keys.map(function (k) {\n    return {\n      name: k,\n      values: slicedData.map(function (d) {\n        return [d, 300 + Math.round(Math.random() * 1700)];\n      })\n    };\n  });\n}\n\nvar chartModelDiscrete = src([new _2d_data(), new _2d_coord({\n  type: \'vertical\',\n  grid: {\n    vertical: true,\n    horizontal: true\n  }\n}), // new LineChart({\n//     smooth: true,\n//     fill: true,\n// }),\nnew chart_BarChart(), new overlayer_LineIndicator({\n  bar: true\n}), new overlayer_Legend()], {\n  layout: {\n    left: 0,\n    top: 20,\n    bottom: 20,\n    right: 30,\n    xFloat: 50\n  }\n});\nvar g2 = chartModelDiscrete(containerdiscrete, {\n  reference: {\n    type: \'discrete\'\n  },\n  series: randomData(),\n  stack: true,\n  xAxis: {\n    span: 6\n  },\n  yAxis: {\n    min: 0,\n    format: function format(value) {\n      return NumberFormatter.format(value);\n    }\n  }\n});\nvar button2 = document.createElement(\'button\');\nbutton2.innerText = "click!!";\nbutton2.addEventListener(\'click\', function () {\n  g2.resetData({\n    reference: {\n      type: \'discrete\'\n    },\n    series: randomData(),\n    stack: true,\n    xAxis: {\n      span: 6\n    },\n    yAxis: {\n      min: 0,\n      format: function format(value) {\n        return NumberFormatter.format(value);\n      }\n    }\n  });\n});\ndocument.body.appendChild(button2);\nvar containerPie = document.createElement(\'div\');\ncontainerPie.setAttribute(\'style\', "\\n    position: relative;\\n    margin: 30px;\\n    width: 680px;\\n    height: 320px;\\n    border: 1px solid rebeccapurple;");\ndocument.body.appendChild(containerPie);\n\nvar dataRandom = function dataRandom() {\n  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";\n  var length = 6;\n  var data = [];\n\n  for (var i = 0; i < length; i++) {\n    data.push({\n      value: 300 + Math.round(Math.random() * 1700),\n      name: possible.charAt(i)\n    });\n  }\n\n  return data;\n};\n\nvar chartModelPie = src([new _1d_data(), new _2d_geo(), // new LineChart({\n//     smooth: true,\n//     fill: true,\n// }),\nnew chart_PieChart(), new overlayer_Legend({\n  disableselect: true\n})], {\n  layout: {\n    left: 0,\n    top: 20,\n    bottom: 20,\n    right: 30\n  }\n});\nvar g3 = chartModelPie(containerPie, {\n  series: dataRandom()\n});\nvar button3 = document.createElement(\'button\');\nbutton3.innerText = "click!!";\nbutton3.addEventListener(\'click\', function () {\n  g3.resetData({\n    series: dataRandom()\n  });\n});\ndocument.body.appendChild(button3);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL2Jlemllci1qcy9zcmMvdXRpbHMuanM/YTU5MiIsIndlYnBhY2s6Ly9qY2hhcnQvLi9ub2RlX21vZHVsZXMvYmV6aWVyLWpzL3NyYy9wb2x5LWJlemllci5qcz9mYjAxIiwid2VicGFjazovL2pjaGFydC8uL25vZGVfbW9kdWxlcy9iZXppZXItanMvc3JjL2Jlemllci5qcz83OGFkIiwid2VicGFjazovL2pjaGFydC8uL3NyYy9zaGFyZWQvdXRpbHMuanM/ODk5MiIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvcGx1Z2lucy9kYXRhLzJkLWRhdGEuanM/YWRhMyIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvcGx1Z2lucy9kYXRhLzFkLWRhdGEuanM/Zjc0MiIsIndlYnBhY2s6Ly9qY2hhcnQvLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9jb21tb24uanM/Yzk0ZCIsIndlYnBhY2s6Ly9qY2hhcnQvLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9tYXQyZC5qcz83NTFjIiwid2VicGFjazovL2pjaGFydC8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL3ZlYzIuanM/NjcxMSIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvY29udGV4dC91dGlscy5qcz9hZDY5Iiwid2VicGFjazovL2pjaGFydC8uL3NyYy9hbmltYXRpb24vZWFzaW5nLmpzPzg5ZTMiLCJ3ZWJwYWNrOi8vamNoYXJ0Ly4vc3JjL2FuaW1hdGlvbi9hbmltZS5qcz8yYmZhIiwid2VicGFjazovL2pjaGFydC8uL3NyYy9wbHVnaW5zL2F4aXMvMmQtY29vcmQuanM/ZjM4YyIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvcGx1Z2lucy9heGlzLzJkLWdlby5qcz82OGE0Iiwid2VicGFjazovL2pjaGFydC8uL25vZGVfbW9kdWxlcy9AdnVlL3NoYXJlZC9kaXN0L3NoYXJlZC5lc20tYnVuZGxlci5qcz85ZmY0Iiwid2VicGFjazovL2pjaGFydC8uL25vZGVfbW9kdWxlcy9AdnVlL3JlYWN0aXZpdHkvZGlzdC9yZWFjdGl2aXR5LmVzbS1idW5kbGVyLmpzP2ExZTkiLCJ3ZWJwYWNrOi8vamNoYXJ0Ly4vc3JjL3BsdWdpbnMvY2hhcnQvdXRpbHMuanM/N2M4NSIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvcGx1Z2lucy9jaGFydC9MaW5lQ2hhcnQuanM/ZGU5MiIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvcGx1Z2lucy9jaGFydC9CYXJDaGFydC5qcz8wNTIxIiwid2VicGFjazovL2pjaGFydC8uL3NyYy9wbHVnaW5zL2NoYXJ0L1BpZUNoYXJ0LmpzP2M0NGQiLCJ3ZWJwYWNrOi8vamNoYXJ0Ly4vc3JjL3BsdWdpbnMvb3ZlcmxheWVyL0xpbmVJbmRpY2F0b3IuanM/ZTM2MSIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvcGx1Z2lucy9vdmVybGF5ZXIvTGVnZW5kLmpzPzI1ZDIiLCJ3ZWJwYWNrOi8vamNoYXJ0Ly4vc3JjL3NjaGVkdWxlL2luZGV4LmpzPzJlZTkiLCJ3ZWJwYWNrOi8vamNoYXJ0Ly4vc3JjL2NvbnRleHQvbGF5ZXJzL2RhdGEuanM/YzdlYSIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvY29udGV4dC9sYXllcnMvYmFzZS5qcz8zMDU0Iiwid2VicGFjazovL2pjaGFydC8uL3NyYy9jb250ZXh0L2xheWVycy9jb29yZGluYXRlLmpzP2Y1NGMiLCJ3ZWJwYWNrOi8vamNoYXJ0Ly4vc3JjL2NvbnRleHQvbGF5ZXJzL2NoYXJ0LmpzPzA4Y2YiLCJ3ZWJwYWNrOi8vamNoYXJ0Ly4vc3JjL2NvbnRleHQvbGF5ZXJzL292ZXJsYXllci5qcz9mYzIxIiwid2VicGFjazovL2pjaGFydC8uL3NyYy9jb250ZXh0LWFwaS9jb250ZXh0LXByb3h5LmpzPzg4ODQiLCJ3ZWJwYWNrOi8vamNoYXJ0Ly4vc3JjL2NvbnRleHQvZ2xvYmFsLWNvbnRleHQuanM/NzFjMyIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvcGx1Z2lucy9pbm5lci9EUElQbHVnaW4uanM/YWYyZSIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvcGx1Z2lucy9pbm5lci9UaGVtZVBsdWdpbi5qcz9mOTdkIiwid2VicGFjazovL2pjaGFydC8uL3NyYy9wbHVnaW5zL2lubmVyL0xheW91dFBsdWdpbi5qcz9hMjZiIiwid2VicGFjazovL2pjaGFydC8uL3NyYy9wbHVnaW5zL2lubmVyL0V2ZW50TGlzdGVuZXJQbHVnaW4uanM/ODNjMiIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvcGx1Z2lucy9pbm5lci9HbG9iYWxMYXlvdXRQbHVnaW4uanM/Y2E4ZCIsIndlYnBhY2s6Ly9qY2hhcnQvLi9zcmMvY29udGV4dC9pbmRleC5qcz9kMWI3Iiwid2VicGFjazovL2pjaGFydC8uL3NyYy9pbmRleC5qcz9iNjM1Iiwid2VicGFjazovL2pjaGFydC8uL2RlbW8vaW5kZXguanM/MGI2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZXppZXIgfSBmcm9tIFwiLi9iZXppZXIuanNcIjtcblxuLy8gbWF0aC1pbmxpbmluZy5cbmNvbnN0IHsgYWJzLCBjb3MsIHNpbiwgYWNvcywgYXRhbjIsIHNxcnQsIHBvdyB9ID0gTWF0aDtcblxuLy8gY3ViZSByb290IGZ1bmN0aW9uIHlpZWxkaW5nIHJlYWwgcm9vdHNcbmZ1bmN0aW9uIGNydCh2KSB7XG4gIHJldHVybiB2IDwgMCA/IC1wb3coLXYsIDEgLyAzKSA6IHBvdyh2LCAxIC8gMyk7XG59XG5cbi8vIHRyaWcgY29uc3RhbnRzXG5jb25zdCBwaSA9IE1hdGguUEksXG4gIHRhdSA9IDIgKiBwaSxcbiAgcXVhcnQgPSBwaSAvIDIsXG4gIC8vIGZsb2F0IHByZWNpc2lvbiBzaWduaWZpY2FudCBkZWNpbWFsXG4gIGVwc2lsb24gPSAwLjAwMDAwMSxcbiAgLy8gZXh0cmVtYXMgdXNlZCBpbiBiYm94IGNhbGN1bGF0aW9uIGFuZCBzaW1pbGFyIGFsZ29yaXRobXNcbiAgbk1heCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IDkwMDcxOTkyNTQ3NDA5OTEsXG4gIG5NaW4gPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiB8fCAtOTAwNzE5OTI1NDc0MDk5MSxcbiAgLy8gYSB6ZXJvIGNvb3JkaW5hdGUsIHdoaWNoIGlzIHN1cnByaXNpbmdseSB1c2VmdWxcbiAgWkVSTyA9IHsgeDogMCwgeTogMCwgejogMCB9O1xuXG4vLyBCZXppZXIgdXRpbGl0eSBmdW5jdGlvbnNcbmNvbnN0IHV0aWxzID0ge1xuICAvLyBMZWdlbmRyZS1HYXVzcyBhYnNjaXNzYWUgd2l0aCBuPTI0ICh4X2kgdmFsdWVzLCBkZWZpbmVkIGF0IGk9biBhcyB0aGUgcm9vdHMgb2YgdGhlIG50aCBvcmRlciBMZWdlbmRyZSBwb2x5bm9taWFsIFBuKHgpKVxuICBUdmFsdWVzOiBbXG4gICAgLTAuMDY0MDU2ODkyODYyNjA1NjI2MDg1MDQzMDgyNjI0NzQ1MDM4NTkwOSxcbiAgICAwLjA2NDA1Njg5Mjg2MjYwNTYyNjA4NTA0MzA4MjYyNDc0NTAzODU5MDksXG4gICAgLTAuMTkxMTE4ODY3NDczNjE2MzA5MTU4NjM5ODIwNzU3MDY5NjMxODQwNCxcbiAgICAwLjE5MTExODg2NzQ3MzYxNjMwOTE1ODYzOTgyMDc1NzA2OTYzMTg0MDQsXG4gICAgLTAuMzE1MDQyNjc5Njk2MTYzMzc0Mzg2NzkzMjkxMzE5ODEwMjQwNzg2NCxcbiAgICAwLjMxNTA0MjY3OTY5NjE2MzM3NDM4Njc5MzI5MTMxOTgxMDI0MDc4NjQsXG4gICAgLTAuNDMzNzkzNTA3NjI2MDQ1MTM4NDg3MDg0MjMxOTEzMzQ5NzEyNDUyNCxcbiAgICAwLjQzMzc5MzUwNzYyNjA0NTEzODQ4NzA4NDIzMTkxMzM0OTcxMjQ1MjQsXG4gICAgLTAuNTQ1NDIxNDcxMzg4ODM5NTM1NjU4Mzc1NjE3MjE4MzcyMzcwMDEwNyxcbiAgICAwLjU0NTQyMTQ3MTM4ODgzOTUzNTY1ODM3NTYxNzIxODM3MjM3MDAxMDcsXG4gICAgLTAuNjQ4MDkzNjUxOTM2OTc1NTY5MjUyNDk1Nzg2OTEwNzQ3NjI2NjY5NixcbiAgICAwLjY0ODA5MzY1MTkzNjk3NTU2OTI1MjQ5NTc4NjkxMDc0NzYyNjY2OTYsXG4gICAgLTAuNzQwMTI0MTkxNTc4NTU0MzY0MjQzODI4MTAzMDk5OTc4NDI1NTIzMixcbiAgICAwLjc0MDEyNDE5MTU3ODU1NDM2NDI0MzgyODEwMzA5OTk3ODQyNTUyMzIsXG4gICAgLTAuODIwMDAxOTg1OTczOTAyOTIxOTUzOTQ5ODcyNjY5NzQ1MjA4MDc2MSxcbiAgICAwLjgyMDAwMTk4NTk3MzkwMjkyMTk1Mzk0OTg3MjY2OTc0NTIwODA3NjEsXG4gICAgLTAuODg2NDE1NTI3MDA0NDAxMDM0MjEzMTU0MzQxOTgyMTk2NzU1MDg3MyxcbiAgICAwLjg4NjQxNTUyNzAwNDQwMTAzNDIxMzE1NDM0MTk4MjE5Njc1NTA4NzMsXG4gICAgLTAuOTM4Mjc0NTUyMDAyNzMyNzU4NTIzNjQ5MDAxNzA4NzIxNDQ5NjU0OCxcbiAgICAwLjkzODI3NDU1MjAwMjczMjc1ODUyMzY0OTAwMTcwODcyMTQ0OTY1NDgsXG4gICAgLTAuOTc0NzI4NTU1OTcxMzA5NDk4MTk4MzkxOTkzMDA4MTY5MDYxNzQxMSxcbiAgICAwLjk3NDcyODU1NTk3MTMwOTQ5ODE5ODM5MTk5MzAwODE2OTA2MTc0MTEsXG4gICAgLTAuOTk1MTg3MjE5OTk3MDIxMzYwMTc5OTk3NDA5NzAwNzM2ODExODc0NSxcbiAgICAwLjk5NTE4NzIxOTk5NzAyMTM2MDE3OTk5NzQwOTcwMDczNjgxMTg3NDUsXG4gIF0sXG5cbiAgLy8gTGVnZW5kcmUtR2F1c3Mgd2VpZ2h0cyB3aXRoIG49MjQgKHdfaSB2YWx1ZXMsIGRlZmluZWQgYnkgYSBmdW5jdGlvbiBsaW5rZWQgdG8gaW4gdGhlIEJlemllciBwcmltZXIgYXJ0aWNsZSlcbiAgQ3ZhbHVlczogW1xuICAgIDAuMTI3OTM4MTk1MzQ2NzUyMTU2OTc0MDU2MTY1MjI0Njk1MzcxODUxNyxcbiAgICAwLjEyNzkzODE5NTM0Njc1MjE1Njk3NDA1NjE2NTIyNDY5NTM3MTg1MTcsXG4gICAgMC4xMjU4Mzc0NTYzNDY4MjgyOTYxMjEzNzUzODI1MTExODM2ODg3MjY0LFxuICAgIDAuMTI1ODM3NDU2MzQ2ODI4Mjk2MTIxMzc1MzgyNTExMTgzNjg4NzI2NCxcbiAgICAwLjEyMTY3MDQ3MjkyNzgwMzM5MTIwNDQ2MzE1MzQ3NjI2MjQyNTYwNyxcbiAgICAwLjEyMTY3MDQ3MjkyNzgwMzM5MTIwNDQ2MzE1MzQ3NjI2MjQyNTYwNyxcbiAgICAwLjExNTUwNTY2ODA1MzcyNTYwMTM1MzM0NDQ4MzkwNjc4MzU1OTg2MjIsXG4gICAgMC4xMTU1MDU2NjgwNTM3MjU2MDEzNTMzNDQ0ODM5MDY3ODM1NTk4NjIyLFxuICAgIDAuMTA3NDQ0MjcwMTE1OTY1NjM0NzgyNTc3MzQyNDQ2NjA2MjIyNzk0NixcbiAgICAwLjEwNzQ0NDI3MDExNTk2NTYzNDc4MjU3NzM0MjQ0NjYwNjIyMjc5NDYsXG4gICAgMC4wOTc2MTg2NTIxMDQxMTM4ODgyNjk4ODA2NjQ0NjQyNDcxNTQ0Mjc5LFxuICAgIDAuMDk3NjE4NjUyMTA0MTEzODg4MjY5ODgwNjY0NDY0MjQ3MTU0NDI3OSxcbiAgICAwLjA4NjE5MDE2MTUzMTk1MzI3NTkxNzE4NTIwMjk4Mzc0MjY2NzE4NSxcbiAgICAwLjA4NjE5MDE2MTUzMTk1MzI3NTkxNzE4NTIwMjk4Mzc0MjY2NzE4NSxcbiAgICAwLjA3MzM0NjQ4MTQxMTA4MDMwNTczNDAzMzYxNTI1MzExNjUxODExOTMsXG4gICAgMC4wNzMzNDY0ODE0MTEwODAzMDU3MzQwMzM2MTUyNTMxMTY1MTgxMTkzLFxuICAgIDAuMDU5Mjk4NTg0OTE1NDM2NzgwNzQ2MzY3NzU4NTAwMTA4NTg0NTQxMixcbiAgICAwLjA1OTI5ODU4NDkxNTQzNjc4MDc0NjM2Nzc1ODUwMDEwODU4NDU0MTIsXG4gICAgMC4wNDQyNzc0Mzg4MTc0MTk4MDYxNjg2MDI3NDgyMTEzMzgyMjg4NTkzLFxuICAgIDAuMDQ0Mjc3NDM4ODE3NDE5ODA2MTY4NjAyNzQ4MjExMzM4MjI4ODU5MyxcbiAgICAwLjAyODUzMTM4ODYyODkzMzY2MzE4MTMwNzgxNTk1MTg3ODI4NjQ0OTEsXG4gICAgMC4wMjg1MzEzODg2Mjg5MzM2NjMxODEzMDc4MTU5NTE4NzgyODY0NDkxLFxuICAgIDAuMDEyMzQxMjI5Nzk5OTg3MTk5NTQ2ODA1NjY3MDcwMDM3MjkxNTc1OSxcbiAgICAwLjAxMjM0MTIyOTc5OTk4NzE5OTU0NjgwNTY2NzA3MDAzNzI5MTU3NTksXG4gIF0sXG5cbiAgYXJjZm46IGZ1bmN0aW9uICh0LCBkZXJpdmF0aXZlRm4pIHtcbiAgICBjb25zdCBkID0gZGVyaXZhdGl2ZUZuKHQpO1xuICAgIGxldCBsID0gZC54ICogZC54ICsgZC55ICogZC55O1xuICAgIGlmICh0eXBlb2YgZC56ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBsICs9IGQueiAqIGQuejtcbiAgICB9XG4gICAgcmV0dXJuIHNxcnQobCk7XG4gIH0sXG5cbiAgY29tcHV0ZTogZnVuY3Rpb24gKHQsIHBvaW50cywgXzNkKSB7XG4gICAgLy8gc2hvcnRjdXRzXG4gICAgaWYgKHQgPT09IDApIHtcbiAgICAgIHBvaW50c1swXS50ID0gMDtcbiAgICAgIHJldHVybiBwb2ludHNbMF07XG4gICAgfVxuXG4gICAgY29uc3Qgb3JkZXIgPSBwb2ludHMubGVuZ3RoIC0gMTtcblxuICAgIGlmICh0ID09PSAxKSB7XG4gICAgICBwb2ludHNbb3JkZXJdLnQgPSAxO1xuICAgICAgcmV0dXJuIHBvaW50c1tvcmRlcl07XG4gICAgfVxuXG4gICAgY29uc3QgbXQgPSAxIC0gdDtcbiAgICBsZXQgcCA9IHBvaW50cztcblxuICAgIC8vIGNvbnN0YW50P1xuICAgIGlmIChvcmRlciA9PT0gMCkge1xuICAgICAgcG9pbnRzWzBdLnQgPSB0O1xuICAgICAgcmV0dXJuIHBvaW50c1swXTtcbiAgICB9XG5cbiAgICAvLyBsaW5lYXI/XG4gICAgaWYgKG9yZGVyID09PSAxKSB7XG4gICAgICBjb25zdCByZXQgPSB7XG4gICAgICAgIHg6IG10ICogcFswXS54ICsgdCAqIHBbMV0ueCxcbiAgICAgICAgeTogbXQgKiBwWzBdLnkgKyB0ICogcFsxXS55LFxuICAgICAgICB0OiB0LFxuICAgICAgfTtcbiAgICAgIGlmIChfM2QpIHtcbiAgICAgICAgcmV0LnogPSBtdCAqIHBbMF0ueiArIHQgKiBwWzFdLno7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8vIHF1YWRyYXRpYy9jdWJpYyBjdXJ2ZT9cbiAgICBpZiAob3JkZXIgPCA0KSB7XG4gICAgICBsZXQgbXQyID0gbXQgKiBtdCxcbiAgICAgICAgdDIgPSB0ICogdCxcbiAgICAgICAgYSxcbiAgICAgICAgYixcbiAgICAgICAgYyxcbiAgICAgICAgZCA9IDA7XG4gICAgICBpZiAob3JkZXIgPT09IDIpIHtcbiAgICAgICAgcCA9IFtwWzBdLCBwWzFdLCBwWzJdLCBaRVJPXTtcbiAgICAgICAgYSA9IG10MjtcbiAgICAgICAgYiA9IG10ICogdCAqIDI7XG4gICAgICAgIGMgPSB0MjtcbiAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT09IDMpIHtcbiAgICAgICAgYSA9IG10MiAqIG10O1xuICAgICAgICBiID0gbXQyICogdCAqIDM7XG4gICAgICAgIGMgPSBtdCAqIHQyICogMztcbiAgICAgICAgZCA9IHQgKiB0MjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJldCA9IHtcbiAgICAgICAgeDogYSAqIHBbMF0ueCArIGIgKiBwWzFdLnggKyBjICogcFsyXS54ICsgZCAqIHBbM10ueCxcbiAgICAgICAgeTogYSAqIHBbMF0ueSArIGIgKiBwWzFdLnkgKyBjICogcFsyXS55ICsgZCAqIHBbM10ueSxcbiAgICAgICAgdDogdCxcbiAgICAgIH07XG4gICAgICBpZiAoXzNkKSB7XG4gICAgICAgIHJldC56ID0gYSAqIHBbMF0ueiArIGIgKiBwWzFdLnogKyBjICogcFsyXS56ICsgZCAqIHBbM10uejtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLy8gaGlnaGVyIG9yZGVyIGN1cnZlczogdXNlIGRlIENhc3RlbGphdSdzIGNvbXB1dGF0aW9uXG4gICAgY29uc3QgZENwdHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHBvaW50cykpO1xuICAgIHdoaWxlIChkQ3B0cy5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRDcHRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBkQ3B0c1tpXSA9IHtcbiAgICAgICAgICB4OiBkQ3B0c1tpXS54ICsgKGRDcHRzW2kgKyAxXS54IC0gZENwdHNbaV0ueCkgKiB0LFxuICAgICAgICAgIHk6IGRDcHRzW2ldLnkgKyAoZENwdHNbaSArIDFdLnkgLSBkQ3B0c1tpXS55KSAqIHQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgZENwdHNbaV0ueiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGRDcHRzW2ldID0gZENwdHNbaV0ueiArIChkQ3B0c1tpICsgMV0ueiAtIGRDcHRzW2ldLnopICogdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZENwdHMuc3BsaWNlKGRDcHRzLmxlbmd0aCAtIDEsIDEpO1xuICAgIH1cbiAgICBkQ3B0c1swXS50ID0gdDtcbiAgICByZXR1cm4gZENwdHNbMF07XG4gIH0sXG5cbiAgY29tcHV0ZVdpdGhSYXRpb3M6IGZ1bmN0aW9uICh0LCBwb2ludHMsIHJhdGlvcywgXzNkKSB7XG4gICAgY29uc3QgbXQgPSAxIC0gdCxcbiAgICAgIHIgPSByYXRpb3MsXG4gICAgICBwID0gcG9pbnRzO1xuXG4gICAgbGV0IGYxID0gclswXSxcbiAgICAgIGYyID0gclsxXSxcbiAgICAgIGYzID0gclsyXSxcbiAgICAgIGY0ID0gclszXSxcbiAgICAgIGQ7XG5cbiAgICAvLyBzcGVjIGZvciBsaW5lYXJcbiAgICBmMSAqPSBtdDtcbiAgICBmMiAqPSB0O1xuXG4gICAgaWYgKHAubGVuZ3RoID09PSAyKSB7XG4gICAgICBkID0gZjEgKyBmMjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IChmMSAqIHBbMF0ueCArIGYyICogcFsxXS54KSAvIGQsXG4gICAgICAgIHk6IChmMSAqIHBbMF0ueSArIGYyICogcFsxXS55KSAvIGQsXG4gICAgICAgIHo6ICFfM2QgPyBmYWxzZSA6IChmMSAqIHBbMF0ueiArIGYyICogcFsxXS56KSAvIGQsXG4gICAgICAgIHQ6IHQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIHVwZ3JhZGUgdG8gcXVhZHJhdGljXG4gICAgZjEgKj0gbXQ7XG4gICAgZjIgKj0gMiAqIG10O1xuICAgIGYzICo9IHQgKiB0O1xuXG4gICAgaWYgKHAubGVuZ3RoID09PSAzKSB7XG4gICAgICBkID0gZjEgKyBmMiArIGYzO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogKGYxICogcFswXS54ICsgZjIgKiBwWzFdLnggKyBmMyAqIHBbMl0ueCkgLyBkLFxuICAgICAgICB5OiAoZjEgKiBwWzBdLnkgKyBmMiAqIHBbMV0ueSArIGYzICogcFsyXS55KSAvIGQsXG4gICAgICAgIHo6ICFfM2QgPyBmYWxzZSA6IChmMSAqIHBbMF0ueiArIGYyICogcFsxXS56ICsgZjMgKiBwWzJdLnopIC8gZCxcbiAgICAgICAgdDogdCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gdXBncmFkZSB0byBjdWJpY1xuICAgIGYxICo9IG10O1xuICAgIGYyICo9IDEuNSAqIG10O1xuICAgIGYzICo9IDMgKiBtdDtcbiAgICBmNCAqPSB0ICogdCAqIHQ7XG5cbiAgICBpZiAocC5sZW5ndGggPT09IDQpIHtcbiAgICAgIGQgPSBmMSArIGYyICsgZjMgKyBmNDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IChmMSAqIHBbMF0ueCArIGYyICogcFsxXS54ICsgZjMgKiBwWzJdLnggKyBmNCAqIHBbM10ueCkgLyBkLFxuICAgICAgICB5OiAoZjEgKiBwWzBdLnkgKyBmMiAqIHBbMV0ueSArIGYzICogcFsyXS55ICsgZjQgKiBwWzNdLnkpIC8gZCxcbiAgICAgICAgejogIV8zZFxuICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICA6IChmMSAqIHBbMF0ueiArIGYyICogcFsxXS56ICsgZjMgKiBwWzJdLnogKyBmNCAqIHBbM10ueikgLyBkLFxuICAgICAgICB0OiB0LFxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgZGVyaXZlOiBmdW5jdGlvbiAocG9pbnRzLCBfM2QpIHtcbiAgICBjb25zdCBkcG9pbnRzID0gW107XG4gICAgZm9yIChsZXQgcCA9IHBvaW50cywgZCA9IHAubGVuZ3RoLCBjID0gZCAtIDE7IGQgPiAxOyBkLS0sIGMtLSkge1xuICAgICAgY29uc3QgbGlzdCA9IFtdO1xuICAgICAgZm9yIChsZXQgaiA9IDAsIGRwdDsgaiA8IGM7IGorKykge1xuICAgICAgICBkcHQgPSB7XG4gICAgICAgICAgeDogYyAqIChwW2ogKyAxXS54IC0gcFtqXS54KSxcbiAgICAgICAgICB5OiBjICogKHBbaiArIDFdLnkgLSBwW2pdLnkpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoXzNkKSB7XG4gICAgICAgICAgZHB0LnogPSBjICogKHBbaiArIDFdLnogLSBwW2pdLnopO1xuICAgICAgICB9XG4gICAgICAgIGxpc3QucHVzaChkcHQpO1xuICAgICAgfVxuICAgICAgZHBvaW50cy5wdXNoKGxpc3QpO1xuICAgICAgcCA9IGxpc3Q7XG4gICAgfVxuICAgIHJldHVybiBkcG9pbnRzO1xuICB9LFxuXG4gIGJldHdlZW46IGZ1bmN0aW9uICh2LCBtLCBNKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIChtIDw9IHYgJiYgdiA8PSBNKSB8fFxuICAgICAgdXRpbHMuYXBwcm94aW1hdGVseSh2LCBtKSB8fFxuICAgICAgdXRpbHMuYXBwcm94aW1hdGVseSh2LCBNKVxuICAgICk7XG4gIH0sXG5cbiAgYXBwcm94aW1hdGVseTogZnVuY3Rpb24gKGEsIGIsIHByZWNpc2lvbikge1xuICAgIHJldHVybiBhYnMoYSAtIGIpIDw9IChwcmVjaXNpb24gfHwgZXBzaWxvbik7XG4gIH0sXG5cbiAgbGVuZ3RoOiBmdW5jdGlvbiAoZGVyaXZhdGl2ZUZuKSB7XG4gICAgY29uc3QgeiA9IDAuNSxcbiAgICAgIGxlbiA9IHV0aWxzLlR2YWx1ZXMubGVuZ3RoO1xuXG4gICAgbGV0IHN1bSA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgdDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0ID0geiAqIHV0aWxzLlR2YWx1ZXNbaV0gKyB6O1xuICAgICAgc3VtICs9IHV0aWxzLkN2YWx1ZXNbaV0gKiB1dGlscy5hcmNmbih0LCBkZXJpdmF0aXZlRm4pO1xuICAgIH1cbiAgICByZXR1cm4geiAqIHN1bTtcbiAgfSxcblxuICBtYXA6IGZ1bmN0aW9uICh2LCBkcywgZGUsIHRzLCB0ZSkge1xuICAgIGNvbnN0IGQxID0gZGUgLSBkcyxcbiAgICAgIGQyID0gdGUgLSB0cyxcbiAgICAgIHYyID0gdiAtIGRzLFxuICAgICAgciA9IHYyIC8gZDE7XG4gICAgcmV0dXJuIHRzICsgZDIgKiByO1xuICB9LFxuXG4gIGxlcnA6IGZ1bmN0aW9uIChyLCB2MSwgdjIpIHtcbiAgICBjb25zdCByZXQgPSB7XG4gICAgICB4OiB2MS54ICsgciAqICh2Mi54IC0gdjEueCksXG4gICAgICB5OiB2MS55ICsgciAqICh2Mi55IC0gdjEueSksXG4gICAgfTtcbiAgICBpZiAodjEueiAhPT0gdW5kZWZpbmVkICYmIHYyLnogIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0LnogPSB2MS56ICsgciAqICh2Mi56IC0gdjEueik7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgcG9pbnRUb1N0cmluZzogZnVuY3Rpb24gKHApIHtcbiAgICBsZXQgcyA9IHAueCArIFwiL1wiICsgcC55O1xuICAgIGlmICh0eXBlb2YgcC56ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBzICs9IFwiL1wiICsgcC56O1xuICAgIH1cbiAgICByZXR1cm4gcztcbiAgfSxcblxuICBwb2ludHNUb1N0cmluZzogZnVuY3Rpb24gKHBvaW50cykge1xuICAgIHJldHVybiBcIltcIiArIHBvaW50cy5tYXAodXRpbHMucG9pbnRUb1N0cmluZykuam9pbihcIiwgXCIpICsgXCJdXCI7XG4gIH0sXG5cbiAgY29weTogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICB9LFxuXG4gIGFuZ2xlOiBmdW5jdGlvbiAobywgdjEsIHYyKSB7XG4gICAgY29uc3QgZHgxID0gdjEueCAtIG8ueCxcbiAgICAgIGR5MSA9IHYxLnkgLSBvLnksXG4gICAgICBkeDIgPSB2Mi54IC0gby54LFxuICAgICAgZHkyID0gdjIueSAtIG8ueSxcbiAgICAgIGNyb3NzID0gZHgxICogZHkyIC0gZHkxICogZHgyLFxuICAgICAgZG90ID0gZHgxICogZHgyICsgZHkxICogZHkyO1xuICAgIHJldHVybiBhdGFuMihjcm9zcywgZG90KTtcbiAgfSxcblxuICAvLyByb3VuZCBhcyBzdHJpbmcsIHRvIGF2b2lkIHJvdW5kaW5nIGVycm9yc1xuICByb3VuZDogZnVuY3Rpb24gKHYsIGQpIHtcbiAgICBjb25zdCBzID0gXCJcIiArIHY7XG4gICAgY29uc3QgcG9zID0gcy5pbmRleE9mKFwiLlwiKTtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzLnN1YnN0cmluZygwLCBwb3MgKyAxICsgZCkpO1xuICB9LFxuXG4gIGRpc3Q6IGZ1bmN0aW9uIChwMSwgcDIpIHtcbiAgICBjb25zdCBkeCA9IHAxLnggLSBwMi54LFxuICAgICAgZHkgPSBwMS55IC0gcDIueTtcbiAgICByZXR1cm4gc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gIH0sXG5cbiAgY2xvc2VzdDogZnVuY3Rpb24gKExVVCwgcG9pbnQpIHtcbiAgICBsZXQgbWRpc3QgPSBwb3coMiwgNjMpLFxuICAgICAgbXBvcyxcbiAgICAgIGQ7XG4gICAgTFVULmZvckVhY2goZnVuY3Rpb24gKHAsIGlkeCkge1xuICAgICAgZCA9IHV0aWxzLmRpc3QocG9pbnQsIHApO1xuICAgICAgaWYgKGQgPCBtZGlzdCkge1xuICAgICAgICBtZGlzdCA9IGQ7XG4gICAgICAgIG1wb3MgPSBpZHg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgbWRpc3Q6IG1kaXN0LCBtcG9zOiBtcG9zIH07XG4gIH0sXG5cbiAgYWJjcmF0aW86IGZ1bmN0aW9uICh0LCBuKSB7XG4gICAgLy8gc2VlIHJhdGlvKHQpIG5vdGUgb24gaHR0cDovL3BvbWF4LmdpdGh1Yi5pby9iZXppZXJpbmZvLyNhYmNcbiAgICBpZiAobiAhPT0gMiAmJiBuICE9PSAzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdCA9IDAuNTtcbiAgICB9IGVsc2UgaWYgKHQgPT09IDAgfHwgdCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuICAgIGNvbnN0IGJvdHRvbSA9IHBvdyh0LCBuKSArIHBvdygxIC0gdCwgbiksXG4gICAgICB0b3AgPSBib3R0b20gLSAxO1xuICAgIHJldHVybiBhYnModG9wIC8gYm90dG9tKTtcbiAgfSxcblxuICBwcm9qZWN0aW9ucmF0aW86IGZ1bmN0aW9uICh0LCBuKSB7XG4gICAgLy8gc2VlIHUodCkgbm90ZSBvbiBodHRwOi8vcG9tYXguZ2l0aHViLmlvL2JlemllcmluZm8vI2FiY1xuICAgIGlmIChuICE9PSAyICYmIG4gIT09IDMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0ID0gMC41O1xuICAgIH0gZWxzZSBpZiAodCA9PT0gMCB8fCB0ID09PSAxKSB7XG4gICAgICByZXR1cm4gdDtcbiAgICB9XG4gICAgY29uc3QgdG9wID0gcG93KDEgLSB0LCBuKSxcbiAgICAgIGJvdHRvbSA9IHBvdyh0LCBuKSArIHRvcDtcbiAgICByZXR1cm4gdG9wIC8gYm90dG9tO1xuICB9LFxuXG4gIGxsaTg6IGZ1bmN0aW9uICh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpIHtcbiAgICBjb25zdCBueCA9XG4gICAgICAgICh4MSAqIHkyIC0geTEgKiB4MikgKiAoeDMgLSB4NCkgLSAoeDEgLSB4MikgKiAoeDMgKiB5NCAtIHkzICogeDQpLFxuICAgICAgbnkgPSAoeDEgKiB5MiAtIHkxICogeDIpICogKHkzIC0geTQpIC0gKHkxIC0geTIpICogKHgzICogeTQgLSB5MyAqIHg0KSxcbiAgICAgIGQgPSAoeDEgLSB4MikgKiAoeTMgLSB5NCkgLSAoeTEgLSB5MikgKiAoeDMgLSB4NCk7XG4gICAgaWYgKGQgPT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4geyB4OiBueCAvIGQsIHk6IG55IC8gZCB9O1xuICB9LFxuXG4gIGxsaTQ6IGZ1bmN0aW9uIChwMSwgcDIsIHAzLCBwNCkge1xuICAgIGNvbnN0IHgxID0gcDEueCxcbiAgICAgIHkxID0gcDEueSxcbiAgICAgIHgyID0gcDIueCxcbiAgICAgIHkyID0gcDIueSxcbiAgICAgIHgzID0gcDMueCxcbiAgICAgIHkzID0gcDMueSxcbiAgICAgIHg0ID0gcDQueCxcbiAgICAgIHk0ID0gcDQueTtcbiAgICByZXR1cm4gdXRpbHMubGxpOCh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpO1xuICB9LFxuXG4gIGxsaTogZnVuY3Rpb24gKHYxLCB2Mikge1xuICAgIHJldHVybiB1dGlscy5sbGk0KHYxLCB2MS5jLCB2MiwgdjIuYyk7XG4gIH0sXG5cbiAgbWFrZWxpbmU6IGZ1bmN0aW9uIChwMSwgcDIpIHtcbiAgICBjb25zdCB4MSA9IHAxLngsXG4gICAgICB5MSA9IHAxLnksXG4gICAgICB4MiA9IHAyLngsXG4gICAgICB5MiA9IHAyLnksXG4gICAgICBkeCA9ICh4MiAtIHgxKSAvIDMsXG4gICAgICBkeSA9ICh5MiAtIHkxKSAvIDM7XG4gICAgcmV0dXJuIG5ldyBCZXppZXIoXG4gICAgICB4MSxcbiAgICAgIHkxLFxuICAgICAgeDEgKyBkeCxcbiAgICAgIHkxICsgZHksXG4gICAgICB4MSArIDIgKiBkeCxcbiAgICAgIHkxICsgMiAqIGR5LFxuICAgICAgeDIsXG4gICAgICB5MlxuICAgICk7XG4gIH0sXG5cbiAgZmluZGJib3g6IGZ1bmN0aW9uIChzZWN0aW9ucykge1xuICAgIGxldCBteCA9IG5NYXgsXG4gICAgICBteSA9IG5NYXgsXG4gICAgICBNWCA9IG5NaW4sXG4gICAgICBNWSA9IG5NaW47XG4gICAgc2VjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgICAgY29uc3QgYmJveCA9IHMuYmJveCgpO1xuICAgICAgaWYgKG14ID4gYmJveC54Lm1pbikgbXggPSBiYm94LngubWluO1xuICAgICAgaWYgKG15ID4gYmJveC55Lm1pbikgbXkgPSBiYm94LnkubWluO1xuICAgICAgaWYgKE1YIDwgYmJveC54Lm1heCkgTVggPSBiYm94LngubWF4O1xuICAgICAgaWYgKE1ZIDwgYmJveC55Lm1heCkgTVkgPSBiYm94LnkubWF4O1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB4OiB7IG1pbjogbXgsIG1pZDogKG14ICsgTVgpIC8gMiwgbWF4OiBNWCwgc2l6ZTogTVggLSBteCB9LFxuICAgICAgeTogeyBtaW46IG15LCBtaWQ6IChteSArIE1ZKSAvIDIsIG1heDogTVksIHNpemU6IE1ZIC0gbXkgfSxcbiAgICB9O1xuICB9LFxuXG4gIHNoYXBlaW50ZXJzZWN0aW9uczogZnVuY3Rpb24gKFxuICAgIHMxLFxuICAgIGJib3gxLFxuICAgIHMyLFxuICAgIGJib3gyLFxuICAgIGN1cnZlSW50ZXJzZWN0aW9uVGhyZXNob2xkXG4gICkge1xuICAgIGlmICghdXRpbHMuYmJveG92ZXJsYXAoYmJveDEsIGJib3gyKSkgcmV0dXJuIFtdO1xuICAgIGNvbnN0IGludGVyc2VjdGlvbnMgPSBbXTtcbiAgICBjb25zdCBhMSA9IFtzMS5zdGFydGNhcCwgczEuZm9yd2FyZCwgczEuYmFjaywgczEuZW5kY2FwXTtcbiAgICBjb25zdCBhMiA9IFtzMi5zdGFydGNhcCwgczIuZm9yd2FyZCwgczIuYmFjaywgczIuZW5kY2FwXTtcbiAgICBhMS5mb3JFYWNoKGZ1bmN0aW9uIChsMSkge1xuICAgICAgaWYgKGwxLnZpcnR1YWwpIHJldHVybjtcbiAgICAgIGEyLmZvckVhY2goZnVuY3Rpb24gKGwyKSB7XG4gICAgICAgIGlmIChsMi52aXJ0dWFsKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGlzcyA9IGwxLmludGVyc2VjdHMobDIsIGN1cnZlSW50ZXJzZWN0aW9uVGhyZXNob2xkKTtcbiAgICAgICAgaWYgKGlzcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaXNzLmMxID0gbDE7XG4gICAgICAgICAgaXNzLmMyID0gbDI7XG4gICAgICAgICAgaXNzLnMxID0gczE7XG4gICAgICAgICAgaXNzLnMyID0gczI7XG4gICAgICAgICAgaW50ZXJzZWN0aW9ucy5wdXNoKGlzcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBpbnRlcnNlY3Rpb25zO1xuICB9LFxuXG4gIG1ha2VzaGFwZTogZnVuY3Rpb24gKGZvcndhcmQsIGJhY2ssIGN1cnZlSW50ZXJzZWN0aW9uVGhyZXNob2xkKSB7XG4gICAgY29uc3QgYnBsID0gYmFjay5wb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IGZwbCA9IGZvcndhcmQucG9pbnRzLmxlbmd0aDtcbiAgICBjb25zdCBzdGFydCA9IHV0aWxzLm1ha2VsaW5lKGJhY2sucG9pbnRzW2JwbCAtIDFdLCBmb3J3YXJkLnBvaW50c1swXSk7XG4gICAgY29uc3QgZW5kID0gdXRpbHMubWFrZWxpbmUoZm9yd2FyZC5wb2ludHNbZnBsIC0gMV0sIGJhY2sucG9pbnRzWzBdKTtcbiAgICBjb25zdCBzaGFwZSA9IHtcbiAgICAgIHN0YXJ0Y2FwOiBzdGFydCxcbiAgICAgIGZvcndhcmQ6IGZvcndhcmQsXG4gICAgICBiYWNrOiBiYWNrLFxuICAgICAgZW5kY2FwOiBlbmQsXG4gICAgICBiYm94OiB1dGlscy5maW5kYmJveChbc3RhcnQsIGZvcndhcmQsIGJhY2ssIGVuZF0pLFxuICAgIH07XG4gICAgc2hhcGUuaW50ZXJzZWN0aW9ucyA9IGZ1bmN0aW9uIChzMikge1xuICAgICAgcmV0dXJuIHV0aWxzLnNoYXBlaW50ZXJzZWN0aW9ucyhcbiAgICAgICAgc2hhcGUsXG4gICAgICAgIHNoYXBlLmJib3gsXG4gICAgICAgIHMyLFxuICAgICAgICBzMi5iYm94LFxuICAgICAgICBjdXJ2ZUludGVyc2VjdGlvblRocmVzaG9sZFxuICAgICAgKTtcbiAgICB9O1xuICAgIHJldHVybiBzaGFwZTtcbiAgfSxcblxuICBnZXRtaW5tYXg6IGZ1bmN0aW9uIChjdXJ2ZSwgZCwgbGlzdCkge1xuICAgIGlmICghbGlzdCkgcmV0dXJuIHsgbWluOiAwLCBtYXg6IDAgfTtcbiAgICBsZXQgbWluID0gbk1heCxcbiAgICAgIG1heCA9IG5NaW4sXG4gICAgICB0LFxuICAgICAgYztcbiAgICBpZiAobGlzdC5pbmRleE9mKDApID09PSAtMSkge1xuICAgICAgbGlzdCA9IFswXS5jb25jYXQobGlzdCk7XG4gICAgfVxuICAgIGlmIChsaXN0LmluZGV4T2YoMSkgPT09IC0xKSB7XG4gICAgICBsaXN0LnB1c2goMSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0ID0gbGlzdFtpXTtcbiAgICAgIGMgPSBjdXJ2ZS5nZXQodCk7XG4gICAgICBpZiAoY1tkXSA8IG1pbikge1xuICAgICAgICBtaW4gPSBjW2RdO1xuICAgICAgfVxuICAgICAgaWYgKGNbZF0gPiBtYXgpIHtcbiAgICAgICAgbWF4ID0gY1tkXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgbWluOiBtaW4sIG1pZDogKG1pbiArIG1heCkgLyAyLCBtYXg6IG1heCwgc2l6ZTogbWF4IC0gbWluIH07XG4gIH0sXG5cbiAgYWxpZ246IGZ1bmN0aW9uIChwb2ludHMsIGxpbmUpIHtcbiAgICBjb25zdCB0eCA9IGxpbmUucDEueCxcbiAgICAgIHR5ID0gbGluZS5wMS55LFxuICAgICAgYSA9IC1hdGFuMihsaW5lLnAyLnkgLSB0eSwgbGluZS5wMi54IC0gdHgpLFxuICAgICAgZCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogKHYueCAtIHR4KSAqIGNvcyhhKSAtICh2LnkgLSB0eSkgKiBzaW4oYSksXG4gICAgICAgICAgeTogKHYueCAtIHR4KSAqIHNpbihhKSArICh2LnkgLSB0eSkgKiBjb3MoYSksXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIHJldHVybiBwb2ludHMubWFwKGQpO1xuICB9LFxuXG4gIHJvb3RzOiBmdW5jdGlvbiAocG9pbnRzLCBsaW5lKSB7XG4gICAgbGluZSA9IGxpbmUgfHwgeyBwMTogeyB4OiAwLCB5OiAwIH0sIHAyOiB7IHg6IDEsIHk6IDAgfSB9O1xuXG4gICAgY29uc3Qgb3JkZXIgPSBwb2ludHMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBhbGlnbmVkID0gdXRpbHMuYWxpZ24ocG9pbnRzLCBsaW5lKTtcbiAgICBjb25zdCByZWR1Y2UgPSBmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIDAgPD0gdCAmJiB0IDw9IDE7XG4gICAgfTtcblxuICAgIGlmIChvcmRlciA9PT0gMikge1xuICAgICAgY29uc3QgYSA9IGFsaWduZWRbMF0ueSxcbiAgICAgICAgYiA9IGFsaWduZWRbMV0ueSxcbiAgICAgICAgYyA9IGFsaWduZWRbMl0ueSxcbiAgICAgICAgZCA9IGEgLSAyICogYiArIGM7XG4gICAgICBpZiAoZCAhPT0gMCkge1xuICAgICAgICBjb25zdCBtMSA9IC1zcXJ0KGIgKiBiIC0gYSAqIGMpLFxuICAgICAgICAgIG0yID0gLWEgKyBiLFxuICAgICAgICAgIHYxID0gLShtMSArIG0yKSAvIGQsXG4gICAgICAgICAgdjIgPSAtKC1tMSArIG0yKSAvIGQ7XG4gICAgICAgIHJldHVybiBbdjEsIHYyXS5maWx0ZXIocmVkdWNlKTtcbiAgICAgIH0gZWxzZSBpZiAoYiAhPT0gYyAmJiBkID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbKDIgKiBiIC0gYykgLyAoMiAqIGIgLSAyICogYyldLmZpbHRlcihyZWR1Y2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIHNlZSBodHRwOi8vd3d3LnRyYW5zNG1pbmQuY29tL3BlcnNvbmFsX2RldmVsb3BtZW50L21hdGhlbWF0aWNzL3BvbHlub21pYWxzL2N1YmljQWxnZWJyYS5odG1cbiAgICBjb25zdCBwYSA9IGFsaWduZWRbMF0ueSxcbiAgICAgIHBiID0gYWxpZ25lZFsxXS55LFxuICAgICAgcGMgPSBhbGlnbmVkWzJdLnksXG4gICAgICBwZCA9IGFsaWduZWRbM10ueTtcblxuICAgIGxldCBkID0gLXBhICsgMyAqIHBiIC0gMyAqIHBjICsgcGQsXG4gICAgICBhID0gMyAqIHBhIC0gNiAqIHBiICsgMyAqIHBjLFxuICAgICAgYiA9IC0zICogcGEgKyAzICogcGIsXG4gICAgICBjID0gcGE7XG5cbiAgICBpZiAodXRpbHMuYXBwcm94aW1hdGVseShkLCAwKSkge1xuICAgICAgLy8gdGhpcyBpcyBub3QgYSBjdWJpYyBjdXJ2ZS5cbiAgICAgIGlmICh1dGlscy5hcHByb3hpbWF0ZWx5KGEsIDApKSB7XG4gICAgICAgIC8vIGluIGZhY3QsIHRoaXMgaXMgbm90IGEgcXVhZHJhdGljIGN1cnZlIGVpdGhlci5cbiAgICAgICAgaWYgKHV0aWxzLmFwcHJveGltYXRlbHkoYiwgMCkpIHtcbiAgICAgICAgICAvLyBpbiBmYWN0IGluIGZhY3QsIHRoZXJlIGFyZSBubyBzb2x1dGlvbnMuXG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxpbmVhciBzb2x1dGlvbjpcbiAgICAgICAgcmV0dXJuIFstYyAvIGJdLmZpbHRlcihyZWR1Y2UpO1xuICAgICAgfVxuICAgICAgLy8gcXVhZHJhdGljIHNvbHV0aW9uOlxuICAgICAgY29uc3QgcSA9IHNxcnQoYiAqIGIgLSA0ICogYSAqIGMpLFxuICAgICAgICBhMiA9IDIgKiBhO1xuICAgICAgcmV0dXJuIFsocSAtIGIpIC8gYTIsICgtYiAtIHEpIC8gYTJdLmZpbHRlcihyZWR1Y2UpO1xuICAgIH1cblxuICAgIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGtub3cgd2UgbmVlZCBhIGN1YmljIHNvbHV0aW9uOlxuXG4gICAgYSAvPSBkO1xuICAgIGIgLz0gZDtcbiAgICBjIC89IGQ7XG5cbiAgICBjb25zdCBwID0gKDMgKiBiIC0gYSAqIGEpIC8gMyxcbiAgICAgIHAzID0gcCAvIDMsXG4gICAgICBxID0gKDIgKiBhICogYSAqIGEgLSA5ICogYSAqIGIgKyAyNyAqIGMpIC8gMjcsXG4gICAgICBxMiA9IHEgLyAyLFxuICAgICAgZGlzY3JpbWluYW50ID0gcTIgKiBxMiArIHAzICogcDMgKiBwMztcblxuICAgIGxldCB1MSwgdjEsIHgxLCB4MiwgeDM7XG4gICAgaWYgKGRpc2NyaW1pbmFudCA8IDApIHtcbiAgICAgIGNvbnN0IG1wMyA9IC1wIC8gMyxcbiAgICAgICAgbXAzMyA9IG1wMyAqIG1wMyAqIG1wMyxcbiAgICAgICAgciA9IHNxcnQobXAzMyksXG4gICAgICAgIHQgPSAtcSAvICgyICogciksXG4gICAgICAgIGNvc3BoaSA9IHQgPCAtMSA/IC0xIDogdCA+IDEgPyAxIDogdCxcbiAgICAgICAgcGhpID0gYWNvcyhjb3NwaGkpLFxuICAgICAgICBjcnRyID0gY3J0KHIpLFxuICAgICAgICB0MSA9IDIgKiBjcnRyO1xuICAgICAgeDEgPSB0MSAqIGNvcyhwaGkgLyAzKSAtIGEgLyAzO1xuICAgICAgeDIgPSB0MSAqIGNvcygocGhpICsgdGF1KSAvIDMpIC0gYSAvIDM7XG4gICAgICB4MyA9IHQxICogY29zKChwaGkgKyAyICogdGF1KSAvIDMpIC0gYSAvIDM7XG4gICAgICByZXR1cm4gW3gxLCB4MiwgeDNdLmZpbHRlcihyZWR1Y2UpO1xuICAgIH0gZWxzZSBpZiAoZGlzY3JpbWluYW50ID09PSAwKSB7XG4gICAgICB1MSA9IHEyIDwgMCA/IGNydCgtcTIpIDogLWNydChxMik7XG4gICAgICB4MSA9IDIgKiB1MSAtIGEgLyAzO1xuICAgICAgeDIgPSAtdTEgLSBhIC8gMztcbiAgICAgIHJldHVybiBbeDEsIHgyXS5maWx0ZXIocmVkdWNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2QgPSBzcXJ0KGRpc2NyaW1pbmFudCk7XG4gICAgICB1MSA9IGNydCgtcTIgKyBzZCk7XG4gICAgICB2MSA9IGNydChxMiArIHNkKTtcbiAgICAgIHJldHVybiBbdTEgLSB2MSAtIGEgLyAzXS5maWx0ZXIocmVkdWNlKTtcbiAgICB9XG4gIH0sXG5cbiAgZHJvb3RzOiBmdW5jdGlvbiAocCkge1xuICAgIC8vIHF1YWRyYXRpYyByb290cyBhcmUgZWFzeVxuICAgIGlmIChwLmxlbmd0aCA9PT0gMykge1xuICAgICAgY29uc3QgYSA9IHBbMF0sXG4gICAgICAgIGIgPSBwWzFdLFxuICAgICAgICBjID0gcFsyXSxcbiAgICAgICAgZCA9IGEgLSAyICogYiArIGM7XG4gICAgICBpZiAoZCAhPT0gMCkge1xuICAgICAgICBjb25zdCBtMSA9IC1zcXJ0KGIgKiBiIC0gYSAqIGMpLFxuICAgICAgICAgIG0yID0gLWEgKyBiLFxuICAgICAgICAgIHYxID0gLShtMSArIG0yKSAvIGQsXG4gICAgICAgICAgdjIgPSAtKC1tMSArIG0yKSAvIGQ7XG4gICAgICAgIHJldHVybiBbdjEsIHYyXTtcbiAgICAgIH0gZWxzZSBpZiAoYiAhPT0gYyAmJiBkID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbKDIgKiBiIC0gYykgLyAoMiAqIChiIC0gYykpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvLyBsaW5lYXIgcm9vdHMgYXJlIGV2ZW4gZWFzaWVyXG4gICAgaWYgKHAubGVuZ3RoID09PSAyKSB7XG4gICAgICBjb25zdCBhID0gcFswXSxcbiAgICAgICAgYiA9IHBbMV07XG4gICAgICBpZiAoYSAhPT0gYikge1xuICAgICAgICByZXR1cm4gW2EgLyAoYSAtIGIpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH0sXG5cbiAgY3VydmF0dXJlOiBmdW5jdGlvbiAodCwgZDEsIGQyLCBfM2QsIGtPbmx5KSB7XG4gICAgbGV0IG51bSxcbiAgICAgIGRubSxcbiAgICAgIGFkayxcbiAgICAgIGRrLFxuICAgICAgayA9IDAsXG4gICAgICByID0gMDtcblxuICAgIC8vXG4gICAgLy8gV2UncmUgdXNpbmcgdGhlIGZvbGxvd2luZyBmb3JtdWxhIGZvciBjdXJ2YXR1cmU6XG4gICAgLy9cbiAgICAvLyAgICAgICAgICAgICAgeCd5XCIgLSB5J3hcIlxuICAgIC8vICAgayh0KSA9IC0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICAgICAgICAgICAoeCfCsiArIHknwrIpXigzLzIpXG4gICAgLy9cbiAgICAvLyBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JhZGl1c19vZl9jdXJ2YXR1cmUjRGVmaW5pdGlvblxuICAgIC8vXG4gICAgLy8gV2l0aCBpdCBjb3JyZXNwb25kaW5nIDNEIGNvdW50ZXJwYXJ0OlxuICAgIC8vXG4gICAgLy8gICAgICAgICAgc3FydCggKHknelwiIC0geVwieicpwrIgKyAoeid4XCIgLSB6XCJ4JynCsiArICh4J3lcIiAtIHhcInknKcKyKVxuICAgIC8vICAgayh0KSA9IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICh4J8KyICsgeSfCsiArIHonwrIpXigzLzIpXG4gICAgLy9cblxuICAgIGNvbnN0IGQgPSB1dGlscy5jb21wdXRlKHQsIGQxKTtcbiAgICBjb25zdCBkZCA9IHV0aWxzLmNvbXB1dGUodCwgZDIpO1xuICAgIGNvbnN0IHFkc3VtID0gZC54ICogZC54ICsgZC55ICogZC55O1xuXG4gICAgaWYgKF8zZCkge1xuICAgICAgbnVtID0gc3FydChcbiAgICAgICAgcG93KGQueSAqIGRkLnogLSBkZC55ICogZC56LCAyKSArXG4gICAgICAgICAgcG93KGQueiAqIGRkLnggLSBkZC56ICogZC54LCAyKSArXG4gICAgICAgICAgcG93KGQueCAqIGRkLnkgLSBkZC54ICogZC55LCAyKVxuICAgICAgKTtcbiAgICAgIGRubSA9IHBvdyhxZHN1bSArIGQueiAqIGQueiwgMyAvIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW0gPSBkLnggKiBkZC55IC0gZC55ICogZGQueDtcbiAgICAgIGRubSA9IHBvdyhxZHN1bSwgMyAvIDIpO1xuICAgIH1cblxuICAgIGlmIChudW0gPT09IDAgfHwgZG5tID09PSAwKSB7XG4gICAgICByZXR1cm4geyBrOiAwLCByOiAwIH07XG4gICAgfVxuXG4gICAgayA9IG51bSAvIGRubTtcbiAgICByID0gZG5tIC8gbnVtO1xuXG4gICAgLy8gV2UncmUgYWxzbyBjb21wdXRpbmcgdGhlIGRlcml2YXRpdmUgb2Yga2FwcGEsIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyB2YWx1ZSBpbiBrbm93aW5nIHRoZSByYXRlIG9mIGNoYW5nZSBmb3IgdGhlXG4gICAgLy8gY3VydmF0dXJlIGFsb25nIHRoZSBjdXJ2ZS4gQW5kIHdlJ3JlIGp1c3QgZ29pbmcgdG9cbiAgICAvLyBiYWxscGFyayBpdCBiYXNlZCBvbiBhbiBlcHNpbG9uLlxuICAgIGlmICgha09ubHkpIHtcbiAgICAgIC8vIGNvbXB1dGUgaycodCkgYmFzZWQgb24gdGhlIGludGVydmFsIGJlZm9yZSwgYW5kIGFmdGVyIGl0LFxuICAgICAgLy8gdG8gYXQgbGVhc3QgdHJ5IHRvIG5vdCBpbnRyb2R1Y2UgZm9yd2FyZC9iYWNrd2FyZCBwYXNzIGJpYXMuXG4gICAgICBjb25zdCBwayA9IHV0aWxzLmN1cnZhdHVyZSh0IC0gMC4wMDEsIGQxLCBkMiwgXzNkLCB0cnVlKS5rO1xuICAgICAgY29uc3QgbmsgPSB1dGlscy5jdXJ2YXR1cmUodCArIDAuMDAxLCBkMSwgZDIsIF8zZCwgdHJ1ZSkuaztcbiAgICAgIGRrID0gKG5rIC0gayArIChrIC0gcGspKSAvIDI7XG4gICAgICBhZGsgPSAoYWJzKG5rIC0gaykgKyBhYnMoayAtIHBrKSkgLyAyO1xuICAgIH1cblxuICAgIHJldHVybiB7IGs6IGssIHI6IHIsIGRrOiBkaywgYWRrOiBhZGsgfTtcbiAgfSxcblxuICBpbmZsZWN0aW9uczogZnVuY3Rpb24gKHBvaW50cykge1xuICAgIGlmIChwb2ludHMubGVuZ3RoIDwgNCkgcmV0dXJuIFtdO1xuXG4gICAgLy8gRklYTUU6IFRPRE86IGFkZCBpbiBpbmZsZWN0aW9uIGFic3RyYWN0aW9uIGZvciBxdWFydGljKyBjdXJ2ZXM/XG5cbiAgICBjb25zdCBwID0gdXRpbHMuYWxpZ24ocG9pbnRzLCB7IHAxOiBwb2ludHNbMF0sIHAyOiBwb2ludHMuc2xpY2UoLTEpWzBdIH0pLFxuICAgICAgYSA9IHBbMl0ueCAqIHBbMV0ueSxcbiAgICAgIGIgPSBwWzNdLnggKiBwWzFdLnksXG4gICAgICBjID0gcFsxXS54ICogcFsyXS55LFxuICAgICAgZCA9IHBbM10ueCAqIHBbMl0ueSxcbiAgICAgIHYxID0gMTggKiAoLTMgKiBhICsgMiAqIGIgKyAzICogYyAtIGQpLFxuICAgICAgdjIgPSAxOCAqICgzICogYSAtIGIgLSAzICogYyksXG4gICAgICB2MyA9IDE4ICogKGMgLSBhKTtcblxuICAgIGlmICh1dGlscy5hcHByb3hpbWF0ZWx5KHYxLCAwKSkge1xuICAgICAgaWYgKCF1dGlscy5hcHByb3hpbWF0ZWx5KHYyLCAwKSkge1xuICAgICAgICBsZXQgdCA9IC12MyAvIHYyO1xuICAgICAgICBpZiAoMCA8PSB0ICYmIHQgPD0gMSkgcmV0dXJuIFt0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCB0cm0gPSB2MiAqIHYyIC0gNCAqIHYxICogdjMsXG4gICAgICBzcSA9IE1hdGguc3FydCh0cm0pLFxuICAgICAgZDIgPSAyICogdjE7XG5cbiAgICBpZiAodXRpbHMuYXBwcm94aW1hdGVseShkMiwgMCkpIHJldHVybiBbXTtcblxuICAgIHJldHVybiBbKHNxIC0gdjIpIC8gZDIsIC0odjIgKyBzcSkgLyBkMl0uZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gMCA8PSByICYmIHIgPD0gMTtcbiAgICB9KTtcbiAgfSxcblxuICBiYm94b3ZlcmxhcDogZnVuY3Rpb24gKGIxLCBiMikge1xuICAgIGNvbnN0IGRpbXMgPSBbXCJ4XCIsIFwieVwiXSxcbiAgICAgIGxlbiA9IGRpbXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGRpbSwgbCwgdCwgZDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkaW0gPSBkaW1zW2ldO1xuICAgICAgbCA9IGIxW2RpbV0ubWlkO1xuICAgICAgdCA9IGIyW2RpbV0ubWlkO1xuICAgICAgZCA9IChiMVtkaW1dLnNpemUgKyBiMltkaW1dLnNpemUpIC8gMjtcbiAgICAgIGlmIChhYnMobCAtIHQpID49IGQpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgZXhwYW5kYm94OiBmdW5jdGlvbiAoYmJveCwgX2Jib3gpIHtcbiAgICBpZiAoX2Jib3gueC5taW4gPCBiYm94LngubWluKSB7XG4gICAgICBiYm94LngubWluID0gX2Jib3gueC5taW47XG4gICAgfVxuICAgIGlmIChfYmJveC55Lm1pbiA8IGJib3gueS5taW4pIHtcbiAgICAgIGJib3gueS5taW4gPSBfYmJveC55Lm1pbjtcbiAgICB9XG4gICAgaWYgKF9iYm94LnogJiYgX2Jib3guei5taW4gPCBiYm94LnoubWluKSB7XG4gICAgICBiYm94LnoubWluID0gX2Jib3guei5taW47XG4gICAgfVxuICAgIGlmIChfYmJveC54Lm1heCA+IGJib3gueC5tYXgpIHtcbiAgICAgIGJib3gueC5tYXggPSBfYmJveC54Lm1heDtcbiAgICB9XG4gICAgaWYgKF9iYm94LnkubWF4ID4gYmJveC55Lm1heCkge1xuICAgICAgYmJveC55Lm1heCA9IF9iYm94LnkubWF4O1xuICAgIH1cbiAgICBpZiAoX2Jib3gueiAmJiBfYmJveC56Lm1heCA+IGJib3guei5tYXgpIHtcbiAgICAgIGJib3guei5tYXggPSBfYmJveC56Lm1heDtcbiAgICB9XG4gICAgYmJveC54Lm1pZCA9IChiYm94LngubWluICsgYmJveC54Lm1heCkgLyAyO1xuICAgIGJib3gueS5taWQgPSAoYmJveC55Lm1pbiArIGJib3gueS5tYXgpIC8gMjtcbiAgICBpZiAoYmJveC56KSB7XG4gICAgICBiYm94LnoubWlkID0gKGJib3guei5taW4gKyBiYm94LnoubWF4KSAvIDI7XG4gICAgfVxuICAgIGJib3gueC5zaXplID0gYmJveC54Lm1heCAtIGJib3gueC5taW47XG4gICAgYmJveC55LnNpemUgPSBiYm94LnkubWF4IC0gYmJveC55Lm1pbjtcbiAgICBpZiAoYmJveC56KSB7XG4gICAgICBiYm94Lnouc2l6ZSA9IGJib3guei5tYXggLSBiYm94LnoubWluO1xuICAgIH1cbiAgfSxcblxuICBwYWlyaXRlcmF0aW9uOiBmdW5jdGlvbiAoYzEsIGMyLCBjdXJ2ZUludGVyc2VjdGlvblRocmVzaG9sZCkge1xuICAgIGNvbnN0IGMxYiA9IGMxLmJib3goKSxcbiAgICAgIGMyYiA9IGMyLmJib3goKSxcbiAgICAgIHIgPSAxMDAwMDAsXG4gICAgICB0aHJlc2hvbGQgPSBjdXJ2ZUludGVyc2VjdGlvblRocmVzaG9sZCB8fCAwLjU7XG5cbiAgICBpZiAoXG4gICAgICBjMWIueC5zaXplICsgYzFiLnkuc2l6ZSA8IHRocmVzaG9sZCAmJlxuICAgICAgYzJiLnguc2l6ZSArIGMyYi55LnNpemUgPCB0aHJlc2hvbGRcbiAgICApIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgICgoKHIgKiAoYzEuX3QxICsgYzEuX3QyKSkgLyAyKSB8IDApIC8gciArXG4gICAgICAgICAgXCIvXCIgK1xuICAgICAgICAgICgoKHIgKiAoYzIuX3QxICsgYzIuX3QyKSkgLyAyKSB8IDApIC8gcixcbiAgICAgIF07XG4gICAgfVxuXG4gICAgbGV0IGNjMSA9IGMxLnNwbGl0KDAuNSksXG4gICAgICBjYzIgPSBjMi5zcGxpdCgwLjUpLFxuICAgICAgcGFpcnMgPSBbXG4gICAgICAgIHsgbGVmdDogY2MxLmxlZnQsIHJpZ2h0OiBjYzIubGVmdCB9LFxuICAgICAgICB7IGxlZnQ6IGNjMS5sZWZ0LCByaWdodDogY2MyLnJpZ2h0IH0sXG4gICAgICAgIHsgbGVmdDogY2MxLnJpZ2h0LCByaWdodDogY2MyLnJpZ2h0IH0sXG4gICAgICAgIHsgbGVmdDogY2MxLnJpZ2h0LCByaWdodDogY2MyLmxlZnQgfSxcbiAgICAgIF07XG5cbiAgICBwYWlycyA9IHBhaXJzLmZpbHRlcihmdW5jdGlvbiAocGFpcikge1xuICAgICAgcmV0dXJuIHV0aWxzLmJib3hvdmVybGFwKHBhaXIubGVmdC5iYm94KCksIHBhaXIucmlnaHQuYmJveCgpKTtcbiAgICB9KTtcblxuICAgIGxldCByZXN1bHRzID0gW107XG5cbiAgICBpZiAocGFpcnMubGVuZ3RoID09PSAwKSByZXR1cm4gcmVzdWx0cztcblxuICAgIHBhaXJzLmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdChcbiAgICAgICAgdXRpbHMucGFpcml0ZXJhdGlvbihwYWlyLmxlZnQsIHBhaXIucmlnaHQsIHRocmVzaG9sZClcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgIHJldHVybiByZXN1bHRzLmluZGV4T2YodikgPT09IGk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfSxcblxuICBnZXRjY2VudGVyOiBmdW5jdGlvbiAocDEsIHAyLCBwMykge1xuICAgIGNvbnN0IGR4MSA9IHAyLnggLSBwMS54LFxuICAgICAgZHkxID0gcDIueSAtIHAxLnksXG4gICAgICBkeDIgPSBwMy54IC0gcDIueCxcbiAgICAgIGR5MiA9IHAzLnkgLSBwMi55LFxuICAgICAgZHgxcCA9IGR4MSAqIGNvcyhxdWFydCkgLSBkeTEgKiBzaW4ocXVhcnQpLFxuICAgICAgZHkxcCA9IGR4MSAqIHNpbihxdWFydCkgKyBkeTEgKiBjb3MocXVhcnQpLFxuICAgICAgZHgycCA9IGR4MiAqIGNvcyhxdWFydCkgLSBkeTIgKiBzaW4ocXVhcnQpLFxuICAgICAgZHkycCA9IGR4MiAqIHNpbihxdWFydCkgKyBkeTIgKiBjb3MocXVhcnQpLFxuICAgICAgLy8gY2hvcmQgbWlkcG9pbnRzXG4gICAgICBteDEgPSAocDEueCArIHAyLngpIC8gMixcbiAgICAgIG15MSA9IChwMS55ICsgcDIueSkgLyAyLFxuICAgICAgbXgyID0gKHAyLnggKyBwMy54KSAvIDIsXG4gICAgICBteTIgPSAocDIueSArIHAzLnkpIC8gMixcbiAgICAgIC8vIG1pZHBvaW50IG9mZnNldHNcbiAgICAgIG14MW4gPSBteDEgKyBkeDFwLFxuICAgICAgbXkxbiA9IG15MSArIGR5MXAsXG4gICAgICBteDJuID0gbXgyICsgZHgycCxcbiAgICAgIG15Mm4gPSBteTIgKyBkeTJwLFxuICAgICAgLy8gaW50ZXJzZWN0aW9uIG9mIHRoZXNlIGxpbmVzOlxuICAgICAgYXJjID0gdXRpbHMubGxpOChteDEsIG15MSwgbXgxbiwgbXkxbiwgbXgyLCBteTIsIG14Mm4sIG15Mm4pLFxuICAgICAgciA9IHV0aWxzLmRpc3QoYXJjLCBwMSk7XG5cbiAgICAvLyBhcmMgc3RhcnQvZW5kIHZhbHVlcywgb3ZlciBtaWQgcG9pbnQ6XG4gICAgbGV0IHMgPSBhdGFuMihwMS55IC0gYXJjLnksIHAxLnggLSBhcmMueCksXG4gICAgICBtID0gYXRhbjIocDIueSAtIGFyYy55LCBwMi54IC0gYXJjLngpLFxuICAgICAgZSA9IGF0YW4yKHAzLnkgLSBhcmMueSwgcDMueCAtIGFyYy54KSxcbiAgICAgIF87XG5cbiAgICAvLyBkZXRlcm1pbmUgYXJjIGRpcmVjdGlvbiAoY3cvY2N3IGNvcnJlY3Rpb24pXG4gICAgaWYgKHMgPCBlKSB7XG4gICAgICAvLyBpZiBzPG08ZSwgYXJjKHMsIGUpXG4gICAgICAvLyBpZiBtPHM8ZSwgYXJjKGUsIHMgKyB0YXUpXG4gICAgICAvLyBpZiBzPGU8bSwgYXJjKGUsIHMgKyB0YXUpXG4gICAgICBpZiAocyA+IG0gfHwgbSA+IGUpIHtcbiAgICAgICAgcyArPSB0YXU7XG4gICAgICB9XG4gICAgICBpZiAocyA+IGUpIHtcbiAgICAgICAgXyA9IGU7XG4gICAgICAgIGUgPSBzO1xuICAgICAgICBzID0gXztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgZTxtPHMsIGFyYyhlLCBzKVxuICAgICAgLy8gaWYgbTxlPHMsIGFyYyhzLCBlICsgdGF1KVxuICAgICAgLy8gaWYgZTxzPG0sIGFyYyhzLCBlICsgdGF1KVxuICAgICAgaWYgKGUgPCBtICYmIG0gPCBzKSB7XG4gICAgICAgIF8gPSBlO1xuICAgICAgICBlID0gcztcbiAgICAgICAgcyA9IF87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlICs9IHRhdTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gYXNzaWduIGFuZCBkb25lLlxuICAgIGFyYy5zID0gcztcbiAgICBhcmMuZSA9IGU7XG4gICAgYXJjLnIgPSByO1xuICAgIHJldHVybiBhcmM7XG4gIH0sXG5cbiAgbnVtYmVyU29ydDogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0sXG59O1xuXG5leHBvcnQgeyB1dGlscyB9O1xuIiwiaW1wb3J0IHsgdXRpbHMgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuXG4vKipcbiAqIFBvbHkgQmV6aWVyXG4gKiBAcGFyYW0ge1t0eXBlXX0gY3VydmVzIFtkZXNjcmlwdGlvbl1cbiAqL1xuY2xhc3MgUG9seUJlemllciB7XG4gIGNvbnN0cnVjdG9yKGN1cnZlcykge1xuICAgIHRoaXMuY3VydmVzID0gW107XG4gICAgdGhpcy5fM2QgPSBmYWxzZTtcbiAgICBpZiAoISFjdXJ2ZXMpIHtcbiAgICAgIHRoaXMuY3VydmVzID0gY3VydmVzO1xuICAgICAgdGhpcy5fM2QgPSB0aGlzLmN1cnZlc1swXS5fM2Q7XG4gICAgfVxuICB9XG5cbiAgdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIFwiW1wiICtcbiAgICAgIHRoaXMuY3VydmVzXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGN1cnZlKSB7XG4gICAgICAgICAgcmV0dXJuIHV0aWxzLnBvaW50c1RvU3RyaW5nKGN1cnZlLnBvaW50cyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5qb2luKFwiLCBcIikgK1xuICAgICAgXCJdXCJcbiAgICApO1xuICB9XG5cbiAgYWRkQ3VydmUoY3VydmUpIHtcbiAgICB0aGlzLmN1cnZlcy5wdXNoKGN1cnZlKTtcbiAgICB0aGlzLl8zZCA9IHRoaXMuXzNkIHx8IGN1cnZlLl8zZDtcbiAgfVxuXG4gIGxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZXNcbiAgICAgIC5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIHYubGVuZ3RoKCk7XG4gICAgICB9KVxuICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYSArIGI7XG4gICAgICB9KTtcbiAgfVxuXG4gIGN1cnZlKGlkeCkge1xuICAgIHJldHVybiB0aGlzLmN1cnZlc1tpZHhdO1xuICB9XG5cbiAgYmJveCgpIHtcbiAgICBjb25zdCBjID0gdGhpcy5jdXJ2ZXM7XG4gICAgdmFyIGJib3ggPSBjWzBdLmJib3goKTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHV0aWxzLmV4cGFuZGJveChiYm94LCBjW2ldLmJib3goKSk7XG4gICAgfVxuICAgIHJldHVybiBiYm94O1xuICB9XG5cbiAgb2Zmc2V0KGQpIHtcbiAgICBjb25zdCBvZmZzZXQgPSBbXTtcbiAgICB0aGlzLmN1cnZlcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICBvZmZzZXQucHVzaCguLi52Lm9mZnNldChkKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBQb2x5QmV6aWVyKG9mZnNldCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUG9seUJlemllciB9O1xuIiwiLyoqXG4gIEEgamF2YXNjcmlwdCBCZXppZXIgY3VydmUgbGlicmFyeSBieSBQb21heC5cblxuICBCYXNlZCBvbiBodHRwOi8vcG9tYXguZ2l0aHViLmlvL2JlemllcmluZm9cblxuICBUaGlzIGNvZGUgaXMgTUlUIGxpY2Vuc2VkLlxuKiovXG5cbmltcG9ydCB7IHV0aWxzIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCB7IFBvbHlCZXppZXIgfSBmcm9tIFwiLi9wb2x5LWJlemllci5qc1wiO1xuXG4vLyBtYXRoLWlubGluaW5nLlxuY29uc3QgeyBhYnMsIG1pbiwgbWF4LCBjb3MsIHNpbiwgYWNvcywgc3FydCB9ID0gTWF0aDtcbmNvbnN0IHBpID0gTWF0aC5QSTtcbi8vIGEgemVybyBjb29yZGluYXRlLCB3aGljaCBpcyBzdXJwcmlzaW5nbHkgdXNlZnVsXG5jb25zdCBaRVJPID0geyB4OiAwLCB5OiAwLCB6OiAwIH07XG5cbi8qKlxuICogQmV6aWVyIGN1cnZlIGNvbnN0cnVjdG9yLlxuICpcbiAqIC4uLmRvY3MgcGVuZGluZy4uLlxuICovXG5jbGFzcyBCZXppZXIge1xuICBjb25zdHJ1Y3Rvcihjb29yZHMpIHtcbiAgICBsZXQgYXJncyA9XG4gICAgICBjb29yZHMgJiYgY29vcmRzLmZvckVhY2ggPyBjb29yZHMgOiBBcnJheS5mcm9tKGFyZ3VtZW50cykuc2xpY2UoKTtcbiAgICBsZXQgY29vcmRsZW4gPSBmYWxzZTtcblxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgY29vcmRsZW4gPSBhcmdzLmxlbmd0aDtcbiAgICAgIGNvbnN0IG5ld2FyZ3MgPSBbXTtcbiAgICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgW1wieFwiLCBcInlcIiwgXCJ6XCJdLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHBvaW50W2RdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBuZXdhcmdzLnB1c2gocG9pbnRbZF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGFyZ3MgPSBuZXdhcmdzO1xuICAgIH1cblxuICAgIGxldCBoaWdoZXIgPSBmYWxzZTtcbiAgICBjb25zdCBsZW4gPSBhcmdzLmxlbmd0aDtcblxuICAgIGlmIChjb29yZGxlbikge1xuICAgICAgaWYgKGNvb3JkbGVuID4gNCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiT25seSBuZXcgQmV6aWVyKHBvaW50W10pIGlzIGFjY2VwdGVkIGZvciA0dGggYW5kIGhpZ2hlciBvcmRlciBjdXJ2ZXNcIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaGlnaGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxlbiAhPT0gNiAmJiBsZW4gIT09IDggJiYgbGVuICE9PSA5ICYmIGxlbiAhPT0gMTIpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIk9ubHkgbmV3IEJlemllcihwb2ludFtdKSBpcyBhY2NlcHRlZCBmb3IgNHRoIGFuZCBoaWdoZXIgb3JkZXIgY3VydmVzXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgXzNkID0gKHRoaXMuXzNkID1cbiAgICAgICghaGlnaGVyICYmIChsZW4gPT09IDkgfHwgbGVuID09PSAxMikpIHx8XG4gICAgICAoY29vcmRzICYmIGNvb3Jkc1swXSAmJiB0eXBlb2YgY29vcmRzWzBdLnogIT09IFwidW5kZWZpbmVkXCIpKTtcblxuICAgIGNvbnN0IHBvaW50cyA9ICh0aGlzLnBvaW50cyA9IFtdKTtcbiAgICBmb3IgKGxldCBpZHggPSAwLCBzdGVwID0gXzNkID8gMyA6IDI7IGlkeCA8IGxlbjsgaWR4ICs9IHN0ZXApIHtcbiAgICAgIHZhciBwb2ludCA9IHtcbiAgICAgICAgeDogYXJnc1tpZHhdLFxuICAgICAgICB5OiBhcmdzW2lkeCArIDFdLFxuICAgICAgfTtcbiAgICAgIGlmIChfM2QpIHtcbiAgICAgICAgcG9pbnQueiA9IGFyZ3NbaWR4ICsgMl07XG4gICAgICB9XG4gICAgICBwb2ludHMucHVzaChwb2ludCk7XG4gICAgfVxuICAgIGNvbnN0IG9yZGVyID0gKHRoaXMub3JkZXIgPSBwb2ludHMubGVuZ3RoIC0gMSk7XG5cbiAgICBjb25zdCBkaW1zID0gKHRoaXMuZGltcyA9IFtcInhcIiwgXCJ5XCJdKTtcbiAgICBpZiAoXzNkKSBkaW1zLnB1c2goXCJ6XCIpO1xuICAgIHRoaXMuZGltbGVuID0gZGltcy5sZW5ndGg7XG5cbiAgICBjb25zdCBhbGlnbmVkID0gdXRpbHMuYWxpZ24ocG9pbnRzLCB7IHAxOiBwb2ludHNbMF0sIHAyOiBwb2ludHNbb3JkZXJdIH0pO1xuICAgIHRoaXMuX2xpbmVhciA9ICFhbGlnbmVkLnNvbWUoKHApID0+IGFicyhwLnkpID4gMC4wMDAxKTtcblxuICAgIHRoaXMuX2x1dCA9IFtdO1xuXG4gICAgdGhpcy5fdDEgPSAwO1xuICAgIHRoaXMuX3QyID0gMTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgc3RhdGljIHF1YWRyYXRpY0Zyb21Qb2ludHMocDEsIHAyLCBwMywgdCkge1xuICAgIGlmICh0eXBlb2YgdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdCA9IDAuNTtcbiAgICB9XG4gICAgLy8gc2hvcnRjdXRzLCBhbHRob3VnaCB0aGV5J3JlIHJlYWxseSBkdW1iXG4gICAgaWYgKHQgPT09IDApIHtcbiAgICAgIHJldHVybiBuZXcgQmV6aWVyKHAyLCBwMiwgcDMpO1xuICAgIH1cbiAgICBpZiAodCA9PT0gMSkge1xuICAgICAgcmV0dXJuIG5ldyBCZXppZXIocDEsIHAyLCBwMik7XG4gICAgfVxuICAgIC8vIHJlYWwgZml0dGluZy5cbiAgICBjb25zdCBhYmMgPSBCZXppZXIuZ2V0QUJDKDIsIHAxLCBwMiwgcDMsIHQpO1xuICAgIHJldHVybiBuZXcgQmV6aWVyKHAxLCBhYmMuQSwgcDMpO1xuICB9XG5cbiAgc3RhdGljIGN1YmljRnJvbVBvaW50cyhTLCBCLCBFLCB0LCBkMSkge1xuICAgIGlmICh0eXBlb2YgdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdCA9IDAuNTtcbiAgICB9XG4gICAgY29uc3QgYWJjID0gQmV6aWVyLmdldEFCQygzLCBTLCBCLCBFLCB0KTtcbiAgICBpZiAodHlwZW9mIGQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBkMSA9IHV0aWxzLmRpc3QoQiwgYWJjLkMpO1xuICAgIH1cbiAgICBjb25zdCBkMiA9IChkMSAqICgxIC0gdCkpIC8gdDtcblxuICAgIGNvbnN0IHNlbGVuID0gdXRpbHMuZGlzdChTLCBFKSxcbiAgICAgIGx4ID0gKEUueCAtIFMueCkgLyBzZWxlbixcbiAgICAgIGx5ID0gKEUueSAtIFMueSkgLyBzZWxlbixcbiAgICAgIGJ4MSA9IGQxICogbHgsXG4gICAgICBieTEgPSBkMSAqIGx5LFxuICAgICAgYngyID0gZDIgKiBseCxcbiAgICAgIGJ5MiA9IGQyICogbHk7XG4gICAgLy8gZGVyaXZhdGlvbiBvZiBuZXcgaHVsbCBjb29yZGluYXRlc1xuICAgIGNvbnN0IGUxID0geyB4OiBCLnggLSBieDEsIHk6IEIueSAtIGJ5MSB9LFxuICAgICAgZTIgPSB7IHg6IEIueCArIGJ4MiwgeTogQi55ICsgYnkyIH0sXG4gICAgICBBID0gYWJjLkEsXG4gICAgICB2MSA9IHsgeDogQS54ICsgKGUxLnggLSBBLngpIC8gKDEgLSB0KSwgeTogQS55ICsgKGUxLnkgLSBBLnkpIC8gKDEgLSB0KSB9LFxuICAgICAgdjIgPSB7IHg6IEEueCArIChlMi54IC0gQS54KSAvIHQsIHk6IEEueSArIChlMi55IC0gQS55KSAvIHQgfSxcbiAgICAgIG5jMSA9IHsgeDogUy54ICsgKHYxLnggLSBTLngpIC8gdCwgeTogUy55ICsgKHYxLnkgLSBTLnkpIC8gdCB9LFxuICAgICAgbmMyID0ge1xuICAgICAgICB4OiBFLnggKyAodjIueCAtIEUueCkgLyAoMSAtIHQpLFxuICAgICAgICB5OiBFLnkgKyAodjIueSAtIEUueSkgLyAoMSAtIHQpLFxuICAgICAgfTtcbiAgICAvLyAuLi5kb25lXG4gICAgcmV0dXJuIG5ldyBCZXppZXIoUywgbmMxLCBuYzIsIEUpO1xuICB9XG5cbiAgc3RhdGljIGdldFV0aWxzKCkge1xuICAgIHJldHVybiB1dGlscztcbiAgfVxuXG4gIGdldFV0aWxzKCkge1xuICAgIHJldHVybiBCZXppZXIuZ2V0VXRpbHMoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgUG9seUJlemllcigpIHtcbiAgICByZXR1cm4gUG9seUJlemllcjtcbiAgfVxuXG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB1dGlscy5wb2ludHNUb1N0cmluZyh0aGlzLnBvaW50cyk7XG4gIH1cblxuICB0b1NWRygpIHtcbiAgICBpZiAodGhpcy5fM2QpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBwID0gdGhpcy5wb2ludHMsXG4gICAgICB4ID0gcFswXS54LFxuICAgICAgeSA9IHBbMF0ueSxcbiAgICAgIHMgPSBbXCJNXCIsIHgsIHksIHRoaXMub3JkZXIgPT09IDIgPyBcIlFcIiA6IFwiQ1wiXTtcbiAgICBmb3IgKGxldCBpID0gMSwgbGFzdCA9IHAubGVuZ3RoOyBpIDwgbGFzdDsgaSsrKSB7XG4gICAgICBzLnB1c2gocFtpXS54KTtcbiAgICAgIHMucHVzaChwW2ldLnkpO1xuICAgIH1cbiAgICByZXR1cm4gcy5qb2luKFwiIFwiKTtcbiAgfVxuXG4gIHNldFJhdGlvcyhyYXRpb3MpIHtcbiAgICBpZiAocmF0aW9zLmxlbmd0aCAhPT0gdGhpcy5wb2ludHMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbmNvcnJlY3QgbnVtYmVyIG9mIHJhdGlvIHZhbHVlc1wiKTtcbiAgICB9XG4gICAgdGhpcy5yYXRpb3MgPSByYXRpb3M7XG4gICAgdGhpcy5fbHV0ID0gW107IC8vICBpbnZhbGlkYXRlIGFueSBwcmVjb21wdXRlZCBMVVRcbiAgfVxuXG4gIHZlcmlmeSgpIHtcbiAgICBjb25zdCBwcmludCA9IHRoaXMuY29vcmREaWdlc3QoKTtcbiAgICBpZiAocHJpbnQgIT09IHRoaXMuX3ByaW50KSB7XG4gICAgICB0aGlzLl9wcmludCA9IHByaW50O1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBjb29yZERpZ2VzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5wb2ludHNcbiAgICAgIC5tYXAoZnVuY3Rpb24gKGMsIHBvcykge1xuICAgICAgICByZXR1cm4gXCJcIiArIHBvcyArIGMueCArIGMueSArIChjLnogPyBjLnogOiAwKTtcbiAgICAgIH0pXG4gICAgICAuam9pbihcIlwiKTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICAvLyBpbnZhbGlkYXRlIGFueSBwcmVjb21wdXRlZCBMVVRcbiAgICB0aGlzLl9sdXQgPSBbXTtcbiAgICB0aGlzLmRwb2ludHMgPSB1dGlscy5kZXJpdmUodGhpcy5wb2ludHMsIHRoaXMuXzNkKTtcbiAgICB0aGlzLmNvbXB1dGVkaXJlY3Rpb24oKTtcbiAgfVxuXG4gIGNvbXB1dGVkaXJlY3Rpb24oKSB7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgY29uc3QgYW5nbGUgPSB1dGlscy5hbmdsZShwb2ludHNbMF0sIHBvaW50c1t0aGlzLm9yZGVyXSwgcG9pbnRzWzFdKTtcbiAgICB0aGlzLmNsb2Nrd2lzZSA9IGFuZ2xlID4gMDtcbiAgfVxuXG4gIGxlbmd0aCgpIHtcbiAgICByZXR1cm4gdXRpbHMubGVuZ3RoKHRoaXMuZGVyaXZhdGl2ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBQkMob3JkZXIgPSAyLCBTLCBCLCBFLCB0ID0gMC41KSB7XG4gICAgY29uc3QgdSA9IHV0aWxzLnByb2plY3Rpb25yYXRpbyh0LCBvcmRlciksXG4gICAgICB1bSA9IDEgLSB1LFxuICAgICAgQyA9IHtcbiAgICAgICAgeDogdSAqIFMueCArIHVtICogRS54LFxuICAgICAgICB5OiB1ICogUy55ICsgdW0gKiBFLnksXG4gICAgICB9LFxuICAgICAgcyA9IHV0aWxzLmFiY3JhdGlvKHQsIG9yZGVyKSxcbiAgICAgIEEgPSB7XG4gICAgICAgIHg6IEIueCArIChCLnggLSBDLngpIC8gcyxcbiAgICAgICAgeTogQi55ICsgKEIueSAtIEMueSkgLyBzLFxuICAgICAgfTtcbiAgICByZXR1cm4geyBBLCBCLCBDLCBTLCBFIH07XG4gIH1cblxuICBnZXRBQkModCwgQikge1xuICAgIEIgPSBCIHx8IHRoaXMuZ2V0KHQpO1xuICAgIGxldCBTID0gdGhpcy5wb2ludHNbMF07XG4gICAgbGV0IEUgPSB0aGlzLnBvaW50c1t0aGlzLm9yZGVyXTtcbiAgICByZXR1cm4gQmV6aWVyLmdldEFCQyh0aGlzLm9yZGVyLCBTLCBCLCBFLCB0KTtcbiAgfVxuXG4gIGdldExVVChzdGVwcykge1xuICAgIHRoaXMudmVyaWZ5KCk7XG4gICAgc3RlcHMgPSBzdGVwcyB8fCAxMDA7XG4gICAgaWYgKHRoaXMuX2x1dC5sZW5ndGggPT09IHN0ZXBzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbHV0O1xuICAgIH1cbiAgICB0aGlzLl9sdXQgPSBbXTtcbiAgICAvLyBXZSB3YW50IGEgcmFuZ2UgZnJvbSAwIHRvIDEgaW5jbHVzaXZlLCBzb1xuICAgIC8vIHdlIGRlY3JlbWVudCBhbmQgdGhlbiB1c2UgPD0gcmF0aGVyIHRoYW4gPDpcbiAgICBzdGVwcy0tO1xuICAgIGZvciAobGV0IGkgPSAwLCBwLCB0OyBpIDwgc3RlcHM7IGkrKykge1xuICAgICAgdCA9IGkgLyAoc3RlcHMgLSAxKTtcbiAgICAgIHAgPSB0aGlzLmNvbXB1dGUodCk7XG4gICAgICBwLnQgPSB0O1xuICAgICAgdGhpcy5fbHV0LnB1c2gocCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9sdXQ7XG4gIH1cblxuICBvbihwb2ludCwgZXJyb3IpIHtcbiAgICBlcnJvciA9IGVycm9yIHx8IDU7XG4gICAgY29uc3QgbHV0ID0gdGhpcy5nZXRMVVQoKSxcbiAgICAgIGhpdHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgYywgdCA9IDA7IGkgPCBsdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGMgPSBsdXRbaV07XG4gICAgICBpZiAodXRpbHMuZGlzdChjLCBwb2ludCkgPCBlcnJvcikge1xuICAgICAgICBoaXRzLnB1c2goYyk7XG4gICAgICAgIHQgKz0gaSAvIGx1dC5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghaGl0cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gKHQgLz0gaGl0cy5sZW5ndGgpO1xuICB9XG5cbiAgcHJvamVjdChwb2ludCkge1xuICAgIC8vIHN0ZXAgMTogY29hcnNlIGNoZWNrXG4gICAgY29uc3QgTFVUID0gdGhpcy5nZXRMVVQoKSxcbiAgICAgIGwgPSBMVVQubGVuZ3RoIC0gMSxcbiAgICAgIGNsb3Nlc3QgPSB1dGlscy5jbG9zZXN0KExVVCwgcG9pbnQpLFxuICAgICAgbXBvcyA9IGNsb3Nlc3QubXBvcyxcbiAgICAgIHQxID0gKG1wb3MgLSAxKSAvIGwsXG4gICAgICB0MiA9IChtcG9zICsgMSkgLyBsLFxuICAgICAgc3RlcCA9IDAuMSAvIGw7XG5cbiAgICAvLyBzdGVwIDI6IGZpbmUgY2hlY2tcbiAgICBsZXQgbWRpc3QgPSBjbG9zZXN0Lm1kaXN0LFxuICAgICAgdCA9IHQxLFxuICAgICAgZnQgPSB0LFxuICAgICAgcDtcbiAgICBtZGlzdCArPSAxO1xuICAgIGZvciAobGV0IGQ7IHQgPCB0MiArIHN0ZXA7IHQgKz0gc3RlcCkge1xuICAgICAgcCA9IHRoaXMuY29tcHV0ZSh0KTtcbiAgICAgIGQgPSB1dGlscy5kaXN0KHBvaW50LCBwKTtcbiAgICAgIGlmIChkIDwgbWRpc3QpIHtcbiAgICAgICAgbWRpc3QgPSBkO1xuICAgICAgICBmdCA9IHQ7XG4gICAgICB9XG4gICAgfVxuICAgIGZ0ID0gZnQgPCAwID8gMCA6IGZ0ID4gMSA/IDEgOiBmdDtcbiAgICBwID0gdGhpcy5jb21wdXRlKGZ0KTtcbiAgICBwLnQgPSBmdDtcbiAgICBwLmQgPSBtZGlzdDtcbiAgICByZXR1cm4gcDtcbiAgfVxuXG4gIGdldCh0KSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcHV0ZSh0KTtcbiAgfVxuXG4gIHBvaW50KGlkeCkge1xuICAgIHJldHVybiB0aGlzLnBvaW50c1tpZHhdO1xuICB9XG5cbiAgY29tcHV0ZSh0KSB7XG4gICAgaWYgKHRoaXMucmF0aW9zKSB7XG4gICAgICByZXR1cm4gdXRpbHMuY29tcHV0ZVdpdGhSYXRpb3ModCwgdGhpcy5wb2ludHMsIHRoaXMucmF0aW9zLCB0aGlzLl8zZCk7XG4gICAgfVxuICAgIHJldHVybiB1dGlscy5jb21wdXRlKHQsIHRoaXMucG9pbnRzLCB0aGlzLl8zZCwgdGhpcy5yYXRpb3MpO1xuICB9XG5cbiAgcmFpc2UoKSB7XG4gICAgY29uc3QgcCA9IHRoaXMucG9pbnRzLFxuICAgICAgbnAgPSBbcFswXV0sXG4gICAgICBrID0gcC5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDEsIHBpLCBwaW07IGkgPCBrOyBpKyspIHtcbiAgICAgIHBpID0gcFtpXTtcbiAgICAgIHBpbSA9IHBbaSAtIDFdO1xuICAgICAgbnBbaV0gPSB7XG4gICAgICAgIHg6ICgoayAtIGkpIC8gaykgKiBwaS54ICsgKGkgLyBrKSAqIHBpbS54LFxuICAgICAgICB5OiAoKGsgLSBpKSAvIGspICogcGkueSArIChpIC8gaykgKiBwaW0ueSxcbiAgICAgIH07XG4gICAgfVxuICAgIG5wW2tdID0gcFtrIC0gMV07XG4gICAgcmV0dXJuIG5ldyBCZXppZXIobnApO1xuICB9XG5cbiAgZGVyaXZhdGl2ZSh0KSB7XG4gICAgcmV0dXJuIHV0aWxzLmNvbXB1dGUodCwgdGhpcy5kcG9pbnRzWzBdLCB0aGlzLl8zZCk7XG4gIH1cblxuICBkZGVyaXZhdGl2ZSh0KSB7XG4gICAgcmV0dXJuIHV0aWxzLmNvbXB1dGUodCwgdGhpcy5kcG9pbnRzWzFdLCB0aGlzLl8zZCk7XG4gIH1cblxuICBhbGlnbigpIHtcbiAgICBsZXQgcCA9IHRoaXMucG9pbnRzO1xuICAgIHJldHVybiBuZXcgQmV6aWVyKHV0aWxzLmFsaWduKHAsIHsgcDE6IHBbMF0sIHAyOiBwW3AubGVuZ3RoIC0gMV0gfSkpO1xuICB9XG5cbiAgY3VydmF0dXJlKHQpIHtcbiAgICByZXR1cm4gdXRpbHMuY3VydmF0dXJlKHQsIHRoaXMuZHBvaW50c1swXSwgdGhpcy5kcG9pbnRzWzFdLCB0aGlzLl8zZCk7XG4gIH1cblxuICBpbmZsZWN0aW9ucygpIHtcbiAgICByZXR1cm4gdXRpbHMuaW5mbGVjdGlvbnModGhpcy5wb2ludHMpO1xuICB9XG5cbiAgbm9ybWFsKHQpIHtcbiAgICByZXR1cm4gdGhpcy5fM2QgPyB0aGlzLl9fbm9ybWFsMyh0KSA6IHRoaXMuX19ub3JtYWwyKHQpO1xuICB9XG5cbiAgX19ub3JtYWwyKHQpIHtcbiAgICBjb25zdCBkID0gdGhpcy5kZXJpdmF0aXZlKHQpO1xuICAgIGNvbnN0IHEgPSBzcXJ0KGQueCAqIGQueCArIGQueSAqIGQueSk7XG4gICAgcmV0dXJuIHsgeDogLWQueSAvIHEsIHk6IGQueCAvIHEgfTtcbiAgfVxuXG4gIF9fbm9ybWFsMyh0KSB7XG4gICAgLy8gc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjU0NTMxNTlcbiAgICBjb25zdCByMSA9IHRoaXMuZGVyaXZhdGl2ZSh0KSxcbiAgICAgIHIyID0gdGhpcy5kZXJpdmF0aXZlKHQgKyAwLjAxKSxcbiAgICAgIHExID0gc3FydChyMS54ICogcjEueCArIHIxLnkgKiByMS55ICsgcjEueiAqIHIxLnopLFxuICAgICAgcTIgPSBzcXJ0KHIyLnggKiByMi54ICsgcjIueSAqIHIyLnkgKyByMi56ICogcjIueik7XG4gICAgcjEueCAvPSBxMTtcbiAgICByMS55IC89IHExO1xuICAgIHIxLnogLz0gcTE7XG4gICAgcjIueCAvPSBxMjtcbiAgICByMi55IC89IHEyO1xuICAgIHIyLnogLz0gcTI7XG4gICAgLy8gY3Jvc3MgcHJvZHVjdFxuICAgIGNvbnN0IGMgPSB7XG4gICAgICB4OiByMi55ICogcjEueiAtIHIyLnogKiByMS55LFxuICAgICAgeTogcjIueiAqIHIxLnggLSByMi54ICogcjEueixcbiAgICAgIHo6IHIyLnggKiByMS55IC0gcjIueSAqIHIxLngsXG4gICAgfTtcbiAgICBjb25zdCBtID0gc3FydChjLnggKiBjLnggKyBjLnkgKiBjLnkgKyBjLnogKiBjLnopO1xuICAgIGMueCAvPSBtO1xuICAgIGMueSAvPSBtO1xuICAgIGMueiAvPSBtO1xuICAgIC8vIHJvdGF0aW9uIG1hdHJpeFxuICAgIGNvbnN0IFIgPSBbXG4gICAgICBjLnggKiBjLngsXG4gICAgICBjLnggKiBjLnkgLSBjLnosXG4gICAgICBjLnggKiBjLnogKyBjLnksXG4gICAgICBjLnggKiBjLnkgKyBjLnosXG4gICAgICBjLnkgKiBjLnksXG4gICAgICBjLnkgKiBjLnogLSBjLngsXG4gICAgICBjLnggKiBjLnogLSBjLnksXG4gICAgICBjLnkgKiBjLnogKyBjLngsXG4gICAgICBjLnogKiBjLnosXG4gICAgXTtcbiAgICAvLyBub3JtYWwgdmVjdG9yOlxuICAgIGNvbnN0IG4gPSB7XG4gICAgICB4OiBSWzBdICogcjEueCArIFJbMV0gKiByMS55ICsgUlsyXSAqIHIxLnosXG4gICAgICB5OiBSWzNdICogcjEueCArIFJbNF0gKiByMS55ICsgUls1XSAqIHIxLnosXG4gICAgICB6OiBSWzZdICogcjEueCArIFJbN10gKiByMS55ICsgUls4XSAqIHIxLnosXG4gICAgfTtcbiAgICByZXR1cm4gbjtcbiAgfVxuXG4gIGh1bGwodCkge1xuICAgIGxldCBwID0gdGhpcy5wb2ludHMsXG4gICAgICBfcCA9IFtdLFxuICAgICAgcSA9IFtdLFxuICAgICAgaWR4ID0gMDtcbiAgICBxW2lkeCsrXSA9IHBbMF07XG4gICAgcVtpZHgrK10gPSBwWzFdO1xuICAgIHFbaWR4KytdID0gcFsyXTtcbiAgICBpZiAodGhpcy5vcmRlciA9PT0gMykge1xuICAgICAgcVtpZHgrK10gPSBwWzNdO1xuICAgIH1cbiAgICAvLyB3ZSBsZXJwIGJldHdlZW4gYWxsIHBvaW50cyBhdCBlYWNoIGl0ZXJhdGlvbiwgdW50aWwgd2UgaGF2ZSAxIHBvaW50IGxlZnQuXG4gICAgd2hpbGUgKHAubGVuZ3RoID4gMSkge1xuICAgICAgX3AgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBwdCwgbCA9IHAubGVuZ3RoIC0gMTsgaSA8IGw7IGkrKykge1xuICAgICAgICBwdCA9IHV0aWxzLmxlcnAodCwgcFtpXSwgcFtpICsgMV0pO1xuICAgICAgICBxW2lkeCsrXSA9IHB0O1xuICAgICAgICBfcC5wdXNoKHB0KTtcbiAgICAgIH1cbiAgICAgIHAgPSBfcDtcbiAgICB9XG4gICAgcmV0dXJuIHE7XG4gIH1cblxuICBzcGxpdCh0MSwgdDIpIHtcbiAgICAvLyBzaG9ydGN1dHNcbiAgICBpZiAodDEgPT09IDAgJiYgISF0Mikge1xuICAgICAgcmV0dXJuIHRoaXMuc3BsaXQodDIpLmxlZnQ7XG4gICAgfVxuICAgIGlmICh0MiA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3BsaXQodDEpLnJpZ2h0O1xuICAgIH1cblxuICAgIC8vIG5vIHNob3J0Y3V0OiB1c2UgXCJkZSBDYXN0ZWxqYXVcIiBpdGVyYXRpb24uXG4gICAgY29uc3QgcSA9IHRoaXMuaHVsbCh0MSk7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgbGVmdDpcbiAgICAgICAgdGhpcy5vcmRlciA9PT0gMlxuICAgICAgICAgID8gbmV3IEJlemllcihbcVswXSwgcVszXSwgcVs1XV0pXG4gICAgICAgICAgOiBuZXcgQmV6aWVyKFtxWzBdLCBxWzRdLCBxWzddLCBxWzldXSksXG4gICAgICByaWdodDpcbiAgICAgICAgdGhpcy5vcmRlciA9PT0gMlxuICAgICAgICAgID8gbmV3IEJlemllcihbcVs1XSwgcVs0XSwgcVsyXV0pXG4gICAgICAgICAgOiBuZXcgQmV6aWVyKFtxWzldLCBxWzhdLCBxWzZdLCBxWzNdXSksXG4gICAgICBzcGFuOiBxLFxuICAgIH07XG5cbiAgICAvLyBtYWtlIHN1cmUgd2UgYmluZCBfdDEvX3QyIGluZm9ybWF0aW9uIVxuICAgIHJlc3VsdC5sZWZ0Ll90MSA9IHV0aWxzLm1hcCgwLCAwLCAxLCB0aGlzLl90MSwgdGhpcy5fdDIpO1xuICAgIHJlc3VsdC5sZWZ0Ll90MiA9IHV0aWxzLm1hcCh0MSwgMCwgMSwgdGhpcy5fdDEsIHRoaXMuX3QyKTtcbiAgICByZXN1bHQucmlnaHQuX3QxID0gdXRpbHMubWFwKHQxLCAwLCAxLCB0aGlzLl90MSwgdGhpcy5fdDIpO1xuICAgIHJlc3VsdC5yaWdodC5fdDIgPSB1dGlscy5tYXAoMSwgMCwgMSwgdGhpcy5fdDEsIHRoaXMuX3QyKTtcblxuICAgIC8vIGlmIHdlIGhhdmUgbm8gdDIsIHdlJ3JlIGRvbmVcbiAgICBpZiAoIXQyKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIGlmIHdlIGhhdmUgYSB0Miwgc3BsaXQgYWdhaW46XG4gICAgdDIgPSB1dGlscy5tYXAodDIsIHQxLCAxLCAwLCAxKTtcbiAgICByZXR1cm4gcmVzdWx0LnJpZ2h0LnNwbGl0KHQyKS5sZWZ0O1xuICB9XG5cbiAgZXh0cmVtYSgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBsZXQgcm9vdHMgPSBbXTtcblxuICAgIHRoaXMuZGltcy5mb3JFYWNoKFxuICAgICAgZnVuY3Rpb24gKGRpbSkge1xuICAgICAgICBsZXQgbWZuID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICByZXR1cm4gdltkaW1dO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgcCA9IHRoaXMuZHBvaW50c1swXS5tYXAobWZuKTtcbiAgICAgICAgcmVzdWx0W2RpbV0gPSB1dGlscy5kcm9vdHMocCk7XG4gICAgICAgIGlmICh0aGlzLm9yZGVyID09PSAzKSB7XG4gICAgICAgICAgcCA9IHRoaXMuZHBvaW50c1sxXS5tYXAobWZuKTtcbiAgICAgICAgICByZXN1bHRbZGltXSA9IHJlc3VsdFtkaW1dLmNvbmNhdCh1dGlscy5kcm9vdHMocCkpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtkaW1dID0gcmVzdWx0W2RpbV0uZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQgPj0gMCAmJiB0IDw9IDE7XG4gICAgICAgIH0pO1xuICAgICAgICByb290cyA9IHJvb3RzLmNvbmNhdChyZXN1bHRbZGltXS5zb3J0KHV0aWxzLm51bWJlclNvcnQpKTtcbiAgICAgIH0uYmluZCh0aGlzKVxuICAgICk7XG5cbiAgICByZXN1bHQudmFsdWVzID0gcm9vdHMuc29ydCh1dGlscy5udW1iZXJTb3J0KS5maWx0ZXIoZnVuY3Rpb24gKHYsIGlkeCkge1xuICAgICAgcmV0dXJuIHJvb3RzLmluZGV4T2YodikgPT09IGlkeDtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBiYm94KCkge1xuICAgIGNvbnN0IGV4dHJlbWEgPSB0aGlzLmV4dHJlbWEoKSxcbiAgICAgIHJlc3VsdCA9IHt9O1xuICAgIHRoaXMuZGltcy5mb3JFYWNoKFxuICAgICAgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmVzdWx0W2RdID0gdXRpbHMuZ2V0bWlubWF4KHRoaXMsIGQsIGV4dHJlbWFbZF0pO1xuICAgICAgfS5iaW5kKHRoaXMpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgb3ZlcmxhcHMoY3VydmUpIHtcbiAgICBjb25zdCBsYmJveCA9IHRoaXMuYmJveCgpLFxuICAgICAgdGJib3ggPSBjdXJ2ZS5iYm94KCk7XG4gICAgcmV0dXJuIHV0aWxzLmJib3hvdmVybGFwKGxiYm94LCB0YmJveCk7XG4gIH1cblxuICBvZmZzZXQodCwgZCkge1xuICAgIGlmICh0eXBlb2YgZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY29uc3QgYyA9IHRoaXMuZ2V0KHQpLFxuICAgICAgICBuID0gdGhpcy5ub3JtYWwodCk7XG4gICAgICBjb25zdCByZXQgPSB7XG4gICAgICAgIGM6IGMsXG4gICAgICAgIG46IG4sXG4gICAgICAgIHg6IGMueCArIG4ueCAqIGQsXG4gICAgICAgIHk6IGMueSArIG4ueSAqIGQsXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuXzNkKSB7XG4gICAgICAgIHJldC56ID0gYy56ICsgbi56ICogZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lYXIpIHtcbiAgICAgIGNvbnN0IG52ID0gdGhpcy5ub3JtYWwoMCksXG4gICAgICAgIGNvb3JkcyA9IHRoaXMucG9pbnRzLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgICAgIGNvbnN0IHJldCA9IHtcbiAgICAgICAgICAgIHg6IHAueCArIHQgKiBudi54LFxuICAgICAgICAgICAgeTogcC55ICsgdCAqIG52LnksXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAocC56ICYmIG52LnopIHtcbiAgICAgICAgICAgIHJldC56ID0gcC56ICsgdCAqIG52Lno7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH0pO1xuICAgICAgcmV0dXJuIFtuZXcgQmV6aWVyKGNvb3JkcyldO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZWR1Y2UoKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIGlmIChzLl9saW5lYXIpIHtcbiAgICAgICAgcmV0dXJuIHMub2Zmc2V0KHQpWzBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHMuc2NhbGUodCk7XG4gICAgfSk7XG4gIH1cblxuICBzaW1wbGUoKSB7XG4gICAgaWYgKHRoaXMub3JkZXIgPT09IDMpIHtcbiAgICAgIGNvbnN0IGExID0gdXRpbHMuYW5nbGUodGhpcy5wb2ludHNbMF0sIHRoaXMucG9pbnRzWzNdLCB0aGlzLnBvaW50c1sxXSk7XG4gICAgICBjb25zdCBhMiA9IHV0aWxzLmFuZ2xlKHRoaXMucG9pbnRzWzBdLCB0aGlzLnBvaW50c1szXSwgdGhpcy5wb2ludHNbMl0pO1xuICAgICAgaWYgKChhMSA+IDAgJiYgYTIgPCAwKSB8fCAoYTEgPCAwICYmIGEyID4gMCkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbjEgPSB0aGlzLm5vcm1hbCgwKTtcbiAgICBjb25zdCBuMiA9IHRoaXMubm9ybWFsKDEpO1xuICAgIGxldCBzID0gbjEueCAqIG4yLnggKyBuMS55ICogbjIueTtcbiAgICBpZiAodGhpcy5fM2QpIHtcbiAgICAgIHMgKz0gbjEueiAqIG4yLno7XG4gICAgfVxuICAgIHJldHVybiBhYnMoYWNvcyhzKSkgPCBwaSAvIDM7XG4gIH1cblxuICByZWR1Y2UoKSB7XG4gICAgLy8gVE9ETzogZXhhbWluZSB0aGVzZSB2YXIgdHlwZXMgaW4gbW9yZSBkZXRhaWwuLi5cbiAgICBsZXQgaSxcbiAgICAgIHQxID0gMCxcbiAgICAgIHQyID0gMCxcbiAgICAgIHN0ZXAgPSAwLjAxLFxuICAgICAgc2VnbWVudCxcbiAgICAgIHBhc3MxID0gW10sXG4gICAgICBwYXNzMiA9IFtdO1xuICAgIC8vIGZpcnN0IHBhc3M6IHNwbGl0IG9uIGV4dHJlbWFcbiAgICBsZXQgZXh0cmVtYSA9IHRoaXMuZXh0cmVtYSgpLnZhbHVlcztcbiAgICBpZiAoZXh0cmVtYS5pbmRleE9mKDApID09PSAtMSkge1xuICAgICAgZXh0cmVtYSA9IFswXS5jb25jYXQoZXh0cmVtYSk7XG4gICAgfVxuICAgIGlmIChleHRyZW1hLmluZGV4T2YoMSkgPT09IC0xKSB7XG4gICAgICBleHRyZW1hLnB1c2goMSk7XG4gICAgfVxuXG4gICAgZm9yICh0MSA9IGV4dHJlbWFbMF0sIGkgPSAxOyBpIDwgZXh0cmVtYS5sZW5ndGg7IGkrKykge1xuICAgICAgdDIgPSBleHRyZW1hW2ldO1xuICAgICAgc2VnbWVudCA9IHRoaXMuc3BsaXQodDEsIHQyKTtcbiAgICAgIHNlZ21lbnQuX3QxID0gdDE7XG4gICAgICBzZWdtZW50Ll90MiA9IHQyO1xuICAgICAgcGFzczEucHVzaChzZWdtZW50KTtcbiAgICAgIHQxID0gdDI7XG4gICAgfVxuXG4gICAgLy8gc2Vjb25kIHBhc3M6IGZ1cnRoZXIgcmVkdWNlIHRoZXNlIHNlZ21lbnRzIHRvIHNpbXBsZSBzZWdtZW50c1xuICAgIHBhc3MxLmZvckVhY2goZnVuY3Rpb24gKHAxKSB7XG4gICAgICB0MSA9IDA7XG4gICAgICB0MiA9IDA7XG4gICAgICB3aGlsZSAodDIgPD0gMSkge1xuICAgICAgICBmb3IgKHQyID0gdDEgKyBzdGVwOyB0MiA8PSAxICsgc3RlcDsgdDIgKz0gc3RlcCkge1xuICAgICAgICAgIHNlZ21lbnQgPSBwMS5zcGxpdCh0MSwgdDIpO1xuICAgICAgICAgIGlmICghc2VnbWVudC5zaW1wbGUoKSkge1xuICAgICAgICAgICAgdDIgLT0gc3RlcDtcbiAgICAgICAgICAgIGlmIChhYnModDEgLSB0MikgPCBzdGVwKSB7XG4gICAgICAgICAgICAgIC8vIHdlIGNhbiBuZXZlciBmb3JtIGEgcmVkdWN0aW9uXG4gICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZ21lbnQgPSBwMS5zcGxpdCh0MSwgdDIpO1xuICAgICAgICAgICAgc2VnbWVudC5fdDEgPSB1dGlscy5tYXAodDEsIDAsIDEsIHAxLl90MSwgcDEuX3QyKTtcbiAgICAgICAgICAgIHNlZ21lbnQuX3QyID0gdXRpbHMubWFwKHQyLCAwLCAxLCBwMS5fdDEsIHAxLl90Mik7XG4gICAgICAgICAgICBwYXNzMi5wdXNoKHNlZ21lbnQpO1xuICAgICAgICAgICAgdDEgPSB0MjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHQxIDwgMSkge1xuICAgICAgICBzZWdtZW50ID0gcDEuc3BsaXQodDEsIDEpO1xuICAgICAgICBzZWdtZW50Ll90MSA9IHV0aWxzLm1hcCh0MSwgMCwgMSwgcDEuX3QxLCBwMS5fdDIpO1xuICAgICAgICBzZWdtZW50Ll90MiA9IHAxLl90MjtcbiAgICAgICAgcGFzczIucHVzaChzZWdtZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcGFzczI7XG4gIH1cblxuICBzY2FsZShkKSB7XG4gICAgY29uc3Qgb3JkZXIgPSB0aGlzLm9yZGVyO1xuICAgIGxldCBkaXN0YW5jZUZuID0gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGRpc3RhbmNlRm4gPSBkO1xuICAgIH1cbiAgICBpZiAoZGlzdGFuY2VGbiAmJiBvcmRlciA9PT0gMikge1xuICAgICAgcmV0dXJuIHRoaXMucmFpc2UoKS5zY2FsZShkaXN0YW5jZUZuKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBhZGQgc3BlY2lhbCBoYW5kbGluZyBmb3IgZGVnZW5lcmF0ZSAoPWxpbmVhcikgY3VydmVzLlxuICAgIGNvbnN0IGNsb2Nrd2lzZSA9IHRoaXMuY2xvY2t3aXNlO1xuICAgIGNvbnN0IHIxID0gZGlzdGFuY2VGbiA/IGRpc3RhbmNlRm4oMCkgOiBkO1xuICAgIGNvbnN0IHIyID0gZGlzdGFuY2VGbiA/IGRpc3RhbmNlRm4oMSkgOiBkO1xuICAgIGNvbnN0IHYgPSBbdGhpcy5vZmZzZXQoMCwgMTApLCB0aGlzLm9mZnNldCgxLCAxMCldO1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgIGNvbnN0IG5wID0gW107XG4gICAgY29uc3QgbyA9IHV0aWxzLmxsaTQodlswXSwgdlswXS5jLCB2WzFdLCB2WzFdLmMpO1xuXG4gICAgaWYgKCFvKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3Qgc2NhbGUgdGhpcyBjdXJ2ZS4gVHJ5IHJlZHVjaW5nIGl0IGZpcnN0LlwiKTtcbiAgICB9XG4gICAgLy8gbW92ZSBhbGwgcG9pbnRzIGJ5IGRpc3RhbmNlICdkJyB3cnQgdGhlIG9yaWdpbiAnbydcblxuICAgIC8vIG1vdmUgZW5kIHBvaW50cyBieSBmaXhlZCBkaXN0YW5jZSBhbG9uZyBub3JtYWwuXG4gICAgWzAsIDFdLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIGNvbnN0IHAgPSAobnBbdCAqIG9yZGVyXSA9IHV0aWxzLmNvcHkocG9pbnRzW3QgKiBvcmRlcl0pKTtcbiAgICAgIHAueCArPSAodCA/IHIyIDogcjEpICogdlt0XS5uLng7XG4gICAgICBwLnkgKz0gKHQgPyByMiA6IHIxKSAqIHZbdF0ubi55O1xuICAgIH0pO1xuXG4gICAgaWYgKCFkaXN0YW5jZUZuKSB7XG4gICAgICAvLyBtb3ZlIGNvbnRyb2wgcG9pbnRzIHRvIGxpZSBvbiB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSBvZmZzZXRcbiAgICAgIC8vIGRlcml2YXRpdmUgdmVjdG9yLCBhbmQgdGhlIG9yaWdpbi10aHJvdWdoLWNvbnRyb2wgdmVjdG9yXG4gICAgICBbMCwgMV0uZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICBpZiAob3JkZXIgPT09IDIgJiYgISF0KSByZXR1cm47XG4gICAgICAgIGNvbnN0IHAgPSBucFt0ICogb3JkZXJdO1xuICAgICAgICBjb25zdCBkID0gdGhpcy5kZXJpdmF0aXZlKHQpO1xuICAgICAgICBjb25zdCBwMiA9IHsgeDogcC54ICsgZC54LCB5OiBwLnkgKyBkLnkgfTtcbiAgICAgICAgbnBbdCArIDFdID0gdXRpbHMubGxpNChwLCBwMiwgbywgcG9pbnRzW3QgKyAxXSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgQmV6aWVyKG5wKTtcbiAgICB9XG5cbiAgICAvLyBtb3ZlIGNvbnRyb2wgcG9pbnRzIGJ5IFwiaG93ZXZlciBtdWNoIG5lY2Vzc2FyeSB0b1xuICAgIC8vIGVuc3VyZSB0aGUgY29ycmVjdCB0YW5nZW50IHRvIGVuZHBvaW50XCIuXG4gICAgWzAsIDFdLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIGlmIChvcmRlciA9PT0gMiAmJiAhIXQpIHJldHVybjtcbiAgICAgIHZhciBwID0gcG9pbnRzW3QgKyAxXTtcbiAgICAgIHZhciBvdiA9IHtcbiAgICAgICAgeDogcC54IC0gby54LFxuICAgICAgICB5OiBwLnkgLSBvLnksXG4gICAgICB9O1xuICAgICAgdmFyIHJjID0gZGlzdGFuY2VGbiA/IGRpc3RhbmNlRm4oKHQgKyAxKSAvIG9yZGVyKSA6IGQ7XG4gICAgICBpZiAoZGlzdGFuY2VGbiAmJiAhY2xvY2t3aXNlKSByYyA9IC1yYztcbiAgICAgIHZhciBtID0gc3FydChvdi54ICogb3YueCArIG92LnkgKiBvdi55KTtcbiAgICAgIG92LnggLz0gbTtcbiAgICAgIG92LnkgLz0gbTtcbiAgICAgIG5wW3QgKyAxXSA9IHtcbiAgICAgICAgeDogcC54ICsgcmMgKiBvdi54LFxuICAgICAgICB5OiBwLnkgKyByYyAqIG92LnksXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgQmV6aWVyKG5wKTtcbiAgfVxuXG4gIG91dGxpbmUoZDEsIGQyLCBkMywgZDQpIHtcbiAgICBkMiA9IHR5cGVvZiBkMiA9PT0gXCJ1bmRlZmluZWRcIiA/IGQxIDogZDI7XG4gICAgY29uc3QgcmVkdWNlZCA9IHRoaXMucmVkdWNlKCksXG4gICAgICBsZW4gPSByZWR1Y2VkLmxlbmd0aCxcbiAgICAgIGZjdXJ2ZXMgPSBbXTtcblxuICAgIGxldCBiY3VydmVzID0gW10sXG4gICAgICBwLFxuICAgICAgYWxlbiA9IDAsXG4gICAgICB0bGVuID0gdGhpcy5sZW5ndGgoKTtcblxuICAgIGNvbnN0IGdyYWR1YXRlZCA9IHR5cGVvZiBkMyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZDQgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICBmdW5jdGlvbiBsaW5lYXJEaXN0YW5jZUZ1bmN0aW9uKHMsIGUsIHRsZW4sIGFsZW4sIHNsZW4pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgICAgICBjb25zdCBmMSA9IGFsZW4gLyB0bGVuLFxuICAgICAgICAgIGYyID0gKGFsZW4gKyBzbGVuKSAvIHRsZW4sXG4gICAgICAgICAgZCA9IGUgLSBzO1xuICAgICAgICByZXR1cm4gdXRpbHMubWFwKHYsIDAsIDEsIHMgKyBmMSAqIGQsIHMgKyBmMiAqIGQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBmb3JtIGN1cnZlIG91bGluZXNcbiAgICByZWR1Y2VkLmZvckVhY2goZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgICAgIGNvbnN0IHNsZW4gPSBzZWdtZW50Lmxlbmd0aCgpO1xuICAgICAgaWYgKGdyYWR1YXRlZCkge1xuICAgICAgICBmY3VydmVzLnB1c2goXG4gICAgICAgICAgc2VnbWVudC5zY2FsZShsaW5lYXJEaXN0YW5jZUZ1bmN0aW9uKGQxLCBkMywgdGxlbiwgYWxlbiwgc2xlbikpXG4gICAgICAgICk7XG4gICAgICAgIGJjdXJ2ZXMucHVzaChcbiAgICAgICAgICBzZWdtZW50LnNjYWxlKGxpbmVhckRpc3RhbmNlRnVuY3Rpb24oLWQyLCAtZDQsIHRsZW4sIGFsZW4sIHNsZW4pKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmN1cnZlcy5wdXNoKHNlZ21lbnQuc2NhbGUoZDEpKTtcbiAgICAgICAgYmN1cnZlcy5wdXNoKHNlZ21lbnQuc2NhbGUoLWQyKSk7XG4gICAgICB9XG4gICAgICBhbGVuICs9IHNsZW47XG4gICAgfSk7XG5cbiAgICAvLyByZXZlcnNlIHRoZSBcInJldHVyblwiIG91dGxpbmVcbiAgICBiY3VydmVzID0gYmN1cnZlc1xuICAgICAgLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICBwID0gcy5wb2ludHM7XG4gICAgICAgIGlmIChwWzNdKSB7XG4gICAgICAgICAgcy5wb2ludHMgPSBbcFszXSwgcFsyXSwgcFsxXSwgcFswXV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcy5wb2ludHMgPSBbcFsyXSwgcFsxXSwgcFswXV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9KVxuICAgICAgLnJldmVyc2UoKTtcblxuICAgIC8vIGZvcm0gdGhlIGVuZGNhcHMgYXMgbGluZXNcbiAgICBjb25zdCBmcyA9IGZjdXJ2ZXNbMF0ucG9pbnRzWzBdLFxuICAgICAgZmUgPSBmY3VydmVzW2xlbiAtIDFdLnBvaW50c1tmY3VydmVzW2xlbiAtIDFdLnBvaW50cy5sZW5ndGggLSAxXSxcbiAgICAgIGJzID0gYmN1cnZlc1tsZW4gLSAxXS5wb2ludHNbYmN1cnZlc1tsZW4gLSAxXS5wb2ludHMubGVuZ3RoIC0gMV0sXG4gICAgICBiZSA9IGJjdXJ2ZXNbMF0ucG9pbnRzWzBdLFxuICAgICAgbHMgPSB1dGlscy5tYWtlbGluZShicywgZnMpLFxuICAgICAgbGUgPSB1dGlscy5tYWtlbGluZShmZSwgYmUpLFxuICAgICAgc2VnbWVudHMgPSBbbHNdLmNvbmNhdChmY3VydmVzKS5jb25jYXQoW2xlXSkuY29uY2F0KGJjdXJ2ZXMpLFxuICAgICAgc2xlbiA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICAgIHJldHVybiBuZXcgUG9seUJlemllcihzZWdtZW50cyk7XG4gIH1cblxuICBvdXRsaW5lc2hhcGVzKGQxLCBkMiwgY3VydmVJbnRlcnNlY3Rpb25UaHJlc2hvbGQpIHtcbiAgICBkMiA9IGQyIHx8IGQxO1xuICAgIGNvbnN0IG91dGxpbmUgPSB0aGlzLm91dGxpbmUoZDEsIGQyKS5jdXJ2ZXM7XG4gICAgY29uc3Qgc2hhcGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDEsIGxlbiA9IG91dGxpbmUubGVuZ3RoOyBpIDwgbGVuIC8gMjsgaSsrKSB7XG4gICAgICBjb25zdCBzaGFwZSA9IHV0aWxzLm1ha2VzaGFwZShcbiAgICAgICAgb3V0bGluZVtpXSxcbiAgICAgICAgb3V0bGluZVtsZW4gLSBpXSxcbiAgICAgICAgY3VydmVJbnRlcnNlY3Rpb25UaHJlc2hvbGRcbiAgICAgICk7XG4gICAgICBzaGFwZS5zdGFydGNhcC52aXJ0dWFsID0gaSA+IDE7XG4gICAgICBzaGFwZS5lbmRjYXAudmlydHVhbCA9IGkgPCBsZW4gLyAyIC0gMTtcbiAgICAgIHNoYXBlcy5wdXNoKHNoYXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYXBlcztcbiAgfVxuXG4gIGludGVyc2VjdHMoY3VydmUsIGN1cnZlSW50ZXJzZWN0aW9uVGhyZXNob2xkKSB7XG4gICAgaWYgKCFjdXJ2ZSkgcmV0dXJuIHRoaXMuc2VsZmludGVyc2VjdHMoY3VydmVJbnRlcnNlY3Rpb25UaHJlc2hvbGQpO1xuICAgIGlmIChjdXJ2ZS5wMSAmJiBjdXJ2ZS5wMikge1xuICAgICAgcmV0dXJuIHRoaXMubGluZUludGVyc2VjdHMoY3VydmUpO1xuICAgIH1cbiAgICBpZiAoY3VydmUgaW5zdGFuY2VvZiBCZXppZXIpIHtcbiAgICAgIGN1cnZlID0gY3VydmUucmVkdWNlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmN1cnZlaW50ZXJzZWN0cyhcbiAgICAgIHRoaXMucmVkdWNlKCksXG4gICAgICBjdXJ2ZSxcbiAgICAgIGN1cnZlSW50ZXJzZWN0aW9uVGhyZXNob2xkXG4gICAgKTtcbiAgfVxuXG4gIGxpbmVJbnRlcnNlY3RzKGxpbmUpIHtcbiAgICBjb25zdCBteCA9IG1pbihsaW5lLnAxLngsIGxpbmUucDIueCksXG4gICAgICBteSA9IG1pbihsaW5lLnAxLnksIGxpbmUucDIueSksXG4gICAgICBNWCA9IG1heChsaW5lLnAxLngsIGxpbmUucDIueCksXG4gICAgICBNWSA9IG1heChsaW5lLnAxLnksIGxpbmUucDIueSk7XG4gICAgcmV0dXJuIHV0aWxzLnJvb3RzKHRoaXMucG9pbnRzLCBsaW5lKS5maWx0ZXIoKHQpID0+IHtcbiAgICAgIHZhciBwID0gdGhpcy5nZXQodCk7XG4gICAgICByZXR1cm4gdXRpbHMuYmV0d2VlbihwLngsIG14LCBNWCkgJiYgdXRpbHMuYmV0d2VlbihwLnksIG15LCBNWSk7XG4gICAgfSk7XG4gIH1cblxuICBzZWxmaW50ZXJzZWN0cyhjdXJ2ZUludGVyc2VjdGlvblRocmVzaG9sZCkge1xuICAgIC8vIFwic2ltcGxlXCIgY3VydmVzIGNhbm5vdCBpbnRlcnNlY3Qgd2l0aCB0aGVpciBkaXJlY3RcbiAgICAvLyBuZWlnaGJvdXIsIHNvIGZvciBlYWNoIHNlZ21lbnQgWCB3ZSBjaGVjayB3aGV0aGVyXG4gICAgLy8gaXQgaW50ZXJzZWN0cyBbMDp4LTJdW3grMjpsYXN0XS5cblxuICAgIGNvbnN0IHJlZHVjZWQgPSB0aGlzLnJlZHVjZSgpLFxuICAgICAgbGVuID0gcmVkdWNlZC5sZW5ndGggLSAyLFxuICAgICAgcmVzdWx0cyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIHJlc3VsdCwgbGVmdCwgcmlnaHQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGVmdCA9IHJlZHVjZWQuc2xpY2UoaSwgaSArIDEpO1xuICAgICAgcmlnaHQgPSByZWR1Y2VkLnNsaWNlKGkgKyAyKTtcbiAgICAgIHJlc3VsdCA9IHRoaXMuY3VydmVpbnRlcnNlY3RzKGxlZnQsIHJpZ2h0LCBjdXJ2ZUludGVyc2VjdGlvblRocmVzaG9sZCk7XG4gICAgICByZXN1bHRzLnB1c2goLi4ucmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cblxuICBjdXJ2ZWludGVyc2VjdHMoYzEsIGMyLCBjdXJ2ZUludGVyc2VjdGlvblRocmVzaG9sZCkge1xuICAgIGNvbnN0IHBhaXJzID0gW107XG4gICAgLy8gc3RlcCAxOiBwYWlyIG9mZiBhbnkgb3ZlcmxhcHBpbmcgc2VnbWVudHNcbiAgICBjMS5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgICBjMi5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIGlmIChsLm92ZXJsYXBzKHIpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaCh7IGxlZnQ6IGwsIHJpZ2h0OiByIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAvLyBzdGVwIDI6IGZvciBlYWNoIHBhaXJpbmcsIHJ1biB0aHJvdWdoIHRoZSBjb252ZXJnZW5jZSBhbGdvcml0aG0uXG4gICAgbGV0IGludGVyc2VjdGlvbnMgPSBbXTtcbiAgICBwYWlycy5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSB1dGlscy5wYWlyaXRlcmF0aW9uKFxuICAgICAgICBwYWlyLmxlZnQsXG4gICAgICAgIHBhaXIucmlnaHQsXG4gICAgICAgIGN1cnZlSW50ZXJzZWN0aW9uVGhyZXNob2xkXG4gICAgICApO1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLmNvbmNhdChyZXN1bHQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBpbnRlcnNlY3Rpb25zO1xuICB9XG5cbiAgYXJjcyhlcnJvclRocmVzaG9sZCkge1xuICAgIGVycm9yVGhyZXNob2xkID0gZXJyb3JUaHJlc2hvbGQgfHwgMC41O1xuICAgIHJldHVybiB0aGlzLl9pdGVyYXRlKGVycm9yVGhyZXNob2xkLCBbXSk7XG4gIH1cblxuICBfZXJyb3IocGMsIG5wMSwgcywgZSkge1xuICAgIGNvbnN0IHEgPSAoZSAtIHMpIC8gNCxcbiAgICAgIGMxID0gdGhpcy5nZXQocyArIHEpLFxuICAgICAgYzIgPSB0aGlzLmdldChlIC0gcSksXG4gICAgICByZWYgPSB1dGlscy5kaXN0KHBjLCBucDEpLFxuICAgICAgZDEgPSB1dGlscy5kaXN0KHBjLCBjMSksXG4gICAgICBkMiA9IHV0aWxzLmRpc3QocGMsIGMyKTtcbiAgICByZXR1cm4gYWJzKGQxIC0gcmVmKSArIGFicyhkMiAtIHJlZik7XG4gIH1cblxuICBfaXRlcmF0ZShlcnJvclRocmVzaG9sZCwgY2lyY2xlcykge1xuICAgIGxldCB0X3MgPSAwLFxuICAgICAgdF9lID0gMSxcbiAgICAgIHNhZmV0eTtcbiAgICAvLyB3ZSBkbyBhIGJpbmFyeSBzZWFyY2ggdG8gZmluZCB0aGUgXCJnb29kIGB0YCBjbG9zZXN0IHRvIG5vLWxvbmdlci1nb29kXCJcbiAgICBkbyB7XG4gICAgICBzYWZldHkgPSAwO1xuXG4gICAgICAvLyBzdGVwIDE6IHN0YXJ0IHdpdGggdGhlIG1heGltdW0gcG9zc2libGUgYXJjXG4gICAgICB0X2UgPSAxO1xuXG4gICAgICAvLyBwb2ludHM6XG4gICAgICBsZXQgbnAxID0gdGhpcy5nZXQodF9zKSxcbiAgICAgICAgbnAyLFxuICAgICAgICBucDMsXG4gICAgICAgIGFyYyxcbiAgICAgICAgcHJldl9hcmM7XG5cbiAgICAgIC8vIGJvb2xlYW5zOlxuICAgICAgbGV0IGN1cnJfZ29vZCA9IGZhbHNlLFxuICAgICAgICBwcmV2X2dvb2QgPSBmYWxzZSxcbiAgICAgICAgZG9uZTtcblxuICAgICAgLy8gbnVtYmVyczpcbiAgICAgIGxldCB0X20gPSB0X2UsXG4gICAgICAgIHByZXZfZSA9IDEsXG4gICAgICAgIHN0ZXAgPSAwO1xuXG4gICAgICAvLyBzdGVwIDI6IGZpbmQgdGhlIGJlc3QgcG9zc2libGUgYXJjXG4gICAgICBkbyB7XG4gICAgICAgIHByZXZfZ29vZCA9IGN1cnJfZ29vZDtcbiAgICAgICAgcHJldl9hcmMgPSBhcmM7XG4gICAgICAgIHRfbSA9ICh0X3MgKyB0X2UpIC8gMjtcbiAgICAgICAgc3RlcCsrO1xuXG4gICAgICAgIG5wMiA9IHRoaXMuZ2V0KHRfbSk7XG4gICAgICAgIG5wMyA9IHRoaXMuZ2V0KHRfZSk7XG5cbiAgICAgICAgYXJjID0gdXRpbHMuZ2V0Y2NlbnRlcihucDEsIG5wMiwgbnAzKTtcblxuICAgICAgICAvL2Fsc28gc2F2ZSB0aGUgdCB2YWx1ZXNcbiAgICAgICAgYXJjLmludGVydmFsID0ge1xuICAgICAgICAgIHN0YXJ0OiB0X3MsXG4gICAgICAgICAgZW5kOiB0X2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGVycm9yID0gdGhpcy5fZXJyb3IoYXJjLCBucDEsIHRfcywgdF9lKTtcbiAgICAgICAgY3Vycl9nb29kID0gZXJyb3IgPD0gZXJyb3JUaHJlc2hvbGQ7XG5cbiAgICAgICAgZG9uZSA9IHByZXZfZ29vZCAmJiAhY3Vycl9nb29kO1xuICAgICAgICBpZiAoIWRvbmUpIHByZXZfZSA9IHRfZTtcblxuICAgICAgICAvLyB0aGlzIGFyYyBpcyBmaW5lOiB3ZSBjYW4gbW92ZSAnZScgdXAgdG8gc2VlIGlmIHdlIGNhbiBmaW5kIGEgd2lkZXIgYXJjXG4gICAgICAgIGlmIChjdXJyX2dvb2QpIHtcbiAgICAgICAgICAvLyBpZiBlIGlzIGFscmVhZHkgYXQgbWF4LCB0aGVuIHdlJ3JlIGRvbmUgZm9yIHRoaXMgYXJjLlxuICAgICAgICAgIGlmICh0X2UgPj0gMSkge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIGNhcCBhdCB0PTFcbiAgICAgICAgICAgIGFyYy5pbnRlcnZhbC5lbmQgPSBwcmV2X2UgPSAxO1xuICAgICAgICAgICAgcHJldl9hcmMgPSBhcmM7XG4gICAgICAgICAgICAvLyBpZiB3ZSBjYXBwZWQgdGhlIGFyYyBzZWdtZW50IHRvIHQ9MSB3ZSBhbHNvIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXRcbiAgICAgICAgICAgIC8vIHRoZSBhcmMncyBlbmQgYW5nbGUgaXMgY29ycmVjdCB3aXRoIHJlc3BlY3QgdG8gdGhlIGJlemllciBlbmQgcG9pbnQuXG4gICAgICAgICAgICBpZiAodF9lID4gMSkge1xuICAgICAgICAgICAgICBsZXQgZCA9IHtcbiAgICAgICAgICAgICAgICB4OiBhcmMueCArIGFyYy5yICogY29zKGFyYy5lKSxcbiAgICAgICAgICAgICAgICB5OiBhcmMueSArIGFyYy5yICogc2luKGFyYy5lKSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgYXJjLmUgKz0gdXRpbHMuYW5nbGUoeyB4OiBhcmMueCwgeTogYXJjLnkgfSwgZCwgdGhpcy5nZXQoMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGlmIG5vdCwgbW92ZSBpdCB1cCBieSBoYWxmIHRoZSBpdGVyYXRpb24gZGlzdGFuY2VcbiAgICAgICAgICB0X2UgPSB0X2UgKyAodF9lIC0gdF9zKSAvIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdGhpcyBpcyBhIGJhZCBhcmM6IHdlIG5lZWQgdG8gbW92ZSAnZScgZG93biB0byBmaW5kIGEgZ29vZCBhcmNcbiAgICAgICAgICB0X2UgPSB0X207XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKCFkb25lICYmIHNhZmV0eSsrIDwgMTAwKTtcblxuICAgICAgaWYgKHNhZmV0eSA+PSAxMDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiTDgzNTogW0ZdIGFyYyBmb3VuZFwiLCB0X3MsIHByZXZfZSwgcHJldl9hcmMueCwgcHJldl9hcmMueSwgcHJldl9hcmMucywgcHJldl9hcmMuZSk7XG5cbiAgICAgIHByZXZfYXJjID0gcHJldl9hcmMgPyBwcmV2X2FyYyA6IGFyYztcbiAgICAgIGNpcmNsZXMucHVzaChwcmV2X2FyYyk7XG4gICAgICB0X3MgPSBwcmV2X2U7XG4gICAgfSB3aGlsZSAodF9lIDwgMSk7XG4gICAgcmV0dXJuIGNpcmNsZXM7XG4gIH1cbn1cblxuZXhwb3J0IHsgQmV6aWVyIH07XG4iLCJpbXBvcnQge1xuICAgIG1heEJ5LFxuICAgIG1pbkJ5LFxuICAgIGdldCxcbn0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7XG4gICAgQmV6aWVyLFxufSBmcm9tICdiZXppZXItanMnO1xuXG5pbXBvcnQgQmlnTnVtYmVyIGZyb20gJ2JpZ251bWJlci5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTWluTWF4KGRhdGEsIGxlZ2VuZCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1heDogZ2V0KG1heEJ5KGRhdGEsIG8gPT4gZ2V0KG8sIGxlZ2VuZCwgLUluZmluaXR5KSksIGxlZ2VuZCksXG4gICAgICAgIG1pbjogZ2V0KG1pbkJ5KGRhdGEsIG8gPT4gZ2V0KG8sIGxlZ2VuZCwgSW5maW5pdHkpKSwgbGVnZW5kKSxcbiAgICB9O1xufVxuXG5leHBvcnQgY29uc3QgUkVGRVJFTkNFX1RZUEUgPSB7XG4gICAgZGlzY3JldGU6ICdkaXNjcmV0ZScsXG4gICAgY29udGludW91czogJ2NvbnRpbnVvdXMnLFxufTtcblxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU3RyaW5nVmFsdWVzKGV4cHIpIHtcbiAgICBpZiAodHlwZW9mIGV4cHIgPT09ICdudW1iZXInKSByZXR1cm4gKCkgPT4gZXhwcjtcbiAgICBpZiAodHlwZW9mIGV4cHIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChleHByLmVuZHNXaXRoKCclJykpIHtcbiAgICAgICAgICAgIHJldHVybiBudW0gPT4gbnVtICogcGFyc2VGbG9hdChleHByKSAvIDEwMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwci5lbmRzV2l0aCgncHgnKSkge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHBhcnNlRmxvYXQoZXhwcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgJ3R5cGUgZmFsc2UnO1xufVxuXG5mdW5jdGlvbiBzcXIoeCkge1xuICAgIHJldHVybiB4ICogeDtcbn1cblxuZnVuY3Rpb24gZGlzdDIodiwgdykge1xuICAgIHJldHVybiBzcXIodlswXSAtIHdbMF0pICsgc3FyKHZbMV0gLSB3WzFdKTtcbn1cblxuLy8gcCAtIHBvaW50XG4vLyB2IC0gc3RhcnQgcG9pbnQgb2Ygc2VnbWVudFxuLy8gdyAtIGVuZCBwb2ludCBvZiBzZWdtZW50XG5leHBvcnQgZnVuY3Rpb24gZGlzdFRvU2VnbWVudFNxdWFyZWQocCwgdiwgdykge1xuICAgIGNvbnN0IGwyID0gZGlzdDIodiwgdyk7XG4gICAgaWYgKGwyID09PSAwKSByZXR1cm4gZGlzdDIocCwgdik7XG4gICAgbGV0IHQgPSAoKHBbMF0gLSB2WzBdKSAqICh3WzBdIC0gdlswXSkgKyAocFsxXSAtIHZbMV0pICogKHdbMV0gLSB2WzFdKSkgLyBsMjtcbiAgICB0ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdCkpO1xuICAgIHJldHVybiBkaXN0MihwLCBbIHZbMF0gKyB0ICogKHdbMF0gLSB2WzBdKSwgdlsxXSArIHQgKiAod1sxXSAtIHZbMV0pIF0pO1xufVxuXG4vLyBwIC0gcG9pbnRcbi8vIHYgLSBzdGFydCBwb2ludCBvZiBzZWdtZW50XG4vLyB3IC0gZW5kIHBvaW50IG9mIHNlZ21lbnRcbmV4cG9ydCBmdW5jdGlvbiBkaXN0VG9TZWdtZW50KHAsIHYsIHcpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGRpc3RUb1NlZ21lbnRTcXVhcmVkKHAsIHYsIHcpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJlemllclBvaW50cyhwMSwgcDIpIHtcbiAgICBjb25zdCBzcGFuID0gKHAyWzBdIC0gcDFbMF0pIC8gMjtcbiAgICByZXR1cm4gWyBwMVswXSArIHNwYW4sIHAxWzFdLCBwMlswXSAtIHNwYW4sIHAyWzFdLCBwMlswXSwgcDJbMV0gXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RUb0JlemllclNlZ21lbnRTcXVhcmVkKHAsIHYsIHcpIHtcbiAgICBjb25zdCBicCA9IGJlemllclBvaW50cyh2LCB3KTtcbiAgICBjb25zdCBiID0gbmV3IEJlemllcih2WzBdLCB2WzFdLCBicFswXSwgYnBbMV0sIGJwWzJdLCBicFszXSwgYnBbNF0sIGJwWzVdKTtcblxuICAgIGNvbnN0IHBvaW50ID0gYi5wcm9qZWN0KHsgeDogcFswXSwgeTogcFsxXSB9KTtcbiAgICBjb25zdCBkID0gZGlzdDIocCwgWyBwb2ludC54LCBwb2ludC55IF0pO1xuICAgIHJldHVybiBkO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludEluUG9seWdvbihwb2ludCwgdnMpIHtcbiAgICAvLyByYXktY2FzdGluZyBhbGdvcml0aG0gYmFzZWQgb25cbiAgICAvLyBodHRwOi8vd3d3LmVjc2UucnBpLmVkdS9Ib21lcGFnZXMvd3JmL1Jlc2VhcmNoL1Nob3J0X05vdGVzL3BucG9seS5odG1sXG5cbiAgICBjb25zdCB4ID0gcG9pbnRbMF0sXG4gICAgICAgIHkgPSBwb2ludFsxXTtcblxuICAgIGxldCBpbnNpZGUgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IHZzLmxlbmd0aCAtIDE7IGkgPCB2cy5sZW5ndGg7IGogPSBpKyspIHtcbiAgICAgICAgY29uc3QgeGkgPSB2c1tpXVswXSxcbiAgICAgICAgICAgIHlpID0gdnNbaV1bMV07XG4gICAgICAgIGNvbnN0IHhqID0gdnNbal1bMF0sXG4gICAgICAgICAgICB5aiA9IHZzW2pdWzFdO1xuXG4gICAgICAgIGNvbnN0IGludGVyc2VjdCA9ICgoeWkgPiB5KSAhPT0gKHlqID4geSkpXG4gICAgICAgICAgICAmJiAoeCA8ICh4aiAtIHhpKSAqICh5IC0geWkpIC8gKHlqIC0geWkpICsgeGkpO1xuICAgICAgICBpZiAoaW50ZXJzZWN0KSBpbnNpZGUgPSAhaW5zaWRlO1xuICAgIH1cblxuICAgIHJldHVybiBpbnNpZGU7XG59XG5cblxuZXhwb3J0IGNvbnN0IGxvZzEwID0gTWF0aC5sb2cxMCB8fCBmdW5jdGlvbih4KSB7XG4gICAgY29uc3QgZXhwb25lbnQgPSBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFOyAvLyBNYXRoLkxPRzEwRSA9IDEgLyBNYXRoLkxOMTAuXG4gICAgLy8gQ2hlY2sgZm9yIHdob2xlIHBvd2VycyBvZiAxMCxcbiAgICAvLyB3aGljaCBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3Igc2hvdWxkIGJlIGNvcnJlY3RlZC5cbiAgICBjb25zdCBwb3dlck9mMTAgPSBNYXRoLnJvdW5kKGV4cG9uZW50KTtcbiAgICBjb25zdCBpc1Bvd2VyT2YxMCA9IHggPT09IE1hdGgucG93KDEwLCBwb3dlck9mMTApO1xuXG4gICAgcmV0dXJuIGlzUG93ZXJPZjEwID8gcG93ZXJPZjEwIDogZXhwb25lbnQ7XG59O1xuXG5mdW5jdGlvbiBjb252ZXJ0KG4pIHtcbiAgICBjb25zdCBvcmRlciA9IE1hdGguZmxvb3IoTWF0aC5sb2cobikgLyBNYXRoLkxOMTBcbiAgICAgICAgICAgICAgICAgICAgICAgKyAwLjAwMDAwMDAwMSk7IC8vIGJlY2F1c2UgZmxvYXQgbWF0aCBzdWNrcyBsaWtlIHRoYXRcbiAgICByZXR1cm4gb3JkZXI7XG59XG5mdW5jdGlvbiBkaXZpc29ycyhpbnRlZ2VyLCBzdGVwKSB7XG4gICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoaW50ZWdlciAtIHN0ZXAsIHN0ZXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgY29uc3QgdG9wID0gc3RlcCArIGk7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IHN0ZXAgLSBpO1xuICAgICAgICBpZiAodG9wIDwgaW50ZWdlcikge1xuICAgICAgICAgICAgaWYgKGludGVnZXIgJSB0b3AgPT09IDApIHJldHVybiB0b3A7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm90dG9tID4gMCkge1xuICAgICAgICAgICAgaWYgKGludGVnZXIgJSBib3R0b20gPT09IDApIHJldHVybiBib3R0b207XG4gICAgICAgIH1cblxuICAgIH1cbiAgICByZXR1cm4gaW50ZWdlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiByb3VudFRvUmFuZ2UoeU1pbk1heCwgc3RlcCkge1xuICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHlNaW5NYXg7XG4gICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgIGNvbnN0IG5ld1N0ZXAgPSBkaXZpc29ycygxMCwgc3RlcCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICBtYXg6IG1heCArIDEsXG4gICAgICAgICAgICBzdGVwOiBuZXdTdGVwLFxuICAgICAgICAgICAgc3RlcFNwYW46ICtuZXcgQmlnTnVtYmVyKDEpLmRpdmlkZWRCeShuZXdTdGVwKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qgc3BhbiA9IG1heCAtIG1pbjtcbiAgICBjb25zdCBtYWduaXR1ZGUgPSBjb252ZXJ0KHNwYW4pIC0gMTtcblxuICAgIGNvbnN0IHAgPSBuZXcgQmlnTnVtYmVyKDEwKTtcbiAgICBjb25zdCBleHAgPSArcC5leHBvbmVudGlhdGVkQnkobWFnbml0dWRlKTtcbiAgICBjb25zdCBuZXdNaW4gPSArbmV3IEJpZ051bWJlcihNYXRoLmZsb29yKG1pbiAvIGV4cCkpLm11bHRpcGxpZWRCeShleHApO1xuICAgIGNvbnN0IG5ld01heCA9ICtuZXcgQmlnTnVtYmVyKE1hdGguY2VpbChtYXggLyBleHApKS5tdWx0aXBsaWVkQnkoZXhwKTtcblxuICAgIGNvbnN0IG5ld1NwYW4gPSArbmV3IEJpZ051bWJlcihuZXdNYXgpLm1pbnVzKG5ld01pbik7XG4gICAgY29uc3QgbWluc3RlcHMgPSArbmV3IEJpZ051bWJlcihuZXdTcGFuKS5kaXZpZGVkQnkoZXhwKTtcbiAgICBjb25zdCBuZXdTdGVwID0gZGl2aXNvcnMobWluc3RlcHMsIHN0ZXApO1xuICAgIGNvbnN0IHN0ZXBTcGFuID0gK25ldyBCaWdOdW1iZXIobmV3U3BhbikuZGl2aWRlZEJ5KG5ld1N0ZXApO1xuICAgIC8vIC8vIGNvbnNvbGUubG9nKG5ld01pbiwgbmV3TWF4LCBuZXdTdGVwLCBzdGVwU3BhbilcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IG5ld01pbixcbiAgICAgICAgbWF4OiBuZXdNYXgsXG4gICAgICAgIHN0ZXA6IG5ld1N0ZXAsXG4gICAgICAgIHN0ZXBTcGFuLFxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRZQXhpcyhtaW5tYXgpIHtcbiAgICBsZXQgaSA9IG1pbm1heC5taW47XG4gICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgd2hpbGUgKGkgPD0gbWlubWF4Lm1heCkge1xuICAgICAgICB2YWx1ZXMucHVzaChpKTtcbiAgICAgICAgaSA9ICtuZXcgQmlnTnVtYmVyKGkpLnBsdXMobWlubWF4LnN0ZXBTcGFuKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0WEF4aXMobWluLCBtYXgsIHNwYW4pIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBjb25zdCBwID0gTWF0aC5yb3VuZCgobWF4IC0gbWluKSAvIHNwYW4pO1xuICAgIGxldCBzdGFydCA9IG1pbjtcbiAgICB3aGlsZSAoc3RhcnQgPCBtYXgpIHtcbiAgICAgICAgdmFsdWVzLnB1c2goe1xuICAgICAgICAgICAgdmFsdWU6IHN0YXJ0LFxuICAgICAgICB9KTtcbiAgICAgICAgc3RhcnQgKz0gcDtcbiAgICB9XG4gICAgdmFsdWVzLnB1c2goe1xuICAgICAgICB2YWx1ZTogbWF4LFxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRYQXhpc0Rpc2NyZXRlKHJlZiwgc3Bhbikge1xuICAgIGlmIChzcGFuID4gcmVmLmxlbmd0aCB8fCBzcGFuID09PSByZWYubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZWYubWFwKChyLCBzdGVwKSA9PiAoe1xuICAgICAgICAgICAgc3RlcCxcbiAgICAgICAgICAgIHZhbHVlOiByLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGNvbnN0IGxlbmd0aCA9IHJlZi5sZW5ndGg7XG4gICAgY29uc3Qgc3RlcCA9IE1hdGgucm91bmQobGVuZ3RoIC8gKHNwYW4gLSAxKSk7XG4gICAgbGV0IGkgPSAwO1xuXG4gICAgd2hpbGUgKHJlZltpXSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh7XG4gICAgICAgICAgICAvLyBzdGVwOiBpLFxuICAgICAgICAgICAgdmFsdWU6IHJlZltpXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGkgKz0gc3RlcDtcbiAgICB9XG4gICAgaWYgKGkgIT09IGxlbmd0aCAtIDEpIHtcbiAgICAgICAgdmFsdWVzLnB1c2goe1xuICAgICAgICAgICAgLy8gc3RlcDogbGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIHZhbHVlOiByZWZbbGVuZ3RoIC0gMV0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xufVxuIiwiaW1wb3J0IHsgUkVGRVJFTkNFX1RZUEUgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMnO1xuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGdldFlBeGlzLCBnZXRYQXhpcywgcm91bnRUb1JhbmdlLCBnZXRYQXhpc0Rpc2NyZXRlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzJztcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJztcblxuY2xhc3MgRGF0YTJEIHtcbiAgICBhcHBseShnbG9iYWxDdHgpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICdEYXRhMkQnO1xuICAgICAgICBnbG9iYWxDdHguZ2xvYmFsRGF0YS5ob29rcy5pbml0RGF0YS50YXAobmFtZSwgKGRhdGFPcHRpb25zLCBzb3VyY2UsIHNvdXJjZU1ldGEpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdChnbG9iYWxDdHgsIGRhdGFPcHRpb25zLCBzb3VyY2UsIHNvdXJjZU1ldGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgZ2xvYmFsQ3R4Lmdsb2JhbERhdGEuaG9va3MucmVzZXREYXRhLnRhcChuYW1lLCAoZGF0YU9wdGlvbnMsIHNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNldERhdGEoZGF0YU9wdGlvbnMsIHNvdXJjZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXQoZ2xvYmFsQ3R4LCBkYXRhT3B0aW9ucywgc291cmNlLCBzb3VyY2VNZXRhKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oc291cmNlLCB7XG4gICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgIGxlZ2VuZDogW10sXG4gICAgICAgICAgICByZWZlcmVuY2U6IHt9LFxuICAgICAgICAgICAgc3RhY2s6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihzb3VyY2VNZXRhLCB7XG4gICAgICAgICAgICB4TWluTWF4OiB7fSxcbiAgICAgICAgICAgIHlNaW5NYXg6IHt9LFxuICAgICAgICAgICAgeERhdGFTcGFuOiB7fSxcbiAgICAgICAgICAgIHlEYXRhU3Bhbjoge30sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVzZXREYXRhKGRhdGFPcHRpb25zLCBzb3VyY2UpO1xuICAgICAgICB0aGlzLmluaXRFZmZlY3QoZ2xvYmFsQ3R4LCBzb3VyY2UsIHNvdXJjZU1ldGEpO1xuICAgIH1cblxuICAgIHJlc2V0RGF0YShkYXRhT3B0aW9ucywgc291cmNlKSB7XG4gICAgICAgIGNvbnN0IHMgPSBkYXRhT3B0aW9ucy5zZXJpZXM7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9IGRhdGFPcHRpb25zLnJlZmVyZW5jZTtcbiAgICAgICAgY29uc3QgZGF0YUxlZ2VuZCA9IFtdO1xuICAgICAgICBjb25zdCByZWYgPSBzWzBdLnZhbHVlcy5tYXAodiA9PiB2WzBdKTtcbiAgICAgICAgcy5mb3JFYWNoKCh7IG5hbWUgfSkgPT4ge1xuICAgICAgICAgICAgZGF0YUxlZ2VuZC5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHNvdXJjZSwge1xuICAgICAgICAgICAgLy8gZGF0YTogY2xvbmVEZWVwKGRhdGFTb3VyY2UpLFxuICAgICAgICAgICAgb3JpZ2luU2VyaWVzOiBkYXRhT3B0aW9ucy5zZXJpZXMsXG4gICAgICAgICAgICBsZWdlbmQ6IGNsb25lRGVlcChkYXRhTGVnZW5kKSxcbiAgICAgICAgICAgIHJlZmVyZW5jZTogT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgcmVmLFxuICAgICAgICAgICAgICAgIHR5cGU6IFJFRkVSRU5DRV9UWVBFLmNvbnRpbnVvdXMsXG4gICAgICAgICAgICB9LCByZWZlcmVuY2UpLFxuICAgICAgICAgICAgeEF4aXM6IGRhdGFPcHRpb25zLnhBeGlzLFxuICAgICAgICAgICAgeUF4aXM6IGRhdGFPcHRpb25zLnlBeGlzLFxuICAgICAgICAgICAgc3RhY2s6IGRhdGFPcHRpb25zLnN0YWNrLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpbml0RWZmZWN0KGdsb2JhbEN0eCwgc291cmNlLCBzb3VyY2VNZXRhKSB7XG4gICAgICAgIGdsb2JhbEN0eC5lZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2VmZmVjdCBpbml0IGRhdGEnKVxuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIG9yaWdpblNlcmllcyxcbiAgICAgICAgICAgICAgICBsZWdlbmQsXG4gICAgICAgICAgICAgICAgeEF4aXMsXG4gICAgICAgICAgICAgICAgeUF4aXMsXG4gICAgICAgICAgICAgICAgc3RhY2ssXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlLFxuICAgICAgICAgICAgfSA9IHNvdXJjZTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFTb3VyY2UgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlUmVkdWNlciA9IFtdO1xuICAgICAgICAgICAgb3JpZ2luU2VyaWVzLmZvckVhY2goKHsgdmFsdWVzIH0sIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzdGFjaykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0VmFsdWUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNMZ0Rpc2FibGVkID0gbGVnZW5kW2lkeF0uZGlzYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5mb3JFYWNoKCh2YWx1ZSwgaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlUmVkdWNlcltpZHhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVSZWR1Y2VyW2lkeF0gPSBbIHZhbHVlWzBdLCBuZXcgQmlnTnVtYmVyKDApIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0VmFsdWVbaWR4XSA9IFsgdmFsdWVSZWR1Y2VyW2lkeF1bMF0sICt2YWx1ZVJlZHVjZXJbaWR4XVsxXSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVSZWR1Y2VyW2lkeF1bMV0gPSB2YWx1ZVJlZHVjZXJbaWR4XVsxXS5wbHVzKGlzTGdEaXNhYmxlZCA/IDAgOiArdmFsdWVbMV0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVNvdXJjZS5wdXNoKHZhbHVlUmVkdWNlci5tYXAoKHYsIGkpID0+IFsgdlswXSwgK3ZbMV0sIGxhc3RWYWx1ZVtpXVsxXSwgK3ZhbHVlc1tpXVsxXSBdKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVNvdXJjZS5wdXNoKHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHhTcGFuID0geEF4aXMuc3BhbiB8fCA1O1xuICAgICAgICAgICAgY29uc3QgeVNwYW4gPSB5QXhpcy5zcGFuIHx8IDM7XG4gICAgICAgICAgICBsZXQgeG1pbiA9IHR5cGVvZiB4QXhpcy5taW4gPT09ICdudW1iZXInID8geEF4aXMubWluIDogSW5maW5pdHk7XG4gICAgICAgICAgICBsZXQgeW1pbiA9IHR5cGVvZiB5QXhpcy5taW4gPT09ICdudW1iZXInID8geUF4aXMubWluIDogSW5maW5pdHk7XG4gICAgICAgICAgICBsZXQgeG1heCA9IHR5cGVvZiB4QXhpcy5tYXggPT09ICdudW1iZXInID8geEF4aXMubWF4IDogLUluZmluaXR5O1xuICAgICAgICAgICAgbGV0IHltYXggPSB0eXBlb2YgeUF4aXMubWF4ID09PSAnbnVtYmVyJyA/IHlBeGlzLm1heCA6IC1JbmZpbml0eTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGVnZW5kLmZvckVhY2goKGwsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWwuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gZGF0YVNvdXJjZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmZvckVhY2godiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gdlsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHggPSB2WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgeG1pbiA9IE1hdGgubWluKHgsIHhtaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgeG1heCA9IE1hdGgubWF4KHgsIHhtYXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeW1pbiA9IE1hdGgubWluKHksIHltaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgeW1heCA9IE1hdGgubWF4KHksIHltYXgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgcmVmID0gZGF0YVNvdXJjZVswXS5tYXAodiA9PiB2WzBdKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlZilcbiAgICAgICAgICAgIGNvbnN0IHlyYW5nZSA9IHJvdW50VG9SYW5nZSh7IG1pbjogeW1pbiwgbWF4OiB5bWF4IH0sIHlTcGFuKTtcbiAgICAgICAgICAgIGNvbnN0IHlWYWx1ZXMgPSBnZXRZQXhpcyh5cmFuZ2UpO1xuICAgICAgICAgICAgY29uc3QgeFZhbHVlcyA9IHJlZmVyZW5jZS50eXBlID09PSBSRUZFUkVOQ0VfVFlQRS5jb250aW51b3VzID8gZ2V0WEF4aXMoeG1pbiwgeG1heCwgeFNwYW4pIDogZ2V0WEF4aXNEaXNjcmV0ZShyZWYsIHhTcGFuKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHhWYWx1ZXMsIHhTcGFuKVxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzb3VyY2UsIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBjbG9uZURlZXAoZGF0YVNvdXJjZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc291cmNlTWV0YSwge1xuICAgICAgICAgICAgICAgIHlNZXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1pbjogeVZhbHVlc1swXSxcbiAgICAgICAgICAgICAgICAgICAgbWF4OiB5VmFsdWVzW3lWYWx1ZXMubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogeVZhbHVlcyxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB5QXhpcy5mb3JtYXQgfHwgKGQgPT4gZCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB4TWV0YToge1xuICAgICAgICAgICAgICAgICAgICBtaW46IHhtaW4sXG4gICAgICAgICAgICAgICAgICAgIG1heDogeG1heCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB4VmFsdWVzLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IHhBeGlzLmZvcm1hdCB8fCAoZCA9PiBkKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0YTJEO1xuIiwiY2xhc3MgRGF0YTFEIHtcbiAgICBhcHBseShnbG9iYWxDdHgpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICdEYXRhMUQnO1xuICAgICAgICBnbG9iYWxDdHguZ2xvYmFsRGF0YS5ob29rcy5pbml0RGF0YS50YXAobmFtZSwgKGRhdGFPcHRpb25zLCBzb3VyY2UsIHNvdXJjZU1ldGEpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdChnbG9iYWxDdHgsIGRhdGFPcHRpb25zLCBzb3VyY2UsIHNvdXJjZU1ldGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgZ2xvYmFsQ3R4Lmdsb2JhbERhdGEuaG9va3MucmVzZXREYXRhLnRhcChuYW1lLCAoZGF0YU9wdGlvbnMsIHNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNldERhdGEoZGF0YU9wdGlvbnMsIHNvdXJjZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXQoZ2xvYmFsQ3R4LCBkYXRhT3B0aW9ucywgc291cmNlKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oc291cmNlLCB7XG4gICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgIGxlZ2VuZDogW10sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVzZXREYXRhKGRhdGFPcHRpb25zLCBzb3VyY2UpO1xuICAgIH1cblxuICAgIHJlc2V0RGF0YShkYXRhT3B0aW9ucywgc291cmNlKSB7XG4gICAgICAgIGNvbnN0IHMgPSBkYXRhT3B0aW9ucy5zZXJpZXM7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihzb3VyY2UsIHtcbiAgICAgICAgICAgIG9yaWdpblNlcmllczogZGF0YU9wdGlvbnMuc2VyaWVzLFxuICAgICAgICAgICAgbGVnZW5kOiBzLm1hcChzZXJpID0+ICh7XG4gICAgICAgICAgICAgICAgbmFtZTogc2VyaS5uYW1lLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIGRhdGE6IHMubWFwKHNlcmkgPT4gc2VyaS52YWx1ZSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0YTFEOyIsIi8qKlxyXG4gKiBDb21tb24gdXRpbGl0aWVzXHJcbiAqIEBtb2R1bGUgZ2xNYXRyaXhcclxuICovXG4vLyBDb25maWd1cmF0aW9uIENvbnN0YW50c1xuZXhwb3J0IHZhciBFUFNJTE9OID0gMC4wMDAwMDE7XG5leHBvcnQgdmFyIEFSUkFZX1RZUEUgPSB0eXBlb2YgRmxvYXQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyA/IEZsb2F0MzJBcnJheSA6IEFycmF5O1xuZXhwb3J0IHZhciBSQU5ET00gPSBNYXRoLnJhbmRvbTtcbi8qKlxyXG4gKiBTZXRzIHRoZSB0eXBlIG9mIGFycmF5IHVzZWQgd2hlbiBjcmVhdGluZyBuZXcgdmVjdG9ycyBhbmQgbWF0cmljZXNcclxuICpcclxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXlDb25zdHJ1Y3RvciB8IEFycmF5Q29uc3RydWN0b3J9IHR5cGUgQXJyYXkgdHlwZSwgc3VjaCBhcyBGbG9hdDMyQXJyYXkgb3IgQXJyYXlcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRNYXRyaXhBcnJheVR5cGUodHlwZSkge1xuICBBUlJBWV9UWVBFID0gdHlwZTtcbn1cbnZhciBkZWdyZWUgPSBNYXRoLlBJIC8gMTgwO1xuLyoqXHJcbiAqIENvbnZlcnQgRGVncmVlIFRvIFJhZGlhblxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gYSBBbmdsZSBpbiBEZWdyZWVzXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdG9SYWRpYW4oYSkge1xuICByZXR1cm4gYSAqIGRlZ3JlZTtcbn1cbi8qKlxyXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCB0aGUgYXJndW1lbnRzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSB2YWx1ZSwgd2l0aGluIGFuIGFic29sdXRlXHJcbiAqIG9yIHJlbGF0aXZlIHRvbGVyYW5jZSBvZiBnbE1hdHJpeC5FUFNJTE9OIChhbiBhYnNvbHV0ZSB0b2xlcmFuY2UgaXMgdXNlZCBmb3IgdmFsdWVzIGxlc3NcclxuICogdGhhbiBvciBlcXVhbCB0byAxLjAsIGFuZCBhIHJlbGF0aXZlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciBsYXJnZXIgdmFsdWVzKVxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gYSBUaGUgZmlyc3QgbnVtYmVyIHRvIHRlc3QuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIFRoZSBzZWNvbmQgbnVtYmVyIHRvIHRlc3QuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBudW1iZXJzIGFyZSBhcHByb3hpbWF0ZWx5IGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhKSwgTWF0aC5hYnMoYikpO1xufVxuaWYgKCFNYXRoLmh5cG90KSBNYXRoLmh5cG90ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgeSA9IDAsXG4gICAgICBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgeSArPSBhcmd1bWVudHNbaV0gKiBhcmd1bWVudHNbaV07XG4gIH1cblxuICByZXR1cm4gTWF0aC5zcXJ0KHkpO1xufTsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxyXG4gKiAyeDMgTWF0cml4XHJcbiAqIEBtb2R1bGUgbWF0MmRcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEEgbWF0MmQgY29udGFpbnMgc2l4IGVsZW1lbnRzIGRlZmluZWQgYXM6XHJcbiAqIDxwcmU+XHJcbiAqIFthLCBiLFxyXG4gKiAgYywgZCxcclxuICogIHR4LCB0eV1cclxuICogPC9wcmU+XHJcbiAqIFRoaXMgaXMgYSBzaG9ydCBmb3JtIGZvciB0aGUgM3gzIG1hdHJpeDpcclxuICogPHByZT5cclxuICogW2EsIGIsIDAsXHJcbiAqICBjLCBkLCAwLFxyXG4gKiAgdHgsIHR5LCAxXVxyXG4gKiA8L3ByZT5cclxuICogVGhlIGxhc3QgY29sdW1uIGlzIGlnbm9yZWQgc28gdGhlIGFycmF5IGlzIHNob3J0ZXIgYW5kIG9wZXJhdGlvbnMgYXJlIGZhc3Rlci5cclxuICovXG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdDJkXHJcbiAqXHJcbiAqIEByZXR1cm5zIHttYXQyZH0gYSBuZXcgMngzIG1hdHJpeFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDYpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs1XSA9IDA7XG4gIH1cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbM10gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgbWF0MmQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIG1hdHJpeCB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IGEgbmV3IDJ4MyBtYXRyaXhcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg2KTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gYVs0XTtcbiAgb3V0WzVdID0gYVs1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MmQgdG8gYW5vdGhlclxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gYVs0XTtcbiAgb3V0WzVdID0gYVs1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTZXQgYSBtYXQyZCB0byB0aGUgaWRlbnRpdHkgbWF0cml4XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBtYXQyZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IGEgQ29tcG9uZW50IEEgKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIENvbXBvbmVudCBCIChpbmRleCAxKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYyBDb21wb25lbnQgQyAoaW5kZXggMilcclxuICogQHBhcmFtIHtOdW1iZXJ9IGQgQ29tcG9uZW50IEQgKGluZGV4IDMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eCBDb21wb25lbnQgVFggKGluZGV4IDQpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eSBDb21wb25lbnQgVFkgKGluZGV4IDUpXHJcbiAqIEByZXR1cm5zIHttYXQyZH0gQSBuZXcgbWF0MmRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKGEsIGIsIGMsIGQsIHR4LCB0eSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNik7XG4gIG91dFswXSA9IGE7XG4gIG91dFsxXSA9IGI7XG4gIG91dFsyXSA9IGM7XG4gIG91dFszXSA9IGQ7XG4gIG91dFs0XSA9IHR4O1xuICBvdXRbNV0gPSB0eTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQyZCB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge051bWJlcn0gYSBDb21wb25lbnQgQSAoaW5kZXggMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgQ29tcG9uZW50IEIgKGluZGV4IDEpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjIENvbXBvbmVudCBDIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gZCBDb21wb25lbnQgRCAoaW5kZXggMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IHR4IENvbXBvbmVudCBUWCAoaW5kZXggNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IHR5IENvbXBvbmVudCBUWSAoaW5kZXggNSlcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBhLCBiLCBjLCBkLCB0eCwgdHkpIHtcbiAgb3V0WzBdID0gYTtcbiAgb3V0WzFdID0gYjtcbiAgb3V0WzJdID0gYztcbiAgb3V0WzNdID0gZDtcbiAgb3V0WzRdID0gdHg7XG4gIG91dFs1XSA9IHR5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEludmVydHMgYSBtYXQyZFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICB2YXIgYWEgPSBhWzBdLFxuICAgICAgYWIgPSBhWzFdLFxuICAgICAgYWMgPSBhWzJdLFxuICAgICAgYWQgPSBhWzNdO1xuICB2YXIgYXR4ID0gYVs0XSxcbiAgICAgIGF0eSA9IGFbNV07XG4gIHZhciBkZXQgPSBhYSAqIGFkIC0gYWIgKiBhYztcblxuICBpZiAoIWRldCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZGV0ID0gMS4wIC8gZGV0O1xuICBvdXRbMF0gPSBhZCAqIGRldDtcbiAgb3V0WzFdID0gLWFiICogZGV0O1xuICBvdXRbMl0gPSAtYWMgKiBkZXQ7XG4gIG91dFszXSA9IGFhICogZGV0O1xuICBvdXRbNF0gPSAoYWMgKiBhdHkgLSBhZCAqIGF0eCkgKiBkZXQ7XG4gIG91dFs1XSA9IChhYiAqIGF0eCAtIGFhICogYXR5KSAqIGRldDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDJkXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICByZXR1cm4gYVswXSAqIGFbM10gLSBhWzFdICogYVsyXTtcbn1cbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQyZCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdLFxuICAgICAgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdLFxuICAgICAgYjQgPSBiWzRdLFxuICAgICAgYjUgPSBiWzVdO1xuICBvdXRbMF0gPSBhMCAqIGIwICsgYTIgKiBiMTtcbiAgb3V0WzFdID0gYTEgKiBiMCArIGEzICogYjE7XG4gIG91dFsyXSA9IGEwICogYjIgKyBhMiAqIGIzO1xuICBvdXRbM10gPSBhMSAqIGIyICsgYTMgKiBiMztcbiAgb3V0WzRdID0gYTAgKiBiNCArIGEyICogYjUgKyBhNDtcbiAgb3V0WzVdID0gYTEgKiBiNCArIGEzICogYjUgKyBhNTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSb3RhdGVzIGEgbWF0MmQgYnkgdGhlIGdpdmVuIGFuZ2xlXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXSxcbiAgICAgIGE0ID0gYVs0XSxcbiAgICAgIGE1ID0gYVs1XTtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGEwICogYyArIGEyICogcztcbiAgb3V0WzFdID0gYTEgKiBjICsgYTMgKiBzO1xuICBvdXRbMl0gPSBhMCAqIC1zICsgYTIgKiBjO1xuICBvdXRbM10gPSBhMSAqIC1zICsgYTMgKiBjO1xuICBvdXRbNF0gPSBhNDtcbiAgb3V0WzVdID0gYTU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2NhbGVzIHRoZSBtYXQyZCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IHRoZSB2ZWMyIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM10sXG4gICAgICBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV07XG4gIHZhciB2MCA9IHZbMF0sXG4gICAgICB2MSA9IHZbMV07XG4gIG91dFswXSA9IGEwICogdjA7XG4gIG91dFsxXSA9IGExICogdjA7XG4gIG91dFsyXSA9IGEyICogdjE7XG4gIG91dFszXSA9IGEzICogdjE7XG4gIG91dFs0XSA9IGE0O1xuICBvdXRbNV0gPSBhNTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc2xhdGVzIHRoZSBtYXQyZCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IHRoZSB2ZWMyIHRvIHRyYW5zbGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAqKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXSxcbiAgICAgIGE0ID0gYVs0XSxcbiAgICAgIGE1ID0gYVs1XTtcbiAgdmFyIHYwID0gdlswXSxcbiAgICAgIHYxID0gdlsxXTtcbiAgb3V0WzBdID0gYTA7XG4gIG91dFsxXSA9IGExO1xuICBvdXRbMl0gPSBhMjtcbiAgb3V0WzNdID0gYTM7XG4gIG91dFs0XSA9IGEwICogdjAgKyBhMiAqIHYxICsgYTQ7XG4gIG91dFs1XSA9IGExICogdjAgKyBhMyAqIHYxICsgYTU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQyZC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDJkLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgbWF0MmQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGM7XG4gIG91dFsxXSA9IHM7XG4gIG91dFsyXSA9IC1zO1xuICBvdXRbM10gPSBjO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciBzY2FsaW5nXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0MmQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQyZC5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgbWF0MmQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tU2NhbGluZyhvdXQsIHYpIHtcbiAgb3V0WzBdID0gdlswXTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gdlsxXTtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3IgdHJhbnNsYXRpb25cclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQyZC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDJkLnRyYW5zbGF0ZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgbWF0MmQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgVHJhbnNsYXRpb24gdmVjdG9yXHJcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uKG91dCwgdikge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICBvdXRbNF0gPSB2WzBdO1xuICBvdXRbNV0gPSB2WzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQyZFxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcIm1hdDJkKFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIsIFwiICsgYVszXSArIFwiLCBcIiArIGFbNF0gKyBcIiwgXCIgKyBhWzVdICsgXCIpXCI7XG59XG4vKipcclxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDJkXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBGcm9iZW5pdXMgbm9ybVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xuICByZXR1cm4gTWF0aC5oeXBvdChhWzBdLCBhWzFdLCBhWzJdLCBhWzNdLCBhWzRdLCBhWzVdLCAxKTtcbn1cbi8qKlxyXG4gKiBBZGRzIHR3byBtYXQyZCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgb3V0WzNdID0gYVszXSArIGJbM107XG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgb3V0WzNdID0gYVszXSAtIGJbM107XG4gIG91dFs0XSA9IGFbNF0gLSBiWzRdO1xuICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIG91dFs0XSA9IGFbNF0gKiBiO1xuICBvdXRbNV0gPSBhWzVdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBBZGRzIHR3byBtYXQyZCdzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiJ3MgZWxlbWVudHMgYnkgYmVmb3JlIGFkZGluZ1xyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcbiAgb3V0WzNdID0gYVszXSArIGJbM10gKiBzY2FsZTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF0gKiBzY2FsZTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV0gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdLFxuICAgICAgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdLFxuICAgICAgYjQgPSBiWzRdLFxuICAgICAgYjUgPSBiWzVdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJiBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSk7XG59XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQyZC5tdWx0aXBseX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0MmQuc3VidHJhY3R9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxyXG4gKiAyIERpbWVuc2lvbmFsIFZlY3RvclxyXG4gKiBAbW9kdWxlIHZlYzJcclxuICovXG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWMyXHJcbiAqXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgyKTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMiBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gY2xvbmVcclxuICogQHJldHVybnMge3ZlYzJ9IGEgbmV3IDJEIHZlY3RvclxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMiBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICogQHJldHVybnMge3ZlYzJ9IGEgbmV3IDJEIHZlY3RvclxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzIgdG8gYW5vdGhlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgc291cmNlIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyIHRvIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIHgsIHkpIHtcbiAgb3V0WzBdID0geDtcbiAgb3V0WzFdID0geTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBBZGRzIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogTXVsdGlwbGllcyB0d28gdmVjMidzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBEaXZpZGVzIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZpZGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjZWlsXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjZWlsKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gZmxvb3JcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzInc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIG1heGltdW0gb2YgdHdvIHZlYzInc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWF4KGFbMV0sIGJbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byByb3VuZFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2NhbGVzIGEgdmVjMiBieSBhIHNjYWxhciBudW1iZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBBZGRzIHR3byB2ZWMyJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIgYnkgYmVmb3JlIGFkZGluZ1xyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXSxcbiAgICAgIHkgPSBiWzFdIC0gYVsxXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSk7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMidzXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWREaXN0YW5jZShhLCBiKSB7XG4gIHZhciB4ID0gYlswXSAtIGFbMF0sXG4gICAgICB5ID0gYlsxXSAtIGFbMV07XG4gIHJldHVybiB4ICogeCArIHkgKiB5O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzJcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSk7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHk7XG59XG4vKipcclxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlKG91dCwgYSkge1xuICBvdXRbMF0gPSAtYVswXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGludmVydFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBOb3JtYWxpemUgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBub3JtYWxpemVcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV07XG4gIHZhciBsZW4gPSB4ICogeCArIHkgKiB5O1xuXG4gIGlmIChsZW4gPiAwKSB7XG4gICAgLy9UT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gIH1cblxuICBvdXRbMF0gPSBhWzBdICogbGVuO1xuICBvdXRbMV0gPSBhWzFdICogbGVuO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXTtcbn1cbi8qKlxyXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMidzXHJcbiAqIE5vdGUgdGhhdCB0aGUgY3Jvc3MgcHJvZHVjdCBtdXN0IGJ5IGRlZmluaXRpb24gcHJvZHVjZSBhIDNEIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyb3NzKG91dCwgYSwgYikge1xuICB2YXIgeiA9IGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF07XG4gIG91dFswXSA9IG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IHo7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV07XG4gIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gdmVjdG9yIHdpdGggdGhlIGdpdmVuIHNjYWxlXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2NhbGVdIExlbmd0aCBvZiB0aGUgcmVzdWx0aW5nIHZlY3Rvci4gSWYgb21taXR0ZWQsIGEgdW5pdCB2ZWN0b3Igd2lsbCBiZSByZXR1cm5lZFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCwgc2NhbGUpIHtcbiAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XG4gIHZhciByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xuICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHNjYWxlO1xuICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQyKG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeTtcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzNdICogeTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQyZFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQyZChvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV07XG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVsyXSAqIHkgKyBtWzRdO1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bM10gKiB5ICsgbVs1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQzXHJcbiAqIDNyZCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MyhvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV07XG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVszXSAqIHkgKyBtWzZdO1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bNF0gKiB5ICsgbVs3XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQ0XHJcbiAqIDNyZCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzAnXHJcbiAqIDR0aCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0NChvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzEyXTtcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bMTNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZSBhIDJEIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzJcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgVGhlIHZlYzIgcG9pbnQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIGIsIHJhZCkge1xuICAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG4gIHZhciBwMCA9IGFbMF0gLSBiWzBdLFxuICAgICAgcDEgPSBhWzFdIC0gYlsxXSxcbiAgICAgIHNpbkMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgY29zQyA9IE1hdGguY29zKHJhZCk7IC8vcGVyZm9ybSByb3RhdGlvbiBhbmQgdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cblxuICBvdXRbMF0gPSBwMCAqIGNvc0MgLSBwMSAqIHNpbkMgKyBiWzBdO1xuICBvdXRbMV0gPSBwMCAqIHNpbkMgKyBwMSAqIGNvc0MgKyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gMkQgdmVjdG9yc1xyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSBUaGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiBUaGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhbmdsZShhLCBiKSB7XG4gIHZhciB4MSA9IGFbMF0sXG4gICAgICB5MSA9IGFbMV0sXG4gICAgICB4MiA9IGJbMF0sXG4gICAgICB5MiA9IGJbMV0sXG4gICAgICAvLyBtYWcgaXMgdGhlIHByb2R1Y3Qgb2YgdGhlIG1hZ25pdHVkZXMgb2YgYSBhbmQgYlxuICBtYWcgPSBNYXRoLnNxcnQoeDEgKiB4MSArIHkxICogeTEpICogTWF0aC5zcXJ0KHgyICogeDIgKyB5MiAqIHkyKSxcbiAgICAgIC8vIG1hZyAmJi4uIHNob3J0IGNpcmN1aXRzIGlmIG1hZyA9PSAwXG4gIGNvc2luZSA9IG1hZyAmJiAoeDEgKiB4MiArIHkxICogeTIpIC8gbWFnOyAvLyBNYXRoLm1pbihNYXRoLm1heChjb3NpbmUsIC0xKSwgMSkgY2xhbXBzIHRoZSBjb3NpbmUgYmV0d2VlbiAtMSBhbmQgMVxuXG4gIHJldHVybiBNYXRoLmFjb3MoTWF0aC5taW4oTWF0aC5tYXgoY29zaW5lLCAtMSksIDEpKTtcbn1cbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyIHRvIHplcm9cclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8ob3V0KSB7XG4gIG91dFswXSA9IDAuMDtcbiAgb3V0WzFdID0gMC4wO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcInZlYzIoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiKVwiO1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgZXhhY3RseSBoYXZlIHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdO1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXTtcbiAgdmFyIGIwID0gYlswXSxcbiAgICAgIGIxID0gYlsxXTtcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSk7XG59XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLmxlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3VidHJhY3R9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuZGl2aWRlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5kaXN0YW5jZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZERpc3RhbmNlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZExlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG4vKipcclxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzIuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjMnMgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gYVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHZlYyA9IGNyZWF0ZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIHN0cmlkZSwgb2Zmc2V0LCBjb3VudCwgZm4sIGFyZykge1xuICAgIHZhciBpLCBsO1xuXG4gICAgaWYgKCFzdHJpZGUpIHtcbiAgICAgIHN0cmlkZSA9IDI7XG4gICAgfVxuXG4gICAgaWYgKCFvZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGNvdW50KSB7XG4gICAgICBsID0gTWF0aC5taW4oY291bnQgKiBzdHJpZGUgKyBvZmZzZXQsIGEubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbCA9IGEubGVuZ3RoO1xuICAgIH1cblxuICAgIGZvciAoaSA9IG9mZnNldDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICB2ZWNbMF0gPSBhW2ldO1xuICAgICAgdmVjWzFdID0gYVtpICsgMV07XG4gICAgICBmbih2ZWMsIHZlYywgYXJnKTtcbiAgICAgIGFbaV0gPSB2ZWNbMF07XG4gICAgICBhW2kgKyAxXSA9IHZlY1sxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcbn0oKTsiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzKGNvbnRhaW5lcikge1xuICAgIGNvbnN0IGNhbnZhc0VsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjb25zdCByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNhbnZhc0VsZW0ud2lkdGggPSByZWN0LndpZHRoO1xuICAgIGNhbnZhc0VsZW0uaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNhbnZhc0VsZW0pO1xuICAgIGNhbnZhc0VsZW0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGNvbnN0IGNvbnRleHQyZCA9IGNhbnZhc0VsZW0uZ2V0Q29udGV4dCgnMmQnKTtcbiAgICByZXR1cm4geyBjYW52YXM6IGNhbnZhc0VsZW0sIGNvbnRleHQyZCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJDYW52YXMoY3R4LCBjYW52YXNFbGVtKSB7XG4gICAgY3R4LmNsZWFyQ29tbWFuZHMgJiYgY3R4LmNsZWFyQ29tbWFuZHMoKTtcbiAgICBjb25zdCB3aWR0aCA9IGNhbnZhc0VsZW0ud2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzRWxlbS5oZWlnaHQ7XG4gICAgY3R4LnNldFRyYW5zZm9ybSgpO1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUcmFuc2Zvcm0oY3R4LCBtdHgpIHtcbiAgICBjdHguc2V0VHJhbnNmb3JtKG10eFswXSwgbXR4WzFdLCBtdHhbMl0sIG10eFszXSwgbXR4WzRdLCBtdHhbNV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveUNhbnZhcyhjb250YWluZXIsIGNhbnZhcykge1xuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjYW52YXMpO1xufVxuLy8gZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlbmRlckVmZmVjdCh0YXJnZXQsIG10eCkge1xuLy8gICAgIGNvbnN0IHtcbi8vICAgICAgICAgY29udGV4dDJkLFxuLy8gICAgICAgICBjYW52YXNFbG0sXG4vLyAgICAgfSA9IHRhcmdldDtcbi8vICAgICBjbGVhckNhbnZhcyhjb250ZXh0MmQsIGNhbnZhc0VsbSk7XG4vLyAgICAgc2V0VHJhbnNmb3JtKGNvbnRleHQyZCwgbXR4KTtcbi8vICAgICB0YXJnZXQucmVuZGVyKCk7XG4vLyB9IiwiLypcbiAqIEVhc2luZyBGdW5jdGlvbnMgLSBpbnNwaXJlZCBmcm9tIGh0dHA6Ly9naXptYS5jb20vZWFzaW5nL1xuICogb25seSBjb25zaWRlcmluZyB0aGUgdCB2YWx1ZSBmb3IgdGhlIHJhbmdlIFswLCAxXSA9PiBbMCwgMV1cbiAqL1xuZXhwb3J0IGNvbnN0IEVhc2luZ0Z1bmN0aW9ucyA9IHtcbiAgICAvLyBubyBlYXNpbmcsIG5vIGFjY2VsZXJhdGlvblxuICAgIGxpbmVhcjogdCA9PiB0LFxuICAgIGxpbmVhckl2OiBzID0+IHMsXG4gICAgLy8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuICAgIGVhc2VJblF1YWQ6IHQgPT4gdCp0LFxuICAgIGVhc2VJblF1YWRJdjogcyA9PiBNYXRoLnNxcnQocyksXG4gICAgLy8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHlcbiAgICBlYXNlT3V0UXVhZDogdCA9PiB0KigyLXQpLFxuICAgIC8vICAgZWFzZUluUXVhZEl2OiB0ID0+IFxuICAgIC8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvblxuICAgIGVhc2VJbk91dFF1YWQ6IHQgPT4gdDwuNSA/IDIqdCp0IDogLTErKDQtMip0KSp0LFxuICAgIC8vIGFjY2VsZXJhdGluZyBmcm9tIHplcm8gdmVsb2NpdHkgXG4gICAgZWFzZUluQ3ViaWM6IHQgPT4gdCp0KnQsXG4gICAgLy8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHkgXG4gICAgZWFzZU91dEN1YmljOiB0ID0+ICgtLXQpKnQqdCsxLFxuICAgIC8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvbiBcbiAgICBlYXNlSW5PdXRDdWJpYzogdCA9PiB0PC41ID8gNCp0KnQqdCA6ICh0LTEpKigyKnQtMikqKDIqdC0yKSsxLFxuICAgIC8vIGFjY2VsZXJhdGluZyBmcm9tIHplcm8gdmVsb2NpdHkgXG4gICAgZWFzZUluUXVhcnQ6IHQgPT4gdCp0KnQqdCxcbiAgICAvLyBkZWNlbGVyYXRpbmcgdG8gemVybyB2ZWxvY2l0eSBcbiAgICBlYXNlT3V0UXVhcnQ6IHQgPT4gMS0oLS10KSp0KnQqdCxcbiAgICAvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cbiAgICBlYXNlSW5PdXRRdWFydDogdCA9PiB0PC41ID8gOCp0KnQqdCp0IDogMS04KigtLXQpKnQqdCp0LFxuICAgIC8vIGFjY2VsZXJhdGluZyBmcm9tIHplcm8gdmVsb2NpdHlcbiAgICBlYXNlSW5RdWludDogdCA9PiB0KnQqdCp0KnQsXG4gICAgLy8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHlcbiAgICBlYXNlT3V0UXVpbnQ6IHQgPT4gMSsoLS10KSp0KnQqdCp0LFxuICAgIC8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvbiBcbiAgICBlYXNlSW5PdXRRdWludDogdCA9PiB0PC41ID8gMTYqdCp0KnQqdCp0IDogMSsxNiooLS10KSp0KnQqdCp0XG59OyIsImltcG9ydCB7IEVhc2luZ0Z1bmN0aW9ucyB9IGZyb20gJy4vZWFzaW5nJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VSZW5kZXJDYWxsYmFjayhyZW5kZXJGdW5jKSB7XG4gICAgbGV0IGQgPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYoIWQpIHtcbiAgICAgICAgICAgIGQgPSByZW5kZXJGdW5jO1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICBkKCk7XG4gICAgICAgICAgICAgICAgZCA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGUoe1xuICAgIGVhc2luZ0Z1bmMsXG4gICAgZHVyYXRpb24sXG4gICAgZnBzLFxuICAgIHJlbmRlckNhbGxiYWNrLFxufSwgY2FsbGJhY2spIHtcbiAgICBsZXQgc3RhcnQ7XG4gICAgbGV0IGVsYXBzZWQ7XG4gICAgbGV0IGxhc3RGcmFtZSA9IDA7XG4gICAgY29uc3QgaW50ZXJ2YWwgPSAxMDAwIC8gZnBzO1xuICAgIGxldCBhbmltYXRpb25JZCA9IG51bGw7XG4gICAgZnVuY3Rpb24gc3RlcCh0aW1lc3RhbXApIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdGFydCA9IHRpbWVzdGFtcDtcbiAgICAgICAgfVxuICAgICAgICBlbGFwc2VkID0gdGltZXN0YW1wIC0gc3RhcnQ7XG4gICAgICAgIGlmKHRpbWVzdGFtcCAtIGxhc3RGcmFtZSA8IGludGVydmFsKSB7XG4gICAgICAgICAgICBhbmltYXRpb25JZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByYXRpbyA9IGVhc2luZ0Z1bmMoZWxhcHNlZCAvIGR1cmF0aW9uKTtcbiAgICAgICAgaWYgKHJhdGlvID49IDEpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCdlbmQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHJhdGlvKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbklkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICAgICAgICB9IFxuICAgICAgICByZW5kZXJDYWxsYmFjaygpO1xuXG4gICAgICAgIGxhc3RGcmFtZSA9IHRpbWVzdGFtcDtcbiAgICB9XG4gICAgYW5pbWF0aW9uSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gICAgXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RvcCgpIHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbklkKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0T25OdW1iZXJFbGVtZW50KG5ld1N0YXRlLCBvbGRTdGF0ZSwgaWR4LCByYXRpbywgY3VycmVudEFycmF5KSB7XG4gICAgaWYocmF0aW8gPT09ICdlbmQnKSB7XG4gICAgICAgIGN1cnJlbnRBcnJheVtpZHhdID0gbmV3U3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudEFycmF5W2lkeF0gPSBvbGRTdGF0ZSArIChvbGRTdGF0ZS1uZXdTdGF0ZSkgKiByYXRpbztcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBbmltZUFycmF5IHtcbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIHN0YXJ0QXJyYXkgPSBbXSxcbiAgICAgICAgZGVmYXVsdE51bWJlciA9IDAsXG4gICAgICAgIGVhc2luZ0Z1bmMgPSAnZWFzZUluUXVhZCcsXG4gICAgICAgIGZwcyA9IDYwLFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAga2V5LFxuICAgICAgICBjYWxsYmFja09uRWxlbWVudCA9IGRlZmF1bHRPbk51bWJlckVsZW1lbnQsXG4gICAgICAgIGNhbGxCYWNrT25NYWtlVXAgPSBmdW5jdGlvbih2KSB7cmV0dXJuIHY7fSxcbiAgICAgICAgcmVuZGVyQ2FsbGJhY2ssXG4gICAgfSkge1xuICAgICAgICB0aGlzLl9fYXJyYXkgPSBzdGFydEFycmF5OyBcbiAgICAgICAgdGhpcy5kZWZhdWx0TnVtYmVyID0gZGVmYXVsdE51bWJlcjtcbiAgICAgICAgdGhpcy5hbmltZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBlYXNpbmdGdW5jOiBFYXNpbmdGdW5jdGlvbnNbZWFzaW5nRnVuY10sXG4gICAgICAgICAgICBmcHMsIGR1cmF0aW9uLFxuICAgICAgICAgICAgcmVuZGVyQ2FsbGJhY2tcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fX2FuaW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tPbkVsZW1lbnQgPSBjYWxsYmFja09uRWxlbWVudDtcbiAgICAgICAgdGhpcy5jYWxsQmFja09uTWFrZVVwID0gY2FsbEJhY2tPbk1ha2VVcDtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9fYXJyYXk7XG4gICAgfVxuXG4gICAgYW5pbWVUbyhuZXdBcnJheSkge1xuICAgICAgICBpZih0aGlzLl9fYW5pbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX19hbmltZS5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbGV0IHVzZWxlc3NBcnJheSA9IG51bGw7XG4gICAgICAgIGxldCBzbGljZUxlbmd0aCA9IG51bGw7XG4gICAgICAgIGlmKHRoaXMua2V5KSB7ICAgXG4gICAgICAgICAgICBjb25zdCBrID0gdGhpcy5rZXk7XG4gICAgICAgICAgICBjb25zdCBwID0gW107XG4gICAgICAgICAgICBuZXdBcnJheS5mb3JFYWNoKGVsZW0gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbmRlZCA9IHRoaXMuX19hcnJheS5maW5kKF9fZWxlbSA9PiBfX2VsZW1ba10gPT09IGVsZW1ba10pO1xuICAgICAgICAgICAgICAgIGlmKGZpbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICBwLnB1c2goZmluZGVkKTtcbiAgICAgICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHAucHVzaChlbGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX19hcnJheSA9IHA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsQmFja09uTWFrZVVwID0gdGhpcy5jYWxsQmFja09uTWFrZVVwO1xuICAgICAgICAgICAgY29uc3Qgc3BhbiA9IG5ld0FycmF5Lmxlbmd0aCAtIHRoaXMuX19hcnJheS5sZW5ndGg7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHNwYW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmF0aW8gPSB0aGlzLl9fYXJyYXkubGVuZ3RoID4gMCA/IG5ld0FycmF5Lmxlbmd0aCAvIHRoaXMuX19hcnJheS5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ha2V1cCA9IG5ld0FycmF5LnNsaWNlKHRoaXMuX19hcnJheS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX19hcnJheSA9IHRoaXMuX19hcnJheS5jb25jYXQoY2FsbEJhY2tPbk1ha2VVcChtYWtldXAsIHJhdGlvLCBuZXdBcnJheVswXSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihzcGFuIDwgMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGlvID0gbmV3QXJyYXkubGVuZ3RoID4gMCA/IHRoaXMuX19hcnJheS5sZW5ndGggLyBuZXdBcnJheS5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgIHNsaWNlTGVuZ3RoID0gbmV3QXJyYXkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIG5ld0FycmF5ID0gbmV3QXJyYXkuY29uY2F0KGNhbGxCYWNrT25NYWtlVXAodGhpcy5fX2FycmF5LnNsaWNlKG5ld0FycmF5Lmxlbmd0aCksIHJhdGlvLCB0aGlzLl9fYXJyYXlbMF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYmVnaW5TdGF0ZSA9IHRoaXMuX19hcnJheS5zbGljZSgpO1xuICAgICAgICBjb25zdCBjYWxsYmFja09uRWxlbWVudCA9IHRoaXMuY2FsbGJhY2tPbkVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX19hbmltZSA9IGFuaW1hdGUodGhpcy5hbmltZU9wdGlvbnMsIChyYXRpbykgPT4ge1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgY29uc3QgbCA9IHRoaXMuX19hcnJheS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IoO2kgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja09uRWxlbWVudChuZXdBcnJheVtpXSwgYmVnaW5TdGF0ZVtpXSwgaSwgcmF0aW8sIHRoaXMuX19hcnJheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihyYXRpbyA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICBpZihzbGljZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fYXJyYXkgPSB0aGlzLl9fYXJyYXkuc2xpY2UoMCwgc2xpY2VMZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBbmltZU51bWJlciB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBzdGFydE51bWJlciA9IDAsXG4gICAgICAgIGVhc2luZ0Z1bmMgPSAnZWFzZUluUXVhZCcsXG4gICAgICAgIGZwcyA9IDYwLFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgcmVuZGVyQ2FsbGJhY2tcbiAgICB9KSB7XG4gICAgICAgIC8vIFtudW1iZXIsIG51bWJlciAuLi4uXVxuICAgICAgICB0aGlzLl9fbnVtYmVyID0gc3RhcnROdW1iZXI7IFxuICAgICAgICB0aGlzLmFuaW1lT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGVhc2luZ0Z1bmM6IEVhc2luZ0Z1bmN0aW9uc1tlYXNpbmdGdW5jXSxcbiAgICAgICAgICAgIGZwcywgZHVyYXRpb24sXG4gICAgICAgICAgICByZW5kZXJDYWxsYmFja1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9fYW5pbWUgPSBudWxsO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5fX251bWJlcjtcbiAgICB9XG5cbiAgICBhbmltZVRvKG5ld051bWJlcikge1xuICAgICAgICBpZih0aGlzLl9fYW5pbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX19hbmltZS5zdG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihuZXdOdW1iZXIgPT09IHRoaXMuX19udW1iZXIpIHJldHVybjtcblxuICAgICAgICBjb25zdCBzcGFuID0gbmV3TnVtYmVyIC0gdGhpcy5fX251bWJlcjtcbiAgICAgICAgY29uc3QgbGFzdE51bWJlciA9IHRoaXMuX19udW1iZXI7XG4gICAgICAgIHRoaXMuX19hbmltZSA9IGFuaW1hdGUodGhpcy5hbmltZU9wdGlvbnMsIChyYXRpbykgPT4ge1xuICAgICAgICAgICAgaWYocmF0aW8gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX251bWJlciA9IG5ld051bWJlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX251bWJlciA9IGxhc3ROdW1iZXIgKyBzcGFuICogcmF0aW87XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgbWF0MmQsIHZlYzIsXG59IGZyb20gJ2dsLW1hdHJpeCc7XG5pbXBvcnQgeyBzZXRUcmFuc2Zvcm0gfSBmcm9tICcuLi8uLi9jb250ZXh0L3V0aWxzJztcbmltcG9ydCB7IEFuaW1lQXJyYXksIEFuaW1lTnVtYmVyLCBtYWtlUmVuZGVyQ2FsbGJhY2sgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vYW5pbWUnO1xuY29uc3QgY2FjaGVDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbmNvbnN0IGNhY2hoQ2FudmFzQ29udGV4dCA9IGNhY2hlQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbmNsYXNzIENvb3JkMkR7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubmFtZSA9ICdDb29yZDJEJztcbiAgICAgICAgdGhpcy5hbmltYXRpb25Db250ZXh0ID0ge307XG4gICAgfVxuXG4gICAgYXBwbHkoZ2xvYmFsQ3R4KSB7XG4gICAgICAgIGdsb2JhbEN0eC5Db29yZGluYXRlLmhvb2tzLmluaXRDb29yZC50YXAodGhpcy5uYW1lLCAoY29udGV4dDJkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmluaXQoY29udGV4dDJkLCBnbG9iYWxDdHgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZ2xvYmFsQ3R4LkNvb3JkaW5hdGUuaG9va3MucmVuZGVyQ29vcmQudGFwKHRoaXMubmFtZSwgKGNvbnRleHQyZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoY29udGV4dDJkLCBnbG9iYWxDdHgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZ2xvYmFsQ3R4LkNvb3JkaW5hdGUuaG9va3MuYWZ0ZXJSZW5kZXJDaGFydC50YXAodGhpcy5uYW1lLCBjb250ZXh0MmQgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZnRlclJlbmRlcihjb250ZXh0MmQsIGdsb2JhbEN0eCk7XG4gICAgICAgIH0pO1xuICAgICAgICBnbG9iYWxDdHguaG9va3MuYWZ0ZXJEYXRhQW5kTGF5b3V0UmVhZHkudGFwKHRoaXMubmFtZSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZUZsb3coZ2xvYmFsQ3R4KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVGbG93KGdsb2JhbEN0eCkge1xuICAgICAgICBnbG9iYWxDdHguZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlZmZlY3QgY29vcmQyZCBsYXlvdXQnKTtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBib3VuZGluZyxcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHguTGF5b3V0O1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSovXG4gICAgICAgICAgICAgICAgbGVnZW5kLCAvLyBkb24ndCByZW1vdmUgISEhISAgZm9yIG5vIGJyZWFrIGZ1bmN0aW9uIGRlcGVuZGFudCBjaGFpblxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5nbG9iYWxEYXRhLnNvdXJjZTtcbiAgICAgICAgICAgIGNvbnN0IGJvdW5kaW5nQm94ID0gZ2xvYmFsQ3R4LmJvdW5kaW5nQm94O1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHhNZXRhLFxuICAgICAgICAgICAgICAgIHlNZXRhLFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5nbG9iYWxEYXRhLnNvdXJjZU1ldGE7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgZm9udFNpemUsXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4LnRoZW1lO1xuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCB5VGV4dFdpZHRoID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHRleHRtaW4gPSB5TWV0YS5mb3JtYXR0ZXIoeU1ldGEubWluKTtcbiAgICAgICAgICAgIGNvbnN0IHRleHRtYXggPSB5TWV0YS5mb3JtYXR0ZXIoeU1ldGEubWF4KTtcbiAgICAgICAgICAgIGNhY2hoQ2FudmFzQ29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICBjYWNoaENhbnZhc0NvbnRleHQuZm9udCA9IGAke2ZvbnRTaXplIC8gMS40fXB4IGFyaWFsYDtcbiAgICAgICAgICAgIGNhY2hoQ2FudmFzQ29udGV4dC5saW5lV2lkdGggPSAxLjQ7XG4gICAgICAgICAgICBjb25zdCB5dGV4dCA9IHRleHRtaW4ubGVuZ3RoID4gdGV4dG1heC5sZW5ndGggPyB0ZXh0bWluIDogdGV4dG1heDtcbiAgICAgICAgICAgIHlUZXh0V2lkdGggPSBjYWNoaENhbnZhc0NvbnRleHQubWVhc3VyZVRleHQoYCR7eXRleHR9MDAwYCkud2lkdGg7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh5dGV4dCwgeVRleHRXaWR0aCk7XG4gICAgICAgICAgICBjYWNoaENhbnZhc0NvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICAgICAgY29uc3Qgc3Bhbkhvcml6b250YWwgPSBib3VuZGluZ0JveC53aWR0aCAtIGJvdW5kaW5nLmxlZnQgLSBib3VuZGluZy5yaWdodCAtIHlUZXh0V2lkdGg7XG4gICAgICAgICAgICBjb25zdCBzcGFuVmVydGljYWwgPSBib3VuZGluZ0JveC5oZWlnaHQgLSBib3VuZGluZy50b3AgLSBib3VuZGluZy5ib3R0b207XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHguZ2xvYmFsRGF0YS5zb3VyY2U7XG4gICAgICAgICAgICBsZXQgc2VyaWVzX3NpemUgPSAwO1xuICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgIHNlcmllc19zaXplID0gTWF0aC5tYXgoZC5sZW5ndGgsIHNlcmllc19zaXplKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgc3Bhbkhvcml6b250YWx3aXRocGFkZGluZyA9IChzcGFuSG9yaXpvbnRhbCAtIGJvdW5kaW5nLnhGbG9hdCAqIDIpO1xuICAgICAgICAgICAgbGV0IHNlcmllc1N0ZXAgPSBzcGFuSG9yaXpvbnRhbHdpdGhwYWRkaW5nIC8gc2VyaWVzX3NpemU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBtdHggPSBtYXQyZC5mcm9tVmFsdWVzKDEsIDAsIDAsIDEsIGJvdW5kaW5nLmxlZnQgKyB5VGV4dFdpZHRoLCBib3VuZGluZy50b3ApO1xuICAgICAgICAgICAgY29uc3QgaW10eCA9IG1hdDJkLmNyZWF0ZSgpO1xuICAgICAgICAgICAgbWF0MmQuaW52ZXJ0KGltdHgsIG10eCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGdsb2JhbEN0eC5MYXlvdXQsIHtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVNdHg6IG10eCxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVNdHhJbnZlcnQ6IGltdHgsXG4gICAgICAgICAgICAgICAgc3Bhbkhvcml6b250YWwsIFxuICAgICAgICAgICAgICAgIHNwYW5WZXJ0aWNhbCxcbiAgICAgICAgICAgICAgICBzZXJpZXNTdGVwLFxuICAgICAgICAgICAgICAgIHhTdGVwOiAoc3Bhbkhvcml6b250YWwgLSBib3VuZGluZy54RmxvYXQgKiAyKSAvICh4TWV0YS52YWx1ZXMubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICAgICAgeFNjYWxlcjogKHNwYW5Ib3Jpem9udGFsIC0gYm91bmRpbmcueEZsb2F0ICogMikgLyAoeE1ldGEubWF4IC0geE1ldGEubWluKSxcbiAgICAgICAgICAgICAgICB5U3RlcDogc3BhblZlcnRpY2FsIC8gKHlNZXRhLnZhbHVlcy5sZW5ndGggLSAxKSxcbiAgICAgICAgICAgICAgICB5U2NhbGVyOiBzcGFuVmVydGljYWwgLyAoeU1ldGEubWF4IC0geU1ldGEubWluKSxcbiAgICAgICAgICAgICAgICBsZWZ0OiBib3VuZGluZy5sZWZ0ICsgeVRleHRXaWR0aCxcbiAgICAgICAgICAgICAgICByaWdodDogYm91bmRpbmdCb3gud2lkdGggLSBib3VuZGluZy5sZWZ0IC0geVRleHRXaWR0aCxcbiAgICAgICAgICAgICAgICB0b3A6IGJvdW5kaW5nLnRvcCxcbiAgICAgICAgICAgICAgICBib3R0b206IGJvdW5kaW5nQm94LmhlaWdodCAtIGJvdW5kaW5nLmJvdHRvbSxcbiAgICAgICAgICAgICAgICB4RmxvYXQ6IGJvdW5kaW5nLnhGbG9hdCxcbiAgICAgICAgICAgICAgICByYXdTcGFuSG9yaXpvbnRhbDogYm91bmRpbmdCb3gud2lkdGggLSBib3VuZGluZy5sZWZ0IC0gYm91bmRpbmcucmlnaHQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGdsb2JhbEN0eC5MYXlvdXQpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXQoY29udGV4dDJkLCBnbG9iYWxDdHgpIHtcbiAgICAgICAgY29uc3QgcmVuZGVyID0gY29udGV4dDJkLnJlbmRlci5iaW5kKGNvbnRleHQyZCk7XG4gICAgICAgIGNvbnN0IHJlbmRlckNhbGxiYWNrID0gbWFrZVJlbmRlckNhbGxiYWNrKHJlbmRlcik7XG4gICAgICAgIGdsb2JhbEN0eC5lZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2VmZmVjdCBpbml0IGNvb3JkJyk7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgbGVnZW5kLFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5nbG9iYWxEYXRhLnNvdXJjZTtcblxuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHhNZXRhLFxuICAgICAgICAgICAgICAgIHlNZXRhLFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5nbG9iYWxEYXRhLnNvdXJjZU1ldGE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIOayoeacieWPr+aYvuekuueahGxlZ2VuZCDkuI3pnIDopoHph43nu5jlnZDmoIfns7tcbiAgICAgICAgICAgIGNvbnN0IGRpc2FibGVkTnVtID0gbGVnZW5kLmZpbHRlcihsID0+IGwuZGlzYWJsZWQpLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGxlZ2VuZE51bSA9IGxlZ2VuZC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoZGlzYWJsZWROdW0gPT09IGxlZ2VuZE51bSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZU10eCxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVNdHhJbnZlcnQsXG4gICAgICAgICAgICAgICAgc3Bhbkhvcml6b250YWwsXG4gICAgICAgICAgICAgICAgc3BhblZlcnRpY2FsLFxuICAgICAgICAgICAgICAgIHhGbG9hdCxcbiAgICAgICAgICAgICAgICB4U2NhbGVyLFxuICAgICAgICAgICAgICAgIHlTY2FsZXIsXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4LkxheW91dDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAxICAwICAwICAgICAgICAgICAgfFxuICAgICAgICAgICAgICAgIG10eCA9IERQUk1BVCAqIHRyYW5zbGF0ZU10eCAqIHwgMCAtMSAgc3BhblZlcnRpY2FsIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDAgIDAgIDEgICAgICAgICAgICB8XG4gICAgICAgICAgICAgKi8gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IG10eCA9IG1hdDJkLmZyb21WYWx1ZXMoMSwgMCwgMCwgLTEsIDAsIHNwYW5WZXJ0aWNhbCk7XG4gICAgICAgICAgICBjb25zdCBpbXR4ID0gbWF0MmQuY3JlYXRlKCk7XG4gICAgICAgICAgICBtYXQyZC5pbnZlcnQoaW10eCwgbXR4KTtcbiAgICAgICAgICAgIG1hdDJkLm11bHRpcGx5KGltdHgsIGltdHgsIHRyYW5zbGF0ZU10eEludmVydCk7XG4gICAgICAgICAgICBtYXQyZC5tdWx0aXBseShtdHgsIHRyYW5zbGF0ZU10eCwgbXR4KTtcbiAgICAgICAgICAgIC8vIHdpZHRoRFBJXG4gICAgICAgICAgICBjb25zdCBhID0gbWF0MmQuY3JlYXRlKCk7XG4gICAgICAgICAgICBjb25zdCBpYSA9IG1hdDJkLmNyZWF0ZSgpO1xuICAgICAgICAgICAgbWF0MmQubXVsdGlwbHkoYSwgZ2xvYmFsQ3R4LkRQUk1hdCwgbXR4KTtcbiAgICAgICAgICAgIG1hdDJkLmludmVydChpYSwgYSk7XG5cbiAgICAgICAgICAgIC8vIG9yaWdpbiBwb2ludCAoIGxlZnQgdG9wIHBvaW50IClcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpblZlYyA9IHZlYzIuZnJvbVZhbHVlcygwLCAwKTtcbiAgICAgICAgICAgIHZlYzIudHJhbnNmb3JtTWF0MmQob3JpZ2luVmVjLCBvcmlnaW5WZWMsIGltdHgpO1xuXG4gICAgICAgICAgICAvLyBvcmlnaW4gcG9pbnQgKCByaWdodCBib3R0b20gcG9pbnQgKVxuICAgICAgICAgICAgY29uc3QgYm9yZGVyVmVjID0gdmVjMi5mcm9tVmFsdWVzKHNwYW5Ib3Jpem9udGFsLCBzcGFuVmVydGljYWwpO1xuICAgICAgICAgICAgdmVjMi50cmFuc2Zvcm1NYXQyZChib3JkZXJWZWMsIGJvcmRlclZlYywgaW10eCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnREYXRhVG9Db29yZFggPSB4ID0+ICh4IC0geE1ldGEubWluKSAqIHhTY2FsZXIgKyB4RmxvYXQ7XG4gICAgICAgICAgICBjb25zdCBjb252ZXJ0RGF0YVRvQ29vcmRZID0geSA9PiAoeSAtIHlNZXRhLm1pbikgKiB5U2NhbGVyO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGdsb2JhbEN0eC5Db29yZGluYXRlLnRyYW5zZm9ybU1ldGEsIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5WZWMsXG4gICAgICAgICAgICAgICAgYm9yZGVyVmVjLFxuICAgICAgICAgICAgICAgIHhBeGlzWTogTWF0aC5tYXgoMCwgY29udmVydERhdGFUb0Nvb3JkWSgwKSksXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtTXR4UmF3OiBtYXQyZC5jbG9uZShtdHgpLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU10eFJhd0ludmVydDogbWF0MmQuY2xvbmUoaW10eCksXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtTXR4OiBtYXQyZC5jbG9uZShhKSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1NdHhJbnZlcnQ6IG1hdDJkLmNsb25lKGlhKSxcbiAgICAgICAgICAgICAgICBjb252ZXJ0RGF0YVRvQ29vcmRYLFxuICAgICAgICAgICAgICAgIGNvbnZlcnREYXRhVG9Db29yZFksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGlmKCF0aGlzLmFuaW1hdGlvbkNvbnRleHQueUF4aXMpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRleHQueUF4aXMgPSBuZXcgQW5pbWVBcnJheSh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0QXJyYXk6IHRoaXMuZ2V0TmV3WUF4aXMoZ2xvYmFsQ3R4KSxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDU1MCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnbmFtZScsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja09uRWxlbWVudChuZXdTdGF0ZSwgb2xkU3RhdGUsIGlkeCwgcmF0aW8sIGN1cnJlbnRBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYocmF0aW8gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEFycmF5W2lkeF0gPSB7Li4ubmV3U3RhdGV9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QXJyYXlbaWR4XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmV3U3RhdGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG9sZFN0YXRlLnZhbHVlICsgKG5ld1N0YXRlLnZhbHVlLW9sZFN0YXRlLnZhbHVlKSAqIHJhdGlvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250dmVjWDogb2xkU3RhdGUuZm9udHZlY1ggKyAobmV3U3RhdGUuZm9udHZlY1gtb2xkU3RhdGUuZm9udHZlY1gpICogcmF0aW8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnR2ZWNZOiBvbGRTdGF0ZS5mb250dmVjWSArIChuZXdTdGF0ZS5mb250dmVjWS1vbGRTdGF0ZS5mb250dmVjWSkgKiByYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRleHQueEF4aXNZID0gbmV3IEFuaW1lTnVtYmVyKHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnROdW1iZXI6IE1hdGgubWF4KDAsIGNvbnZlcnREYXRhVG9Db29yZFkoMCkpLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTUwLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJDYWxsYmFjayxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0TmV3WUF4aXMoZ2xvYmFsQ3R4KSB7XG4gICAgICAgIGNvbnN0IHhBeGlzYm90dG9tID0gZ2xvYmFsQ3R4LnRoZW1lLmZvbnRTaXplLzI7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybU10eFJhdyA9IGdsb2JhbEN0eC5Db29yZGluYXRlLnRyYW5zZm9ybU1ldGEudHJhbnNmb3JtTXR4UmF3O1xuICAgICAgICBjb25zdCB5U3RlcCA9IGdsb2JhbEN0eC5MYXlvdXQueVN0ZXA7XG4gICAgICAgIHJldHVybiBnbG9iYWxDdHguZ2xvYmFsRGF0YS5zb3VyY2VNZXRhLnlNZXRhLnZhbHVlcy5zbGljZSgpLm1hcCgodGFyZ2V0LCBpZHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0geVN0ZXAgKiBpZHg7XG4gICAgICAgICAgICBjb25zdCB2ZWMgPSB2ZWMyLmZyb21WYWx1ZXMoLXhBeGlzYm90dG9tLCB2YWx1ZSk7XG4gICAgICAgICAgICB2ZWMyLnRyYW5zZm9ybU1hdDJkKHZlYywgdmVjLCB0cmFuc2Zvcm1NdHhSYXcpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgZm9udHZlY1g6IHZlY1swXSxcbiAgICAgICAgICAgICAgICBmb250dmVjWTogdmVjWzFdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZHJhd0dyaWQoY3R4LCBnbG9iYWxDdHgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3Bhbkhvcml6b250YWwsXG4gICAgICAgIH0gPSBnbG9iYWxDdHguTGF5b3V0O1xuICAgICAgICBjdHguZnVuY3Rpb25DYWxsV2l0aExvb3BpbmcoXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0aW9uQ29udGV4dC55QXhpcy52YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoY3R4LCBsb29wVGFyZ2V0LCB2KSA9PiB7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oMCwgdi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbyhzcGFuSG9yaXpvbnRhbCwgdi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgfSk7ICAgICAgXG4gICAgfVxuXG4gICAgZHJhd0F4aXMoY3R4LCBnbG9iYWxDdHgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgeE1ldGEsXG4gICAgICAgICAgICB5TWV0YSxcbiAgICAgICAgfSA9IGdsb2JhbEN0eC5nbG9iYWxEYXRhLnNvdXJjZU1ldGE7XG4gICAgICAgIGNvbnN0IERQUk1hdCA9IGdsb2JhbEN0eC5EUFJNYXQ7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNwYW5Ib3Jpem9udGFsLFxuICAgICAgICAgICAgc3BhblZlcnRpY2FsLFxuICAgICAgICAgICAgeFN0ZXAsXG4gICAgICAgIH0gPSBnbG9iYWxDdHguTGF5b3V0O1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1NdHhSYXcsXG4gICAgICAgICAgICBjb252ZXJ0RGF0YVRvQ29vcmRYLFxuICAgICAgICB9ID0gZ2xvYmFsQ3R4LkNvb3JkaW5hdGUudHJhbnNmb3JtTWV0YTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgZm9udFNpemUsXG4gICAgICAgIH0gPSBnbG9iYWxDdHgudGhlbWU7XG4gICAgICAgIFxuICAgICAgICBjdHguZm9udCA9IGAke2ZvbnRTaXplIC8gMS40fXB4IGFyaWFsYDtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyM5OTknO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMS40O1xuXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmZ1bmN0aW9uQ2FsbFdpdGhEeW5hbWljUGFyYW1ldGVyKCdtb3ZlVG8nLFxuICAgICAgICAgICAgc3Bhbkhvcml6b250YWwsXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmFuaW1hdGlvbkNvbnRleHQueEF4aXNZLnZhbHVlKTtcbiAgICAgICAgY3R4LmZ1bmN0aW9uQ2FsbFdpdGhEeW5hbWljUGFyYW1ldGVyKCdsaW5lVG8nLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICgpID0+IHRoaXMuYW5pbWF0aW9uQ29udGV4dC54QXhpc1kudmFsdWUpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG5cblxuICAgICAgICBjdHgubGluZVdpZHRoID0gMC43O1xuICAgICAgICBjdHgubGluZUNhcCA9ICdyb3VuZCc7XG4gICAgICAgIGN0eC5saW5lSm9pbiA9ICdyb3VuZCc7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgc2V0VHJhbnNmb3JtKGN0eCwgRFBSTWF0KTtcbiAgICAgICAgY3R4LmZ1bmN0aW9uQ2FsbFdpdGhMb29waW5nKFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbkNvbnRleHQueUF4aXMudmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGN0eCwgbG9vcFRhcmdldCwgdikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSB5TWV0YS5mb3JtYXR0ZXIodi5uYW1lKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFRleHQodGV4dCwgdi5mb250dmVjWCwgdi5mb250dmVjWSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcblxuICAgICAgICAvLyB46L205pWw5a2XXG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjZThlOGU4JztcbiAgICAgICAgY29uc3QgeFZhbHVlcyA9IHhNZXRhLnZhbHVlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB4VmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB4VmFsdWUgPSB4VmFsdWVzW2ldO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB4VmFsdWUudmFsdWU7XG4gICAgICAgICAgICBjb25zdCB4ID0gY29udmVydERhdGFUb0Nvb3JkWCh2YWx1ZSk7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHgsIDApO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4LCBzcGFuVmVydGljYWwpO1xuXG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY29uc3QgdmVjID0gdmVjMi5mcm9tVmFsdWVzKHgsIC1mb250U2l6ZSk7XG4gICAgICAgICAgICB2ZWMyLnRyYW5zZm9ybU1hdDJkKHZlYywgdmVjLCB0cmFuc2Zvcm1NdHhSYXcpO1xuICAgICAgICAgICAgc2V0VHJhbnNmb3JtKGN0eCwgRFBSTWF0KTtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSB4TWV0YS5mb3JtYXR0ZXIodmFsdWUpO1xuICAgICAgICAgICAgY3R4LndyYXBUZXh0KHRleHQsIHZlY1swXSwgdmVjWzFdLCB4U3RlcCAvIDIsIGZvbnRTaXplKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoY3R4LCBnbG9iYWxDdHgpIHtcbiAgICAgICAgY29uc3QgeyBheGlzIH0gPSBnbG9iYWxDdHgudGhlbWU7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBheGlzLmxpbmVXaWR0aDtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gYXhpcy5zdHJva2VTdHlsZTtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgdGhpcy5kcmF3R3JpZChjdHgsIGdsb2JhbEN0eCk7XG4gICAgICAgIHRoaXMuZHJhd0F4aXMoY3R4LCBnbG9iYWxDdHgpOyBcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcblxuXG4gICAgfVxuXG4gICAgYWZ0ZXJSZW5kZXIoY29udGV4dDJkLCBnbG9iYWxDdHgpIHtcbiAgICAgICAgZ2xvYmFsQ3R4LmVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYWZ0ZXIgZWZmZWN0IGNvb3JkJyk7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRleHQueUF4aXMuYW5pbWVUbyh0aGlzLmdldE5ld1lBeGlzKGdsb2JhbEN0eCkpO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Db250ZXh0LnhBeGlzWS5hbmltZVRvKGdsb2JhbEN0eC5Db29yZGluYXRlLnRyYW5zZm9ybU1ldGEueEF4aXNZKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQ29vcmQyRDsiLCJpbXBvcnQge1xuICAgIG1hdDJkLCB2ZWMyLFxufSBmcm9tICdnbC1tYXRyaXgnO1xuXG5jbGFzcyBHZW8yRHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0dlbzJEJztcbiAgICAgICAgdGhpcy5hbmltYXRpb25Db250ZXh0ID0ge307XG4gICAgfVxuXG4gICAgYXBwbHkoZ2xvYmFsQ3R4KSB7XG4gICAgICAgIGdsb2JhbEN0eC5ob29rcy5hZnRlckRhdGFBbmRMYXlvdXRSZWFkeS50YXAodGhpcy5uYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlRmxvdyhnbG9iYWxDdHgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZ2xvYmFsQ3R4LkNvb3JkaW5hdGUuaG9va3MuaW5pdENvb3JkLnRhcCh0aGlzLm5hbWUsIChjb250ZXh0MmQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdChjb250ZXh0MmQsIGdsb2JhbEN0eCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlRmxvdyhnbG9iYWxDdHgpIHtcbiAgICAgICAgZ2xvYmFsQ3R4LmVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZWZmZWN0IEdlbzJEIGxheW91dCcpO1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIGJvdW5kaW5nXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4LkxheW91dDtcbiAgICAgICAgICAgIGNvbnN0IGJvdW5kaW5nQm94ID0gZ2xvYmFsQ3R4LmJvdW5kaW5nQm94O1xuXG4gICAgICAgICAgICBjb25zdCBtdHggPSBtYXQyZC5mcm9tVmFsdWVzKDEsIDAsIDAsIDEsIGJvdW5kaW5nLmxlZnQsIGJvdW5kaW5nLnRvcCk7XG4gICAgICAgICAgICBjb25zdCBpbXR4ID0gbWF0MmQuY3JlYXRlKCk7XG4gICAgICAgICAgICBtYXQyZC5pbnZlcnQoaW10eCwgbXR4KTtcblxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihnbG9iYWxDdHguTGF5b3V0LCB7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlTXR4OiBtdHgsXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlTXR4SW52ZXJ0OiBpbXR4LFxuICAgICAgICAgICAgICAgIHNwYW5Ib3Jpem9udGFsOiBib3VuZGluZ0JveC53aWR0aCAtIGJvdW5kaW5nLmxlZnQgLSBib3VuZGluZy5yaWdodCxcbiAgICAgICAgICAgICAgICBzcGFuVmVydGljYWw6IGJvdW5kaW5nQm94LmhlaWdodCAtIGJvdW5kaW5nLnRvcCAtIGJvdW5kaW5nLmJvdHRvbVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXQoY29udGV4dDJkLCBnbG9iYWxDdHgpIHtcbiAgICAgICAgZ2xvYmFsQ3R4LmVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZWZmZWN0IGluaXQgY29vcmQnKVxuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZU10eCxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVNdHhJbnZlcnQsXG4gICAgICAgICAgICAgICAgc3Bhbkhvcml6b250YWwsXG4gICAgICAgICAgICAgICAgc3BhblZlcnRpY2FsLFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5MYXlvdXQ7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMSAgMCAgc3Bhbkhvcml6b250YWwvMiB8XG4gICAgICAgICAgICAgICAgbXR4ID0gRFBSTUFUICogdHJhbnNsYXRlTXR4ICogfCAwICAxICBzcGFuVmVydGljYWwvMiAgIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDAgIDAgIDEgICAgICAgICAgICAgICAgfFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IG10eCA9IG1hdDJkLmZyb21WYWx1ZXMoMSwgMCwgMCwgMSwgc3Bhbkhvcml6b250YWwvMiwgc3BhblZlcnRpY2FsLzIpO1xuICAgICAgICAgICAgY29uc3QgaW10eCA9IG1hdDJkLmNyZWF0ZSgpO1xuICAgICAgICAgICAgbWF0MmQuaW52ZXJ0KGltdHgsIG10eCk7XG4gICAgICAgICAgICBtYXQyZC5tdWx0aXBseShtdHgsIHRyYW5zbGF0ZU10eCwgbXR4KTtcbiAgICAgICAgICAgIG1hdDJkLm11bHRpcGx5KGltdHgsIGltdHgsIHRyYW5zbGF0ZU10eEludmVydCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGEgPSBtYXQyZC5jcmVhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGlhID0gbWF0MmQuY3JlYXRlKCk7XG4gICAgICAgICAgICBtYXQyZC5tdWx0aXBseShhLCBnbG9iYWxDdHguRFBSTWF0LCBtdHgpO1xuICAgICAgICAgICAgbWF0MmQuaW52ZXJ0KGlhLCBhKTtcblxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luVmVjID0gdmVjMi5mcm9tVmFsdWVzKHNwYW5Ib3Jpem9udGFsLzIsIHNwYW5WZXJ0aWNhbC8yKTtcbiAgICAgICAgICAgIHZlYzIudHJhbnNmb3JtTWF0MmQob3JpZ2luVmVjLCBvcmlnaW5WZWMsIGltdHgpO1xuXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGdsb2JhbEN0eC5Db29yZGluYXRlLnRyYW5zZm9ybU1ldGEsIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5WZWMsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtTXR4UmF3OiBtYXQyZC5jbG9uZShtdHgpLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU10eFJhd0ludmVydDogbWF0MmQuY2xvbmUoaW10eCksXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtTXR4OiBtYXQyZC5jbG9uZShhKSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1NdHhJbnZlcnQ6IG1hdDJkLmNsb25lKGlhKSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR2VvMkQ7IiwiLyoqXHJcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxyXG4gKiBpcyBpbiB0aGF0IG1hcC5cclxuICogSU1QT1JUQU5UOiBhbGwgY2FsbHMgb2YgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIHByZWZpeGVkIHdpdGhcclxuICogXFwvXFwqI1xcX1xcX1BVUkVcXF9cXF9cXCpcXC9cclxuICogU28gdGhhdCByb2xsdXAgY2FuIHRyZWUtc2hha2UgdGhlbSBpZiBuZWNlc3NhcnkuXHJcbiAqL1xyXG5mdW5jdGlvbiBtYWtlTWFwKHN0ciwgZXhwZWN0c0xvd2VyQ2FzZSkge1xyXG4gICAgY29uc3QgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIGNvbnN0IGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZSA/IHZhbCA9PiAhIW1hcFt2YWwudG9Mb3dlckNhc2UoKV0gOiB2YWwgPT4gISFtYXBbdmFsXTtcclxufVxuXG4vKipcclxuICogZGV2IG9ubHkgZmxhZyAtPiBuYW1lIG1hcHBpbmdcclxuICovXHJcbmNvbnN0IFBhdGNoRmxhZ05hbWVzID0ge1xyXG4gICAgWzEgLyogVEVYVCAqL106IGBURVhUYCxcclxuICAgIFsyIC8qIENMQVNTICovXTogYENMQVNTYCxcclxuICAgIFs0IC8qIFNUWUxFICovXTogYFNUWUxFYCxcclxuICAgIFs4IC8qIFBST1BTICovXTogYFBST1BTYCxcclxuICAgIFsxNiAvKiBGVUxMX1BST1BTICovXTogYEZVTExfUFJPUFNgLFxyXG4gICAgWzMyIC8qIEhZRFJBVEVfRVZFTlRTICovXTogYEhZRFJBVEVfRVZFTlRTYCxcclxuICAgIFs2NCAvKiBTVEFCTEVfRlJBR01FTlQgKi9dOiBgU1RBQkxFX0ZSQUdNRU5UYCxcclxuICAgIFsxMjggLyogS0VZRURfRlJBR01FTlQgKi9dOiBgS0VZRURfRlJBR01FTlRgLFxyXG4gICAgWzI1NiAvKiBVTktFWUVEX0ZSQUdNRU5UICovXTogYFVOS0VZRURfRlJBR01FTlRgLFxyXG4gICAgWzUxMiAvKiBORUVEX1BBVENIICovXTogYE5FRURfUEFUQ0hgLFxyXG4gICAgWzEwMjQgLyogRFlOQU1JQ19TTE9UUyAqL106IGBEWU5BTUlDX1NMT1RTYCxcclxuICAgIFsyMDQ4IC8qIERFVl9ST09UX0ZSQUdNRU5UICovXTogYERFVl9ST09UX0ZSQUdNRU5UYCxcclxuICAgIFstMSAvKiBIT0lTVEVEICovXTogYEhPSVNURURgLFxyXG4gICAgWy0yIC8qIEJBSUwgKi9dOiBgQkFJTGBcclxufTtcblxuLyoqXHJcbiAqIERldiBvbmx5XHJcbiAqL1xyXG5jb25zdCBzbG90RmxhZ3NUZXh0ID0ge1xyXG4gICAgWzEgLyogU1RBQkxFICovXTogJ1NUQUJMRScsXHJcbiAgICBbMiAvKiBEWU5BTUlDICovXTogJ0RZTkFNSUMnLFxyXG4gICAgWzMgLyogRk9SV0FSREVEICovXTogJ0ZPUldBUkRFRCdcclxufTtcblxuY29uc3QgR0xPQkFMU19XSElURV9MSVNURUQgPSAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTixwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSwnICtcclxuICAgICdkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCxNYXRoLE51bWJlcixEYXRlLEFycmF5LCcgK1xyXG4gICAgJ09iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsQmlnSW50JztcclxuY29uc3QgaXNHbG9iYWxseVdoaXRlbGlzdGVkID0gLyojX19QVVJFX18qLyBtYWtlTWFwKEdMT0JBTFNfV0hJVEVfTElTVEVEKTtcblxuY29uc3QgcmFuZ2UgPSAyO1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVGcmFtZShzb3VyY2UsIHN0YXJ0ID0gMCwgZW5kID0gc291cmNlLmxlbmd0aCkge1xyXG4gICAgY29uc3QgbGluZXMgPSBzb3VyY2Uuc3BsaXQoL1xccj9cXG4vKTtcclxuICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb3VudCArPSBsaW5lc1tpXS5sZW5ndGggKyAxO1xyXG4gICAgICAgIGlmIChjb3VudCA+PSBzdGFydCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaSAtIHJhbmdlOyBqIDw9IGkgKyByYW5nZSB8fCBlbmQgPiBjb3VudDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gaiArIDE7XHJcbiAgICAgICAgICAgICAgICByZXMucHVzaChgJHtsaW5lfSR7JyAnLnJlcGVhdChNYXRoLm1heCgzIC0gU3RyaW5nKGxpbmUpLmxlbmd0aCwgMCkpfXwgICR7bGluZXNbal19YCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGogPT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwdXNoIHVuZGVybGluZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gbGluZUxlbmd0aCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KDEsIGVuZCA+IGNvdW50ID8gbGluZUxlbmd0aCAtIHBhZCA6IGVuZCAtIHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArICcgJy5yZXBlYXQocGFkKSArICdeJy5yZXBlYXQobGVuZ3RoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChqID4gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChNYXRoLm1pbihlbmQgLSBjb3VudCwgbGluZUxlbmd0aCksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArICdeJy5yZXBlYXQobGVuZ3RoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IGxpbmVMZW5ndGggKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXMuam9pbignXFxuJyk7XHJcbn1cblxuLyoqXHJcbiAqIE9uIHRoZSBjbGllbnQgd2Ugb25seSBuZWVkIHRvIG9mZmVyIHNwZWNpYWwgY2FzZXMgZm9yIGJvb2xlYW4gYXR0cmlidXRlcyB0aGF0XHJcbiAqIGhhdmUgZGlmZmVyZW50IG5hbWVzIGZyb20gdGhlaXIgY29ycmVzcG9uZGluZyBkb20gcHJvcGVydGllczpcclxuICogLSBpdGVtc2NvcGUgLT4gTi9BXHJcbiAqIC0gYWxsb3dmdWxsc2NyZWVuIC0+IGFsbG93RnVsbHNjcmVlblxyXG4gKiAtIGZvcm1ub3ZhbGlkYXRlIC0+IGZvcm1Ob1ZhbGlkYXRlXHJcbiAqIC0gaXNtYXAgLT4gaXNNYXBcclxuICogLSBub21vZHVsZSAtPiBub01vZHVsZVxyXG4gKiAtIG5vdmFsaWRhdGUgLT4gbm9WYWxpZGF0ZVxyXG4gKiAtIHJlYWRvbmx5IC0+IHJlYWRPbmx5XHJcbiAqL1xyXG5jb25zdCBzcGVjaWFsQm9vbGVhbkF0dHJzID0gYGl0ZW1zY29wZSxhbGxvd2Z1bGxzY3JlZW4sZm9ybW5vdmFsaWRhdGUsaXNtYXAsbm9tb2R1bGUsbm92YWxpZGF0ZSxyZWFkb25seWA7XHJcbmNvbnN0IGlzU3BlY2lhbEJvb2xlYW5BdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKHNwZWNpYWxCb29sZWFuQXR0cnMpO1xyXG4vKipcclxuICogVGhlIGZ1bGwgbGlzdCBpcyBuZWVkZWQgZHVyaW5nIFNTUiB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGluaXRpYWwgbWFya3VwLlxyXG4gKi9cclxuY29uc3QgaXNCb29sZWFuQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzICtcclxuICAgIGAsYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNvbnRyb2xzLGRlZmF1bHQsZGVmZXIsZGlzYWJsZWQsaGlkZGVuLGAgK1xyXG4gICAgYGxvb3Asb3BlbixyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3MsYCArXHJcbiAgICBgY2hlY2tlZCxtdXRlZCxtdWx0aXBsZSxzZWxlY3RlZGApO1xyXG5jb25zdCB1bnNhZmVBdHRyQ2hhclJFID0gL1s+Lz1cIidcXHUwMDA5XFx1MDAwYVxcdTAwMGNcXHUwMDIwXS87XHJcbmNvbnN0IGF0dHJWYWxpZGF0aW9uQ2FjaGUgPSB7fTtcclxuZnVuY3Rpb24gaXNTU1JTYWZlQXR0ck5hbWUobmFtZSkge1xyXG4gICAgaWYgKGF0dHJWYWxpZGF0aW9uQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gYXR0clZhbGlkYXRpb25DYWNoZVtuYW1lXTtcclxuICAgIH1cclxuICAgIGNvbnN0IGlzVW5zYWZlID0gdW5zYWZlQXR0ckNoYXJSRS50ZXN0KG5hbWUpO1xyXG4gICAgaWYgKGlzVW5zYWZlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgdW5zYWZlIGF0dHJpYnV0ZSBuYW1lOiAke25hbWV9YCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGF0dHJWYWxpZGF0aW9uQ2FjaGVbbmFtZV0gPSAhaXNVbnNhZmUpO1xyXG59XHJcbmNvbnN0IHByb3BzVG9BdHRyTWFwID0ge1xyXG4gICAgYWNjZXB0Q2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0JyxcclxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcclxuICAgIGh0bWxGb3I6ICdmb3InLFxyXG4gICAgaHR0cEVxdWl2OiAnaHR0cC1lcXVpdidcclxufTtcclxuLyoqXHJcbiAqIENTUyBwcm9wZXJ0aWVzIHRoYXQgYWNjZXB0IHBsYWluIG51bWJlcnNcclxuICovXHJcbmNvbnN0IGlzTm9Vbml0TnVtZXJpY1N0eWxlUHJvcCA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCxib3JkZXItaW1hZ2Utb3V0c2V0LGJvcmRlci1pbWFnZS1zbGljZSxgICtcclxuICAgIGBib3JkZXItaW1hZ2Utd2lkdGgsYm94LWZsZXgsYm94LWZsZXgtZ3JvdXAsYm94LW9yZGluYWwtZ3JvdXAsY29sdW1uLWNvdW50LGAgK1xyXG4gICAgYGNvbHVtbnMsZmxleCxmbGV4LWdyb3csZmxleC1wb3NpdGl2ZSxmbGV4LXNocmluayxmbGV4LW5lZ2F0aXZlLGZsZXgtb3JkZXIsYCArXHJcbiAgICBgZ3JpZC1yb3csZ3JpZC1yb3ctZW5kLGdyaWQtcm93LXNwYW4sZ3JpZC1yb3ctc3RhcnQsZ3JpZC1jb2x1bW4sYCArXHJcbiAgICBgZ3JpZC1jb2x1bW4tZW5kLGdyaWQtY29sdW1uLXNwYW4sZ3JpZC1jb2x1bW4tc3RhcnQsZm9udC13ZWlnaHQsbGluZS1jbGFtcCxgICtcclxuICAgIGBsaW5lLWhlaWdodCxvcGFjaXR5LG9yZGVyLG9ycGhhbnMsdGFiLXNpemUsd2lkb3dzLHotaW5kZXgsem9vbSxgICtcclxuICAgIC8vIFNWR1xyXG4gICAgYGZpbGwtb3BhY2l0eSxmbG9vZC1vcGFjaXR5LHN0b3Atb3BhY2l0eSxzdHJva2UtZGFzaGFycmF5LHN0cm9rZS1kYXNob2Zmc2V0LGAgK1xyXG4gICAgYHN0cm9rZS1taXRlcmxpbWl0LHN0cm9rZS1vcGFjaXR5LHN0cm9rZS13aWR0aGApO1xyXG4vKipcclxuICogS25vd24gYXR0cmlidXRlcywgdGhpcyBpcyB1c2VkIGZvciBzdHJpbmdpZmljYXRpb24gb2YgcnVudGltZSBzdGF0aWMgbm9kZXNcclxuICogc28gdGhhdCB3ZSBkb24ndCBzdHJpbmdpZnkgYmluZGluZ3MgdGhhdCBjYW5ub3QgYmUgc2V0IGZyb20gSFRNTC5cclxuICogRG9uJ3QgYWxzbyBmb3JnZXQgdG8gYWxsb3cgYGRhdGEtKmAgYW5kIGBhcmlhLSpgIVxyXG4gKiBHZW5lcmF0ZWQgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0F0dHJpYnV0ZXNcclxuICovXHJcbmNvbnN0IGlzS25vd25BdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKGBhY2NlcHQsYWNjZXB0LWNoYXJzZXQsYWNjZXNza2V5LGFjdGlvbixhbGlnbixhbGxvdyxhbHQsYXN5bmMsYCArXHJcbiAgICBgYXV0b2NhcGl0YWxpemUsYXV0b2NvbXBsZXRlLGF1dG9mb2N1cyxhdXRvcGxheSxiYWNrZ3JvdW5kLGJnY29sb3IsYCArXHJcbiAgICBgYm9yZGVyLGJ1ZmZlcmVkLGNhcHR1cmUsY2hhbGxlbmdlLGNoYXJzZXQsY2hlY2tlZCxjaXRlLGNsYXNzLGNvZGUsYCArXHJcbiAgICBgY29kZWJhc2UsY29sb3IsY29scyxjb2xzcGFuLGNvbnRlbnQsY29udGVudGVkaXRhYmxlLGNvbnRleHRtZW51LGNvbnRyb2xzLGAgK1xyXG4gICAgYGNvb3Jkcyxjcm9zc29yaWdpbixjc3AsZGF0YSxkYXRldGltZSxkZWNvZGluZyxkZWZhdWx0LGRlZmVyLGRpcixkaXJuYW1lLGAgK1xyXG4gICAgYGRpc2FibGVkLGRvd25sb2FkLGRyYWdnYWJsZSxkcm9wem9uZSxlbmN0eXBlLGVudGVya2V5aGludCxmb3IsZm9ybSxgICtcclxuICAgIGBmb3JtYWN0aW9uLGZvcm1lbmN0eXBlLGZvcm1tZXRob2QsZm9ybW5vdmFsaWRhdGUsZm9ybXRhcmdldCxoZWFkZXJzLGAgK1xyXG4gICAgYGhlaWdodCxoaWRkZW4saGlnaCxocmVmLGhyZWZsYW5nLGh0dHAtZXF1aXYsaWNvbixpZCxpbXBvcnRhbmNlLGludGVncml0eSxgICtcclxuICAgIGBpc21hcCxpdGVtcHJvcCxrZXl0eXBlLGtpbmQsbGFiZWwsbGFuZyxsYW5ndWFnZSxsb2FkaW5nLGxpc3QsbG9vcCxsb3csYCArXHJcbiAgICBgbWFuaWZlc3QsbWF4LG1heGxlbmd0aCxtaW5sZW5ndGgsbWVkaWEsbWluLG11bHRpcGxlLG11dGVkLG5hbWUsbm92YWxpZGF0ZSxgICtcclxuICAgIGBvcGVuLG9wdGltdW0scGF0dGVybixwaW5nLHBsYWNlaG9sZGVyLHBvc3RlcixwcmVsb2FkLHJhZGlvZ3JvdXAscmVhZG9ubHksYCArXHJcbiAgICBgcmVmZXJyZXJwb2xpY3kscmVsLHJlcXVpcmVkLHJldmVyc2VkLHJvd3Mscm93c3BhbixzYW5kYm94LHNjb3BlLHNjb3BlZCxgICtcclxuICAgIGBzZWxlY3RlZCxzaGFwZSxzaXplLHNpemVzLHNsb3Qsc3BhbixzcGVsbGNoZWNrLHNyYyxzcmNkb2Msc3JjbGFuZyxzcmNzZXQsYCArXHJcbiAgICBgc3RhcnQsc3RlcCxzdHlsZSxzdW1tYXJ5LHRhYmluZGV4LHRhcmdldCx0aXRsZSx0cmFuc2xhdGUsdHlwZSx1c2VtYXAsYCArXHJcbiAgICBgdmFsdWUsd2lkdGgsd3JhcGApO1xuXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZSh2YWx1ZSkge1xyXG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdmFsdWVbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTdHlsZShpc1N0cmluZyhpdGVtKSA/IHBhcnNlU3RyaW5nU3R5bGUoaXRlbSkgOiBpdGVtKTtcclxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5vcm1hbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNba2V5XSA9IG5vcm1hbGl6ZWRba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGxpc3REZWxpbWl0ZXJSRSA9IC87KD8hW14oXSpcXCkpL2c7XHJcbmNvbnN0IHByb3BlcnR5RGVsaW1pdGVyUkUgPSAvOiguKykvO1xyXG5mdW5jdGlvbiBwYXJzZVN0cmluZ1N0eWxlKGNzc1RleHQpIHtcclxuICAgIGNvbnN0IHJldCA9IHt9O1xyXG4gICAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyUkUpLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgY29uc3QgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlclJFKTtcclxuICAgICAgICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJldFt0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5mdW5jdGlvbiBzdHJpbmdpZnlTdHlsZShzdHlsZXMpIHtcclxuICAgIGxldCByZXQgPSAnJztcclxuICAgIGlmICghc3R5bGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlcykge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGVzW2tleV07XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGtleS5zdGFydHNXaXRoKGAtLWApID8ga2V5IDogaHlwaGVuYXRlKGtleSk7XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05vVW5pdE51bWVyaWNTdHlsZVByb3Aobm9ybWFsaXplZEtleSkpKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgcmVuZGVyIHZhbGlkIHZhbHVlc1xyXG4gICAgICAgICAgICByZXQgKz0gYCR7bm9ybWFsaXplZEtleX06JHt2YWx1ZX07YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzKHZhbHVlKSB7XHJcbiAgICBsZXQgcmVzID0gJyc7XHJcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgcmVzID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZUNsYXNzKHZhbHVlW2ldKTtcclxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlcyArPSBub3JtYWxpemVkICsgJyAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZVtuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgcmVzICs9IG5hbWUgKyAnICc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzLnRyaW0oKTtcclxufVxuXG4vLyBUaGVzZSB0YWcgY29uZmlncyBhcmUgc2hhcmVkIGJldHdlZW4gY29tcGlsZXItZG9tIGFuZCBydW50aW1lLWRvbSwgc28gdGhleVxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnRcclxuY29uc3QgSFRNTF9UQUdTID0gJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLGFkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsJyArXHJcbiAgICAnaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbixkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbiwnICtcclxuICAgICdmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCxhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSwnICtcclxuICAgICdkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnkscyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsJyArXHJcbiAgICAndGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSwnICtcclxuICAgICdjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsJyArXHJcbiAgICAndGgsdHIsYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLCcgK1xyXG4gICAgJ29wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsJyArXHJcbiAgICAnc3VtbWFyeSx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCc7XHJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9FbGVtZW50XHJcbmNvbnN0IFNWR19UQUdTID0gJ3N2ZyxhbmltYXRlLGFuaW1hdGVNb3Rpb24sYW5pbWF0ZVRyYW5zZm9ybSxjaXJjbGUsY2xpcFBhdGgsY29sb3ItcHJvZmlsZSwnICtcclxuICAgICdkZWZzLGRlc2MsZGlzY2FyZCxlbGxpcHNlLGZlQmxlbmQsZmVDb2xvck1hdHJpeCxmZUNvbXBvbmVudFRyYW5zZmVyLCcgK1xyXG4gICAgJ2ZlQ29tcG9zaXRlLGZlQ29udm9sdmVNYXRyaXgsZmVEaWZmdXNlTGlnaHRpbmcsZmVEaXNwbGFjZW1lbnRNYXAsJyArXHJcbiAgICAnZmVEaXN0YW5jZUxpZ2h0LGZlRHJvcFNoYWRvdyxmZUZsb29kLGZlRnVuY0EsZmVGdW5jQixmZUZ1bmNHLGZlRnVuY1IsJyArXHJcbiAgICAnZmVHYXVzc2lhbkJsdXIsZmVJbWFnZSxmZU1lcmdlLGZlTWVyZ2VOb2RlLGZlTW9ycGhvbG9neSxmZU9mZnNldCwnICtcclxuICAgICdmZVBvaW50TGlnaHQsZmVTcGVjdWxhckxpZ2h0aW5nLGZlU3BvdExpZ2h0LGZlVGlsZSxmZVR1cmJ1bGVuY2UsZmlsdGVyLCcgK1xyXG4gICAgJ2ZvcmVpZ25PYmplY3QsZyxoYXRjaCxoYXRjaHBhdGgsaW1hZ2UsbGluZSxsaW5lYXJHcmFkaWVudCxtYXJrZXIsbWFzaywnICtcclxuICAgICdtZXNoLG1lc2hncmFkaWVudCxtZXNocGF0Y2gsbWVzaHJvdyxtZXRhZGF0YSxtcGF0aCxwYXRoLHBhdHRlcm4sJyArXHJcbiAgICAncG9seWdvbixwb2x5bGluZSxyYWRpYWxHcmFkaWVudCxyZWN0LHNldCxzb2xpZGNvbG9yLHN0b3Asc3dpdGNoLHN5bWJvbCwnICtcclxuICAgICd0ZXh0LHRleHRQYXRoLHRpdGxlLHRzcGFuLHVua25vd24sdXNlLHZpZXcnO1xyXG5jb25zdCBWT0lEX1RBR1MgPSAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxocixpbWcsaW5wdXQsbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInO1xyXG5jb25zdCBpc0hUTUxUYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoSFRNTF9UQUdTKTtcclxuY29uc3QgaXNTVkdUYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoU1ZHX1RBR1MpO1xyXG5jb25zdCBpc1ZvaWRUYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoVk9JRF9UQUdTKTtcblxuY29uc3QgZXNjYXBlUkUgPSAvW1wiJyY8Pl0vO1xyXG5mdW5jdGlvbiBlc2NhcGVIdG1sKHN0cmluZykge1xyXG4gICAgY29uc3Qgc3RyID0gJycgKyBzdHJpbmc7XHJcbiAgICBjb25zdCBtYXRjaCA9IGVzY2FwZVJFLmV4ZWMoc3RyKTtcclxuICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG4gICAgbGV0IGh0bWwgPSAnJztcclxuICAgIGxldCBlc2NhcGVkO1xyXG4gICAgbGV0IGluZGV4O1xyXG4gICAgbGV0IGxhc3RJbmRleCA9IDA7XHJcbiAgICBmb3IgKGluZGV4ID0gbWF0Y2guaW5kZXg7IGluZGV4IDwgc3RyLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgIHN3aXRjaCAoc3RyLmNoYXJDb2RlQXQoaW5kZXgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMzQ6IC8vIFwiXHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZxdW90Oyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzODogLy8gJlxyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmYW1wOyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOTogLy8gJ1xyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmIzM5Oyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA2MDogLy8gPFxyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmbHQ7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDYyOiAvLyA+XHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZndDsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhc3RJbmRleCAhPT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgaHRtbCArPSBzdHIuc3Vic3RyaW5nKGxhc3RJbmRleCwgaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsYXN0SW5kZXggPSBpbmRleCArIDE7XHJcbiAgICAgICAgaHRtbCArPSBlc2NhcGVkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxhc3RJbmRleCAhPT0gaW5kZXggPyBodG1sICsgc3RyLnN1YnN0cmluZyhsYXN0SW5kZXgsIGluZGV4KSA6IGh0bWw7XHJcbn1cclxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1Mi9zeW50YXguaHRtbCNjb21tZW50c1xyXG5jb25zdCBjb21tZW50U3RyaXBSRSA9IC9eLT8+fDwhLS18LS0+fC0tIT58PCEtJC9nO1xyXG5mdW5jdGlvbiBlc2NhcGVIdG1sQ29tbWVudChzcmMpIHtcclxuICAgIHJldHVybiBzcmMucmVwbGFjZShjb21tZW50U3RyaXBSRSwgJycpO1xyXG59XG5cbmZ1bmN0aW9uIGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSB7XHJcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGxldCBlcXVhbCA9IHRydWU7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgZXF1YWwgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBlcXVhbCA9IGxvb3NlRXF1YWwoYVtpXSwgYltpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXF1YWw7XHJcbn1cclxuZnVuY3Rpb24gbG9vc2VFcXVhbChhLCBiKSB7XHJcbiAgICBpZiAoYSA9PT0gYilcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGxldCBhVmFsaWRUeXBlID0gaXNEYXRlKGEpO1xyXG4gICAgbGV0IGJWYWxpZFR5cGUgPSBpc0RhdGUoYik7XHJcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgYVZhbGlkVHlwZSA9IGlzQXJyYXkoYSk7XHJcbiAgICBiVmFsaWRUeXBlID0gaXNBcnJheShiKTtcclxuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcclxuICAgICAgICByZXR1cm4gYVZhbGlkVHlwZSAmJiBiVmFsaWRUeXBlID8gbG9vc2VDb21wYXJlQXJyYXlzKGEsIGIpIDogZmFsc2U7XHJcbiAgICB9XHJcbiAgICBhVmFsaWRUeXBlID0gaXNPYmplY3QoYSk7XHJcbiAgICBiVmFsaWRUeXBlID0gaXNPYmplY3QoYik7XHJcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmOiB0aGlzIGlmIHdpbGwgcHJvYmFibHkgbmV2ZXIgYmUgY2FsbGVkICovXHJcbiAgICAgICAgaWYgKCFhVmFsaWRUeXBlIHx8ICFiVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYUtleXNDb3VudCA9IE9iamVjdC5rZXlzKGEpLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBiS2V5c0NvdW50ID0gT2JqZWN0LmtleXMoYikubGVuZ3RoO1xyXG4gICAgICAgIGlmIChhS2V5c0NvdW50ICE9PSBiS2V5c0NvdW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xyXG4gICAgICAgICAgICBjb25zdCBhSGFzS2V5ID0gYS5oYXNPd25Qcm9wZXJ0eShrZXkpO1xyXG4gICAgICAgICAgICBjb25zdCBiSGFzS2V5ID0gYi5oYXNPd25Qcm9wZXJ0eShrZXkpO1xyXG4gICAgICAgICAgICBpZiAoKGFIYXNLZXkgJiYgIWJIYXNLZXkpIHx8XHJcbiAgICAgICAgICAgICAgICAoIWFIYXNLZXkgJiYgYkhhc0tleSkgfHxcclxuICAgICAgICAgICAgICAgICFsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xyXG59XHJcbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZihhcnIsIHZhbCkge1xyXG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoaXRlbSA9PiBsb29zZUVxdWFsKGl0ZW0sIHZhbCkpO1xyXG59XG5cbi8qKlxyXG4gKiBGb3IgY29udmVydGluZyB7eyBpbnRlcnBvbGF0aW9uIH19IHZhbHVlcyB0byBkaXNwbGF5ZWQgc3RyaW5ncy5cclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IHRvRGlzcGxheVN0cmluZyA9ICh2YWwpID0+IHtcclxuICAgIHJldHVybiB2YWwgPT0gbnVsbFxyXG4gICAgICAgID8gJydcclxuICAgICAgICA6IGlzT2JqZWN0KHZhbClcclxuICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIHJlcGxhY2VyLCAyKVxyXG4gICAgICAgICAgICA6IFN0cmluZyh2YWwpO1xyXG59O1xyXG5jb25zdCByZXBsYWNlciA9IChfa2V5LCB2YWwpID0+IHtcclxuICAgIGlmIChpc01hcCh2YWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgW2BNYXAoJHt2YWwuc2l6ZX0pYF06IFsuLi52YWwuZW50cmllcygpXS5yZWR1Y2UoKGVudHJpZXMsIFtrZXksIHZhbF0pID0+IHtcclxuICAgICAgICAgICAgICAgIGVudHJpZXNbYCR7a2V5fSA9PmBdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJpZXM7XHJcbiAgICAgICAgICAgIH0sIHt9KVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1NldCh2YWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgW2BTZXQoJHt2YWwuc2l6ZX0pYF06IFsuLi52YWwudmFsdWVzKCldXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkgJiYgIWlzQXJyYXkodmFsKSAmJiAhaXNQbGFpbk9iamVjdCh2YWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZyh2YWwpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbDtcclxufTtcblxuLyoqXHJcbiAqIExpc3Qgb2YgQGJhYmVsL3BhcnNlciBwbHVnaW5zIHRoYXQgYXJlIHVzZWQgZm9yIHRlbXBsYXRlIGV4cHJlc3Npb25cclxuICogdHJhbnNmb3JtcyBhbmQgU0ZDIHNjcmlwdCB0cmFuc2Zvcm1zLiBCeSBkZWZhdWx0IHdlIGVuYWJsZSBwcm9wb3NhbHMgc2xhdGVkXHJcbiAqIGZvciBFUzIwMjAuIFRoaXMgd2lsbCBuZWVkIHRvIGJlIHVwZGF0ZWQgYXMgdGhlIHNwZWMgbW92ZXMgZm9yd2FyZC5cclxuICogRnVsbCBsaXN0IGF0IGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL25leHQvYmFiZWwtcGFyc2VyI3BsdWdpbnNcclxuICovXHJcbmNvbnN0IGJhYmVsUGFyc2VyRGVmYXVsdFBsdWdpbnMgPSBbXHJcbiAgICAnYmlnSW50JyxcclxuICAgICdvcHRpb25hbENoYWluaW5nJyxcclxuICAgICdudWxsaXNoQ29hbGVzY2luZ09wZXJhdG9yJ1xyXG5dO1xyXG5jb25zdCBFTVBUWV9PQkogPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgID8gT2JqZWN0LmZyZWV6ZSh7fSlcclxuICAgIDoge307XHJcbmNvbnN0IEVNUFRZX0FSUiA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IE9iamVjdC5mcmVlemUoW10pIDogW107XHJcbmNvbnN0IE5PT1AgPSAoKSA9PiB7IH07XHJcbi8qKlxyXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxyXG4gKi9cclxuY29uc3QgTk8gPSAoKSA9PiBmYWxzZTtcclxuY29uc3Qgb25SRSA9IC9eb25bXmEtel0vO1xyXG5jb25zdCBpc09uID0gKGtleSkgPT4gb25SRS50ZXN0KGtleSk7XHJcbmNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IChrZXkpID0+IGtleS5zdGFydHNXaXRoKCdvblVwZGF0ZTonKTtcclxuY29uc3QgZXh0ZW5kID0gT2JqZWN0LmFzc2lnbjtcclxuY29uc3QgcmVtb3ZlID0gKGFyciwgZWwpID0+IHtcclxuICAgIGNvbnN0IGkgPSBhcnIuaW5kZXhPZihlbCk7XHJcbiAgICBpZiAoaSA+IC0xKSB7XHJcbiAgICAgICAgYXJyLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxufTtcclxuY29uc3QgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG5jb25zdCBoYXNPd24gPSAodmFsLCBrZXkpID0+IGhhc093blByb3BlcnR5LmNhbGwodmFsLCBrZXkpO1xyXG5jb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcclxuY29uc3QgaXNNYXAgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgTWFwXSc7XHJcbmNvbnN0IGlzU2V0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IFNldF0nO1xyXG5jb25zdCBpc0RhdGUgPSAodmFsKSA9PiB2YWwgaW5zdGFuY2VvZiBEYXRlO1xyXG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJztcclxuY29uc3QgaXNTdHJpbmcgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcclxuY29uc3QgaXNTeW1ib2wgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnc3ltYm9sJztcclxuY29uc3QgaXNPYmplY3QgPSAodmFsKSA9PiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XHJcbmNvbnN0IGlzUHJvbWlzZSA9ICh2YWwpID0+IHtcclxuICAgIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnRoZW4pICYmIGlzRnVuY3Rpb24odmFsLmNhdGNoKTtcclxufTtcclxuY29uc3Qgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xyXG5jb25zdCB0b1R5cGVTdHJpbmcgPSAodmFsdWUpID0+IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xyXG5jb25zdCB0b1Jhd1R5cGUgPSAodmFsdWUpID0+IHtcclxuICAgIC8vIGV4dHJhY3QgXCJSYXdUeXBlXCIgZnJvbSBzdHJpbmdzIGxpa2UgXCJbb2JqZWN0IFJhd1R5cGVdXCJcclxuICAgIHJldHVybiB0b1R5cGVTdHJpbmcodmFsdWUpLnNsaWNlKDgsIC0xKTtcclxufTtcclxuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSAnW29iamVjdCBPYmplY3RdJztcclxuY29uc3QgaXNJbnRlZ2VyS2V5ID0gKGtleSkgPT4gaXNTdHJpbmcoa2V5KSAmJlxyXG4gICAga2V5ICE9PSAnTmFOJyAmJlxyXG4gICAga2V5WzBdICE9PSAnLScgJiZcclxuICAgICcnICsgcGFyc2VJbnQoa2V5LCAxMCkgPT09IGtleTtcclxuY29uc3QgaXNSZXNlcnZlZFByb3AgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoXHJcbi8vIHRoZSBsZWFkaW5nIGNvbW1hIGlzIGludGVudGlvbmFsIHNvIGVtcHR5IHN0cmluZyBcIlwiIGlzIGFsc28gaW5jbHVkZWRcclxuJyxrZXkscmVmLCcgK1xyXG4gICAgJ29uVm5vZGVCZWZvcmVNb3VudCxvblZub2RlTW91bnRlZCwnICtcclxuICAgICdvblZub2RlQmVmb3JlVXBkYXRlLG9uVm5vZGVVcGRhdGVkLCcgK1xyXG4gICAgJ29uVm5vZGVCZWZvcmVVbm1vdW50LG9uVm5vZGVVbm1vdW50ZWQnKTtcclxuY29uc3QgY2FjaGVTdHJpbmdGdW5jdGlvbiA9IChmbikgPT4ge1xyXG4gICAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgcmV0dXJuICgoc3RyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcclxuICAgICAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSk7XHJcbiAgICB9KTtcclxufTtcclxuY29uc3QgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBjYW1lbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4ge1xyXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIChfLCBjKSA9PiAoYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnKSk7XHJcbn0pO1xyXG5jb25zdCBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgaHlwaGVuYXRlID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKCkpO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IGNhcGl0YWxpemUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKSk7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgdG9IYW5kbGVyS2V5ID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiAoc3RyID8gYG9uJHtjYXBpdGFsaXplKHN0cil9YCA6IGBgKSk7XHJcbi8vIGNvbXBhcmUgd2hldGhlciBhIHZhbHVlIGhhcyBjaGFuZ2VkLCBhY2NvdW50aW5nIGZvciBOYU4uXHJcbmNvbnN0IGhhc0NoYW5nZWQgPSAodmFsdWUsIG9sZFZhbHVlKSA9PiB2YWx1ZSAhPT0gb2xkVmFsdWUgJiYgKHZhbHVlID09PSB2YWx1ZSB8fCBvbGRWYWx1ZSA9PT0gb2xkVmFsdWUpO1xyXG5jb25zdCBpbnZva2VBcnJheUZucyA9IChmbnMsIGFyZykgPT4ge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBmbnNbaV0oYXJnKTtcclxuICAgIH1cclxufTtcclxuY29uc3QgZGVmID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlXHJcbiAgICB9KTtcclxufTtcclxuY29uc3QgdG9OdW1iZXIgPSAodmFsKSA9PiB7XHJcbiAgICBjb25zdCBuID0gcGFyc2VGbG9hdCh2YWwpO1xyXG4gICAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogbjtcclxufTtcclxubGV0IF9nbG9iYWxUaGlzO1xyXG5jb25zdCBnZXRHbG9iYWxUaGlzID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChfZ2xvYmFsVGhpcyB8fFxyXG4gICAgICAgIChfZ2xvYmFsVGhpcyA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgPyBnbG9iYWxUaGlzXHJcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gc2VsZlxyXG4gICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB3aW5kb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnbG9iYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30pKTtcclxufTtcblxuZXhwb3J0IHsgRU1QVFlfQVJSLCBFTVBUWV9PQkosIE5PLCBOT09QLCBQYXRjaEZsYWdOYW1lcywgYmFiZWxQYXJzZXJEZWZhdWx0UGx1Z2lucywgY2FtZWxpemUsIGNhcGl0YWxpemUsIGRlZiwgZXNjYXBlSHRtbCwgZXNjYXBlSHRtbENvbW1lbnQsIGV4dGVuZCwgZ2VuZXJhdGVDb2RlRnJhbWUsIGdldEdsb2JhbFRoaXMsIGhhc0NoYW5nZWQsIGhhc093biwgaHlwaGVuYXRlLCBpbnZva2VBcnJheUZucywgaXNBcnJheSwgaXNCb29sZWFuQXR0ciwgaXNEYXRlLCBpc0Z1bmN0aW9uLCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQsIGlzSFRNTFRhZywgaXNJbnRlZ2VyS2V5LCBpc0tub3duQXR0ciwgaXNNYXAsIGlzTW9kZWxMaXN0ZW5lciwgaXNOb1VuaXROdW1lcmljU3R5bGVQcm9wLCBpc09iamVjdCwgaXNPbiwgaXNQbGFpbk9iamVjdCwgaXNQcm9taXNlLCBpc1Jlc2VydmVkUHJvcCwgaXNTU1JTYWZlQXR0ck5hbWUsIGlzU1ZHVGFnLCBpc1NldCwgaXNTcGVjaWFsQm9vbGVhbkF0dHIsIGlzU3RyaW5nLCBpc1N5bWJvbCwgaXNWb2lkVGFnLCBsb29zZUVxdWFsLCBsb29zZUluZGV4T2YsIG1ha2VNYXAsIG5vcm1hbGl6ZUNsYXNzLCBub3JtYWxpemVTdHlsZSwgb2JqZWN0VG9TdHJpbmcsIHBhcnNlU3RyaW5nU3R5bGUsIHByb3BzVG9BdHRyTWFwLCByZW1vdmUsIHNsb3RGbGFnc1RleHQsIHN0cmluZ2lmeVN0eWxlLCB0b0Rpc3BsYXlTdHJpbmcsIHRvSGFuZGxlcktleSwgdG9OdW1iZXIsIHRvUmF3VHlwZSwgdG9UeXBlU3RyaW5nIH07XG4iLCJpbXBvcnQgeyBFTVBUWV9PQkosIGlzQXJyYXksIGlzTWFwLCBpc0ludGVnZXJLZXksIGlzU3ltYm9sLCBleHRlbmQsIGhhc093biwgaXNPYmplY3QsIGhhc0NoYW5nZWQsIG1ha2VNYXAsIGNhcGl0YWxpemUsIHRvUmF3VHlwZSwgZGVmLCBpc0Z1bmN0aW9uLCBOT09QIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCB0YXJnZXRNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCBlZmZlY3RTdGFjayA9IFtdO1xyXG5sZXQgYWN0aXZlRWZmZWN0O1xyXG5jb25zdCBJVEVSQVRFX0tFWSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnaXRlcmF0ZScgOiAnJyk7XHJcbmNvbnN0IE1BUF9LRVlfSVRFUkFURV9LRVkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ01hcCBrZXkgaXRlcmF0ZScgOiAnJyk7XHJcbmZ1bmN0aW9uIGlzRWZmZWN0KGZuKSB7XHJcbiAgICByZXR1cm4gZm4gJiYgZm4uX2lzRWZmZWN0ID09PSB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGVmZmVjdChmbiwgb3B0aW9ucyA9IEVNUFRZX09CSikge1xyXG4gICAgaWYgKGlzRWZmZWN0KGZuKSkge1xyXG4gICAgICAgIGZuID0gZm4ucmF3O1xyXG4gICAgfVxyXG4gICAgY29uc3QgZWZmZWN0ID0gY3JlYXRlUmVhY3RpdmVFZmZlY3QoZm4sIG9wdGlvbnMpO1xyXG4gICAgaWYgKCFvcHRpb25zLmxhenkpIHtcclxuICAgICAgICBlZmZlY3QoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBlZmZlY3Q7XHJcbn1cclxuZnVuY3Rpb24gc3RvcChlZmZlY3QpIHtcclxuICAgIGlmIChlZmZlY3QuYWN0aXZlKSB7XHJcbiAgICAgICAgY2xlYW51cChlZmZlY3QpO1xyXG4gICAgICAgIGlmIChlZmZlY3Qub3B0aW9ucy5vblN0b3ApIHtcclxuICAgICAgICAgICAgZWZmZWN0Lm9wdGlvbnMub25TdG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVmZmVjdC5hY3RpdmUgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5sZXQgdWlkID0gMDtcclxuZnVuY3Rpb24gY3JlYXRlUmVhY3RpdmVFZmZlY3QoZm4sIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IGVmZmVjdCA9IGZ1bmN0aW9uIHJlYWN0aXZlRWZmZWN0KCkge1xyXG4gICAgICAgIGlmICghZWZmZWN0LmFjdGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFlZmZlY3RTdGFjay5pbmNsdWRlcyhlZmZlY3QpKSB7XHJcbiAgICAgICAgICAgIGNsZWFudXAoZWZmZWN0KTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZVRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3RTdGFjay5wdXNoKGVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVFZmZlY3QgPSBlZmZlY3Q7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdFN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRUcmFja2luZygpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWZmZWN0ID0gZWZmZWN0U3RhY2tbZWZmZWN0U3RhY2subGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZWZmZWN0LmlkID0gdWlkKys7XHJcbiAgICBlZmZlY3QuYWxsb3dSZWN1cnNlID0gISFvcHRpb25zLmFsbG93UmVjdXJzZTtcclxuICAgIGVmZmVjdC5faXNFZmZlY3QgPSB0cnVlO1xyXG4gICAgZWZmZWN0LmFjdGl2ZSA9IHRydWU7XHJcbiAgICBlZmZlY3QucmF3ID0gZm47XHJcbiAgICBlZmZlY3QuZGVwcyA9IFtdO1xyXG4gICAgZWZmZWN0Lm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgcmV0dXJuIGVmZmVjdDtcclxufVxyXG5mdW5jdGlvbiBjbGVhbnVwKGVmZmVjdCkge1xyXG4gICAgY29uc3QgeyBkZXBzIH0gPSBlZmZlY3Q7XHJcbiAgICBpZiAoZGVwcy5sZW5ndGgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZGVwc1tpXS5kZWxldGUoZWZmZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVwcy5sZW5ndGggPSAwO1xyXG4gICAgfVxyXG59XHJcbmxldCBzaG91bGRUcmFjayA9IHRydWU7XHJcbmNvbnN0IHRyYWNrU3RhY2sgPSBbXTtcclxuZnVuY3Rpb24gcGF1c2VUcmFja2luZygpIHtcclxuICAgIHRyYWNrU3RhY2sucHVzaChzaG91bGRUcmFjayk7XHJcbiAgICBzaG91bGRUcmFjayA9IGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGVuYWJsZVRyYWNraW5nKCkge1xyXG4gICAgdHJhY2tTdGFjay5wdXNoKHNob3VsZFRyYWNrKTtcclxuICAgIHNob3VsZFRyYWNrID0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiByZXNldFRyYWNraW5nKCkge1xyXG4gICAgY29uc3QgbGFzdCA9IHRyYWNrU3RhY2sucG9wKCk7XHJcbiAgICBzaG91bGRUcmFjayA9IGxhc3QgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBsYXN0O1xyXG59XHJcbmZ1bmN0aW9uIHRyYWNrKHRhcmdldCwgdHlwZSwga2V5KSB7XHJcbiAgICBpZiAoIXNob3VsZFRyYWNrIHx8IGFjdGl2ZUVmZmVjdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XHJcbiAgICBpZiAoIWRlcHNNYXApIHtcclxuICAgICAgICB0YXJnZXRNYXAuc2V0KHRhcmdldCwgKGRlcHNNYXAgPSBuZXcgTWFwKCkpKTtcclxuICAgIH1cclxuICAgIGxldCBkZXAgPSBkZXBzTWFwLmdldChrZXkpO1xyXG4gICAgaWYgKCFkZXApIHtcclxuICAgICAgICBkZXBzTWFwLnNldChrZXksIChkZXAgPSBuZXcgU2V0KCkpKTtcclxuICAgIH1cclxuICAgIGlmICghZGVwLmhhcyhhY3RpdmVFZmZlY3QpKSB7XHJcbiAgICAgICAgZGVwLmFkZChhY3RpdmVFZmZlY3QpO1xyXG4gICAgICAgIGFjdGl2ZUVmZmVjdC5kZXBzLnB1c2goZGVwKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGFjdGl2ZUVmZmVjdC5vcHRpb25zLm9uVHJhY2spIHtcclxuICAgICAgICAgICAgYWN0aXZlRWZmZWN0Lm9wdGlvbnMub25UcmFjayh7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3Q6IGFjdGl2ZUVmZmVjdCxcclxuICAgICAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgICAgICBrZXlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHRyaWdnZXIodGFyZ2V0LCB0eXBlLCBrZXksIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgb2xkVGFyZ2V0KSB7XHJcbiAgICBjb25zdCBkZXBzTWFwID0gdGFyZ2V0TWFwLmdldCh0YXJnZXQpO1xyXG4gICAgaWYgKCFkZXBzTWFwKSB7XHJcbiAgICAgICAgLy8gbmV2ZXIgYmVlbiB0cmFja2VkXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZWZmZWN0cyA9IG5ldyBTZXQoKTtcclxuICAgIGNvbnN0IGFkZCA9IChlZmZlY3RzVG9BZGQpID0+IHtcclxuICAgICAgICBpZiAoZWZmZWN0c1RvQWRkKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdHNUb0FkZC5mb3JFYWNoKGVmZmVjdCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWZmZWN0ICE9PSBhY3RpdmVFZmZlY3QgfHwgZWZmZWN0LmFsbG93UmVjdXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdHMuYWRkKGVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpZiAodHlwZSA9PT0gXCJjbGVhclwiIC8qIENMRUFSICovKSB7XHJcbiAgICAgICAgLy8gY29sbGVjdGlvbiBiZWluZyBjbGVhcmVkXHJcbiAgICAgICAgLy8gdHJpZ2dlciBhbGwgZWZmZWN0cyBmb3IgdGFyZ2V0XHJcbiAgICAgICAgZGVwc01hcC5mb3JFYWNoKGFkZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChrZXkgPT09ICdsZW5ndGgnICYmIGlzQXJyYXkodGFyZ2V0KSkge1xyXG4gICAgICAgIGRlcHNNYXAuZm9yRWFjaCgoZGVwLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2xlbmd0aCcgfHwga2V5ID49IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBhZGQoZGVwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gc2NoZWR1bGUgcnVucyBmb3IgU0VUIHwgQUREIHwgREVMRVRFXHJcbiAgICAgICAgaWYgKGtleSAhPT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWxzbyBydW4gZm9yIGl0ZXJhdGlvbiBrZXkgb24gQUREIHwgREVMRVRFIHwgTWFwLlNFVFxyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiYWRkXCIgLyogQUREICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGQoZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGQoZGVwc01hcC5nZXQoTUFQX0tFWV9JVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzSW50ZWdlcktleShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV3IGluZGV4IGFkZGVkIHRvIGFycmF5IC0+IGxlbmd0aCBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KCdsZW5ndGgnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImRlbGV0ZVwiIC8qIERFTEVURSAqLzpcclxuICAgICAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInNldFwiIC8qIFNFVCAqLzpcclxuICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBydW4gPSAoZWZmZWN0KSA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBlZmZlY3Qub3B0aW9ucy5vblRyaWdnZXIpIHtcclxuICAgICAgICAgICAgZWZmZWN0Lm9wdGlvbnMub25UcmlnZ2VyKHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdCxcclxuICAgICAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgb2xkVGFyZ2V0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWZmZWN0Lm9wdGlvbnMuc2NoZWR1bGVyKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdC5vcHRpb25zLnNjaGVkdWxlcihlZmZlY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZWZmZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGVmZmVjdHMuZm9yRWFjaChydW4pO1xyXG59XG5cbmNvbnN0IGlzTm9uVHJhY2thYmxlS2V5cyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgX19wcm90b19fLF9fdl9pc1JlZixfX2lzVnVlYCk7XHJcbmNvbnN0IGJ1aWx0SW5TeW1ib2xzID0gbmV3IFNldChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpXHJcbiAgICAubWFwKGtleSA9PiBTeW1ib2xba2V5XSlcclxuICAgIC5maWx0ZXIoaXNTeW1ib2wpKTtcclxuY29uc3QgZ2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIoKTtcclxuY29uc3Qgc2hhbGxvd0dldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKGZhbHNlLCB0cnVlKTtcclxuY29uc3QgcmVhZG9ubHlHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcih0cnVlKTtcclxuY29uc3Qgc2hhbGxvd1JlYWRvbmx5R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIodHJ1ZSwgdHJ1ZSk7XHJcbmNvbnN0IGFycmF5SW5zdHJ1bWVudGF0aW9ucyA9IC8qI19fUFVSRV9fKi8gY3JlYXRlQXJyYXlJbnN0cnVtZW50YXRpb25zKCk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUFycmF5SW5zdHJ1bWVudGF0aW9ucygpIHtcclxuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbnMgPSB7fTtcclxuICAgIFsnaW5jbHVkZXMnLCAnaW5kZXhPZicsICdsYXN0SW5kZXhPZiddLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBjb25zdCBtZXRob2QgPSBBcnJheS5wcm90b3R5cGVba2V5XTtcclxuICAgICAgICBpbnN0cnVtZW50YXRpb25zW2tleV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgICAgICBjb25zdCBhcnIgPSB0b1Jhdyh0aGlzKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdHJhY2soYXJyLCBcImdldFwiIC8qIEdFVCAqLywgaSArICcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB3ZSBydW4gdGhlIG1ldGhvZCB1c2luZyB0aGUgb3JpZ2luYWwgYXJncyBmaXJzdCAod2hpY2ggbWF5IGJlIHJlYWN0aXZlKVxyXG4gICAgICAgICAgICBjb25zdCByZXMgPSBtZXRob2QuYXBwbHkoYXJyLCBhcmdzKTtcclxuICAgICAgICAgICAgaWYgKHJlcyA9PT0gLTEgfHwgcmVzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhhdCBkaWRuJ3Qgd29yaywgcnVuIGl0IGFnYWluIHVzaW5nIHJhdyB2YWx1ZXMuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KGFyciwgYXJncy5tYXAodG9SYXcpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICBbJ3B1c2gnLCAncG9wJywgJ3NoaWZ0JywgJ3Vuc2hpZnQnLCAnc3BsaWNlJ10uZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IEFycmF5LnByb3RvdHlwZVtrZXldO1xyXG4gICAgICAgIGluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGluc3RydW1lbnRhdGlvbnM7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlR2V0dGVyKGlzUmVhZG9ubHkgPSBmYWxzZSwgc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xyXG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiIC8qIFJBVyAqLyAmJlxyXG4gICAgICAgICAgICByZWNlaXZlciA9PT1cclxuICAgICAgICAgICAgICAgIChpc1JlYWRvbmx5XHJcbiAgICAgICAgICAgICAgICAgICAgPyBzaGFsbG93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2hhbGxvd1JlYWRvbmx5TWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVhZG9ubHlNYXBcclxuICAgICAgICAgICAgICAgICAgICA6IHNoYWxsb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzaGFsbG93UmVhY3RpdmVNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZWFjdGl2ZU1hcCkuZ2V0KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0SXNBcnJheSA9IGlzQXJyYXkodGFyZ2V0KTtcclxuICAgICAgICBpZiAoIWlzUmVhZG9ubHkgJiYgdGFyZ2V0SXNBcnJheSAmJiBoYXNPd24oYXJyYXlJbnN0cnVtZW50YXRpb25zLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldChhcnJheUluc3RydW1lbnRhdGlvbnMsIGtleSwgcmVjZWl2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXMgPSBSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xyXG4gICAgICAgIGlmIChpc1N5bWJvbChrZXkpID8gYnVpbHRJblN5bWJvbHMuaGFzKGtleSkgOiBpc05vblRyYWNrYWJsZUtleXMoa2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzUmVhZG9ubHkpIHtcclxuICAgICAgICAgICAgdHJhY2sodGFyZ2V0LCBcImdldFwiIC8qIEdFVCAqLywga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYWxsb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzUmVmKHJlcykpIHtcclxuICAgICAgICAgICAgLy8gcmVmIHVud3JhcHBpbmcgLSBkb2VzIG5vdCBhcHBseSBmb3IgQXJyYXkgKyBpbnRlZ2VyIGtleS5cclxuICAgICAgICAgICAgY29uc3Qgc2hvdWxkVW53cmFwID0gIXRhcmdldElzQXJyYXkgfHwgIWlzSW50ZWdlcktleShrZXkpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2hvdWxkVW53cmFwID8gcmVzLnZhbHVlIDogcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNPYmplY3QocmVzKSkge1xyXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHJldHVybmVkIHZhbHVlIGludG8gYSBwcm94eSBhcyB3ZWxsLiB3ZSBkbyB0aGUgaXNPYmplY3QgY2hlY2tcclxuICAgICAgICAgICAgLy8gaGVyZSB0byBhdm9pZCBpbnZhbGlkIHZhbHVlIHdhcm5pbmcuIEFsc28gbmVlZCB0byBsYXp5IGFjY2VzcyByZWFkb25seVxyXG4gICAgICAgICAgICAvLyBhbmQgcmVhY3RpdmUgaGVyZSB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5LlxyXG4gICAgICAgICAgICByZXR1cm4gaXNSZWFkb25seSA/IHJlYWRvbmx5KHJlcykgOiByZWFjdGl2ZShyZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBzZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZVNldHRlcigpO1xyXG5jb25zdCBzaGFsbG93U2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVTZXR0ZXIodHJ1ZSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZVNldHRlcihzaGFsbG93ID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBzZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikge1xyXG4gICAgICAgIGxldCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xyXG4gICAgICAgIGlmICghc2hhbGxvdykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcclxuICAgICAgICAgICAgb2xkVmFsdWUgPSB0b1JhdyhvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpICYmIGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaGFkS2V5ID0gaXNBcnJheSh0YXJnZXQpICYmIGlzSW50ZWdlcktleShrZXkpXHJcbiAgICAgICAgICAgID8gTnVtYmVyKGtleSkgPCB0YXJnZXQubGVuZ3RoXHJcbiAgICAgICAgICAgIDogaGFzT3duKHRhcmdldCwga2V5KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcclxuICAgICAgICAvLyBkb24ndCB0cmlnZ2VyIGlmIHRhcmdldCBpcyBzb21ldGhpbmcgdXAgaW4gdGhlIHByb3RvdHlwZSBjaGFpbiBvZiBvcmlnaW5hbFxyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHRvUmF3KHJlY2VpdmVyKSkge1xyXG4gICAgICAgICAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogQUREICovLCBrZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiIC8qIFNFVCAqLywga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XHJcbiAgICBjb25zdCBoYWRLZXkgPSBoYXNPd24odGFyZ2V0LCBrZXkpO1xyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKHJlc3VsdCAmJiBoYWRLZXkpIHtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiAvKiBERUxFVEUgKi8sIGtleSwgdW5kZWZpbmVkLCBvbGRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGhhcyh0YXJnZXQsIGtleSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFpc1N5bWJvbChrZXkpIHx8ICFidWlsdEluU3ltYm9scy5oYXMoa2V5KSkge1xyXG4gICAgICAgIHRyYWNrKHRhcmdldCwgXCJoYXNcIiAvKiBIQVMgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XHJcbiAgICB0cmFjayh0YXJnZXQsIFwiaXRlcmF0ZVwiIC8qIElURVJBVEUgKi8sIGlzQXJyYXkodGFyZ2V0KSA/ICdsZW5ndGgnIDogSVRFUkFURV9LRVkpO1xyXG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xyXG59XHJcbmNvbnN0IG11dGFibGVIYW5kbGVycyA9IHtcclxuICAgIGdldCxcclxuICAgIHNldCxcclxuICAgIGRlbGV0ZVByb3BlcnR5LFxyXG4gICAgaGFzLFxyXG4gICAgb3duS2V5c1xyXG59O1xyXG5jb25zdCByZWFkb25seUhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiByZWFkb25seUdldCxcclxuICAgIHNldCh0YXJnZXQsIGtleSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBTZXQgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRGVsZXRlIG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBzaGFsbG93UmVhY3RpdmVIYW5kbGVycyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBtdXRhYmxlSGFuZGxlcnMsIHtcclxuICAgIGdldDogc2hhbGxvd0dldCxcclxuICAgIHNldDogc2hhbGxvd1NldFxyXG59KTtcclxuLy8gUHJvcHMgaGFuZGxlcnMgYXJlIHNwZWNpYWwgaW4gdGhlIHNlbnNlIHRoYXQgaXQgc2hvdWxkIG5vdCB1bndyYXAgdG9wLWxldmVsXHJcbi8vIHJlZnMgKGluIG9yZGVyIHRvIGFsbG93IHJlZnMgdG8gYmUgZXhwbGljaXRseSBwYXNzZWQgZG93biksIGJ1dCBzaG91bGRcclxuLy8gcmV0YWluIHRoZSByZWFjdGl2aXR5IG9mIHRoZSBub3JtYWwgcmVhZG9ubHkgb2JqZWN0LlxyXG5jb25zdCBzaGFsbG93UmVhZG9ubHlIYW5kbGVycyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCByZWFkb25seUhhbmRsZXJzLCB7XHJcbiAgICBnZXQ6IHNoYWxsb3dSZWFkb25seUdldFxyXG59KTtcblxuY29uc3QgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUodmFsdWUpIDogdmFsdWU7XHJcbmNvbnN0IHRvUmVhZG9ubHkgPSAodmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSA/IHJlYWRvbmx5KHZhbHVlKSA6IHZhbHVlO1xyXG5jb25zdCB0b1NoYWxsb3cgPSAodmFsdWUpID0+IHZhbHVlO1xyXG5jb25zdCBnZXRQcm90byA9ICh2KSA9PiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHYpO1xyXG5mdW5jdGlvbiBnZXQkMSh0YXJnZXQsIGtleSwgaXNSZWFkb25seSA9IGZhbHNlLCBpc1NoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgLy8gIzE3NzI6IHJlYWRvbmx5KHJlYWN0aXZlKE1hcCkpIHNob3VsZCByZXR1cm4gcmVhZG9ubHkgKyByZWFjdGl2ZSB2ZXJzaW9uXHJcbiAgICAvLyBvZiB0aGUgdmFsdWVcclxuICAgIHRhcmdldCA9IHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcclxuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XHJcbiAgICBpZiAoa2V5ICE9PSByYXdLZXkpIHtcclxuICAgICAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiIC8qIEdFVCAqLywgcmF3S2V5KTtcclxuICAgIGNvbnN0IHsgaGFzIH0gPSBnZXRQcm90byhyYXdUYXJnZXQpO1xyXG4gICAgY29uc3Qgd3JhcCA9IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcclxuICAgIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIGtleSkpIHtcclxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KGtleSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaGFzLmNhbGwocmF3VGFyZ2V0LCByYXdLZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChyYXdLZXkpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRhcmdldCAhPT0gcmF3VGFyZ2V0KSB7XHJcbiAgICAgICAgLy8gIzM2MDIgcmVhZG9ubHkocmVhY3RpdmUoTWFwKSlcclxuICAgICAgICAvLyBlbnN1cmUgdGhhdCB0aGUgbmVzdGVkIHJlYWN0aXZlIGBNYXBgIGNhbiBkbyB0cmFja2luZyBmb3IgaXRzZWxmXHJcbiAgICAgICAgdGFyZ2V0LmdldChrZXkpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGhhcyQxKGtleSwgaXNSZWFkb25seSA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiAvKiBIQVMgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaGFzXCIgLyogSEFTICovLCByYXdLZXkpO1xyXG4gICAgcmV0dXJuIGtleSA9PT0gcmF3S2V5XHJcbiAgICAgICAgPyB0YXJnZXQuaGFzKGtleSlcclxuICAgICAgICA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XHJcbn1cclxuZnVuY3Rpb24gc2l6ZSh0YXJnZXQsIGlzUmVhZG9ubHkgPSBmYWxzZSkge1xyXG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayh0b1Jhdyh0YXJnZXQpLCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBJVEVSQVRFX0tFWSk7XHJcbiAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCAnc2l6ZScsIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gYWRkKHZhbHVlKSB7XHJcbiAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xyXG4gICAgY29uc3QgcHJvdG8gPSBnZXRQcm90byh0YXJnZXQpO1xyXG4gICAgY29uc3QgaGFkS2V5ID0gcHJvdG8uaGFzLmNhbGwodGFyZ2V0LCB2YWx1ZSk7XHJcbiAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgIHRhcmdldC5hZGQodmFsdWUpO1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIEFERCAqLywgdmFsdWUsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59XHJcbmZ1bmN0aW9uIHNldCQxKGtleSwgdmFsdWUpIHtcclxuICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XHJcbiAgICBjb25zdCB7IGhhcywgZ2V0IH0gPSBnZXRQcm90byh0YXJnZXQpO1xyXG4gICAgbGV0IGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAga2V5ID0gdG9SYXcoa2V5KTtcclxuICAgICAgICBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KTtcclxuICAgIH1cclxuICAgIGNvbnN0IG9sZFZhbHVlID0gZ2V0LmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgdGFyZ2V0LnNldChrZXksIHZhbHVlKTtcclxuICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogQUREICovLCBrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiIC8qIFNFVCAqLywga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn1cclxuZnVuY3Rpb24gZGVsZXRlRW50cnkoa2V5KSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XHJcbiAgICBsZXQgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xyXG4gICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQgPyBnZXQuY2FsbCh0YXJnZXQsIGtleSkgOiB1bmRlZmluZWQ7XHJcbiAgICAvLyBmb3J3YXJkIHRoZSBvcGVyYXRpb24gYmVmb3JlIHF1ZXVlaW5nIHJlYWN0aW9uc1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmRlbGV0ZShrZXkpO1xyXG4gICAgaWYgKGhhZEtleSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImRlbGV0ZVwiIC8qIERFTEVURSAqLywga2V5LCB1bmRlZmluZWQsIG9sZFZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IGhhZEl0ZW1zID0gdGFyZ2V0LnNpemUgIT09IDA7XHJcbiAgICBjb25zdCBvbGRUYXJnZXQgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICA/IGlzTWFwKHRhcmdldClcclxuICAgICAgICAgICAgPyBuZXcgTWFwKHRhcmdldClcclxuICAgICAgICAgICAgOiBuZXcgU2V0KHRhcmdldClcclxuICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIC8vIGZvcndhcmQgdGhlIG9wZXJhdGlvbiBiZWZvcmUgcXVldWVpbmcgcmVhY3Rpb25zXHJcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuY2xlYXIoKTtcclxuICAgIGlmIChoYWRJdGVtcykge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImNsZWFyXCIgLyogQ0xFQVIgKi8sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvbGRUYXJnZXQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVGb3JFYWNoKGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpIHtcclxuICAgICAgICBjb25zdCBvYnNlcnZlZCA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gb2JzZXJ2ZWRbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHdyYXAgPSBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XHJcbiAgICAgICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBJVEVSQVRFX0tFWSk7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGltcG9ydGFudDogbWFrZSBzdXJlIHRoZSBjYWxsYmFjayBpc1xyXG4gICAgICAgICAgICAvLyAxLiBpbnZva2VkIHdpdGggdGhlIHJlYWN0aXZlIG1hcCBhcyBgdGhpc2AgYW5kIDNyZCBhcmdcclxuICAgICAgICAgICAgLy8gMi4gdGhlIHZhbHVlIHJlY2VpdmVkIHNob3VsZCBiZSBhIGNvcnJlc3BvbmRpbmcgcmVhY3RpdmUvcmVhZG9ubHkuXHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHdyYXAodmFsdWUpLCB3cmFwKGtleSksIG9ic2VydmVkKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBpc1JlYWRvbmx5LCBpc1NoYWxsb3cpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldElzTWFwID0gaXNNYXAocmF3VGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBpc1BhaXIgPSBtZXRob2QgPT09ICdlbnRyaWVzJyB8fCAobWV0aG9kID09PSBTeW1ib2wuaXRlcmF0b3IgJiYgdGFyZ2V0SXNNYXApO1xyXG4gICAgICAgIGNvbnN0IGlzS2V5T25seSA9IG1ldGhvZCA9PT0gJ2tleXMnICYmIHRhcmdldElzTWFwO1xyXG4gICAgICAgIGNvbnN0IGlubmVySXRlcmF0b3IgPSB0YXJnZXRbbWV0aG9kXSguLi5hcmdzKTtcclxuICAgICAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmXHJcbiAgICAgICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIgLyogSVRFUkFURSAqLywgaXNLZXlPbmx5ID8gTUFQX0tFWV9JVEVSQVRFX0tFWSA6IElURVJBVEVfS0VZKTtcclxuICAgICAgICAvLyByZXR1cm4gYSB3cmFwcGVkIGl0ZXJhdG9yIHdoaWNoIHJldHVybnMgb2JzZXJ2ZWQgdmVyc2lvbnMgb2YgdGhlXHJcbiAgICAgICAgLy8gdmFsdWVzIGVtaXR0ZWQgZnJvbSB0aGUgcmVhbCBpdGVyYXRvclxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC8vIGl0ZXJhdG9yIHByb3RvY29sXHJcbiAgICAgICAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpbm5lckl0ZXJhdG9yLm5leHQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkb25lXHJcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlLCBkb25lIH1cclxuICAgICAgICAgICAgICAgICAgICA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlzUGFpciA/IFt3cmFwKHZhbHVlWzBdKSwgd3JhcCh2YWx1ZVsxXSldIDogd3JhcCh2YWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBpdGVyYWJsZSBwcm90b2NvbFxyXG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVhZG9ubHlNZXRob2QodHlwZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBhcmdzWzBdID8gYG9uIGtleSBcIiR7YXJnc1swXX1cIiBgIDogYGA7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtjYXBpdGFsaXplKHR5cGUpfSBvcGVyYXRpb24gJHtrZXl9ZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdG9SYXcodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHlwZSA9PT0gXCJkZWxldGVcIiAvKiBERUxFVEUgKi8gPyBmYWxzZSA6IHRoaXM7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKSB7XHJcbiAgICBjb25zdCBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyA9IHtcclxuICAgICAgICBnZXQoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzOiBoYXMkMSxcclxuICAgICAgICBhZGQsXHJcbiAgICAgICAgc2V0OiBzZXQkMSxcclxuICAgICAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxyXG4gICAgICAgIGNsZWFyLFxyXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIGZhbHNlKVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zID0ge1xyXG4gICAgICAgIGdldChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzOiBoYXMkMSxcclxuICAgICAgICBhZGQsXHJcbiAgICAgICAgc2V0OiBzZXQkMSxcclxuICAgICAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxyXG4gICAgICAgIGNsZWFyLFxyXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIHRydWUpXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zID0ge1xyXG4gICAgICAgIGdldChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSwgdHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNpemUodGhpcywgdHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXMoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoYXMkMS5jYWxsKHRoaXMsIGtleSwgdHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIgLyogQUREICovKSxcclxuICAgICAgICBzZXQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwic2V0XCIgLyogU0VUICovKSxcclxuICAgICAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiZGVsZXRlXCIgLyogREVMRVRFICovKSxcclxuICAgICAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiIC8qIENMRUFSICovKSxcclxuICAgICAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKHRydWUsIGZhbHNlKVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnMgPSB7XHJcbiAgICAgICAgZ2V0KGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldCBzaXplKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhcyhrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhhcyQxLmNhbGwodGhpcywga2V5LCB0cnVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJhZGRcIiAvKiBBREQgKi8pLFxyXG4gICAgICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJzZXRcIiAvKiBTRVQgKi8pLFxyXG4gICAgICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiAvKiBERUxFVEUgKi8pLFxyXG4gICAgICAgIGNsZWFyOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImNsZWFyXCIgLyogQ0xFQVIgKi8pLFxyXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2godHJ1ZSwgdHJ1ZSlcclxuICAgIH07XHJcbiAgICBjb25zdCBpdGVyYXRvck1ldGhvZHMgPSBbJ2tleXMnLCAndmFsdWVzJywgJ2VudHJpZXMnLCBTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaXRlcmF0b3JNZXRob2RzLmZvckVhY2gobWV0aG9kID0+IHtcclxuICAgICAgICBtdXRhYmxlSW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgICAgIHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgc2hhbGxvd0luc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMsXHJcbiAgICAgICAgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zLFxyXG4gICAgICAgIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zLFxyXG4gICAgICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNcclxuICAgIF07XHJcbn1cclxuY29uc3QgW211dGFibGVJbnN0cnVtZW50YXRpb25zLCByZWFkb25seUluc3RydW1lbnRhdGlvbnMsIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zLCBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXSA9IC8qICNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKTtcclxuZnVuY3Rpb24gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGlzUmVhZG9ubHksIHNoYWxsb3cpIHtcclxuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbnMgPSBzaGFsbG93XHJcbiAgICAgICAgPyBpc1JlYWRvbmx5XHJcbiAgICAgICAgICAgID8gc2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1xyXG4gICAgICAgICAgICA6IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zXHJcbiAgICAgICAgOiBpc1JlYWRvbmx5XHJcbiAgICAgICAgICAgID8gcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXHJcbiAgICAgICAgICAgIDogbXV0YWJsZUluc3RydW1lbnRhdGlvbnM7XHJcbiAgICByZXR1cm4gKHRhcmdldCwga2V5LCByZWNlaXZlcikgPT4ge1xyXG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiIC8qIFJBVyAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQoaGFzT3duKGluc3RydW1lbnRhdGlvbnMsIGtleSkgJiYga2V5IGluIHRhcmdldFxyXG4gICAgICAgICAgICA/IGluc3RydW1lbnRhdGlvbnNcclxuICAgICAgICAgICAgOiB0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiAvKiNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgZmFsc2UpXHJcbn07XHJcbmNvbnN0IHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6IC8qI19fUFVSRV9fKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCB0cnVlKVxyXG59O1xyXG5jb25zdCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcclxuICAgIGdldDogLyojX19QVVJFX18qLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIodHJ1ZSwgZmFsc2UpXHJcbn07XHJcbmNvbnN0IHNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcclxuICAgIGdldDogLyojX19QVVJFX18qLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIodHJ1ZSwgdHJ1ZSlcclxufTtcclxuZnVuY3Rpb24gY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSkge1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChyYXdLZXkgIT09IGtleSAmJiBoYXMuY2FsbCh0YXJnZXQsIHJhd0tleSkpIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gdG9SYXdUeXBlKHRhcmdldCk7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBSZWFjdGl2ZSAke3R5cGV9IGNvbnRhaW5zIGJvdGggdGhlIHJhdyBhbmQgcmVhY3RpdmUgYCArXHJcbiAgICAgICAgICAgIGB2ZXJzaW9ucyBvZiB0aGUgc2FtZSBvYmplY3Qke3R5cGUgPT09IGBNYXBgID8gYCBhcyBrZXlzYCA6IGBgfSwgYCArXHJcbiAgICAgICAgICAgIGB3aGljaCBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMuIGAgK1xyXG4gICAgICAgICAgICBgQXZvaWQgZGlmZmVyZW50aWF0aW5nIGJldHdlZW4gdGhlIHJhdyBhbmQgcmVhY3RpdmUgdmVyc2lvbnMgYCArXHJcbiAgICAgICAgICAgIGBvZiBhbiBvYmplY3QgYW5kIG9ubHkgdXNlIHRoZSByZWFjdGl2ZSB2ZXJzaW9uIGlmIHBvc3NpYmxlLmApO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IHJlYWN0aXZlTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3Qgc2hhbGxvd1JlYWN0aXZlTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgcmVhZG9ubHlNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCBzaGFsbG93UmVhZG9ubHlNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5mdW5jdGlvbiB0YXJnZXRUeXBlTWFwKHJhd1R5cGUpIHtcclxuICAgIHN3aXRjaCAocmF3VHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ09iamVjdCc6XHJcbiAgICAgICAgY2FzZSAnQXJyYXknOlxyXG4gICAgICAgICAgICByZXR1cm4gMSAvKiBDT01NT04gKi87XHJcbiAgICAgICAgY2FzZSAnTWFwJzpcclxuICAgICAgICBjYXNlICdTZXQnOlxyXG4gICAgICAgIGNhc2UgJ1dlYWtNYXAnOlxyXG4gICAgICAgIGNhc2UgJ1dlYWtTZXQnOlxyXG4gICAgICAgICAgICByZXR1cm4gMiAvKiBDT0xMRUNUSU9OICovO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiAwIC8qIElOVkFMSUQgKi87XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0VGFyZ2V0VHlwZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlW1wiX192X3NraXBcIiAvKiBTS0lQICovXSB8fCAhT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSlcclxuICAgICAgICA/IDAgLyogSU5WQUxJRCAqL1xyXG4gICAgICAgIDogdGFyZ2V0VHlwZU1hcCh0b1Jhd1R5cGUodmFsdWUpKTtcclxufVxyXG5mdW5jdGlvbiByZWFjdGl2ZSh0YXJnZXQpIHtcclxuICAgIC8vIGlmIHRyeWluZyB0byBvYnNlcnZlIGEgcmVhZG9ubHkgcHJveHksIHJldHVybiB0aGUgcmVhZG9ubHkgdmVyc2lvbi5cclxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0W1wiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqL10pIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIG11dGFibGVIYW5kbGVycywgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycywgcmVhY3RpdmVNYXApO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm4gYSBzaGFsbG93bHktcmVhY3RpdmUgY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290XHJcbiAqIGxldmVsIHByb3BlcnRpZXMgYXJlIHJlYWN0aXZlLiBJdCBhbHNvIGRvZXMgbm90IGF1dG8tdW53cmFwIHJlZnMgKGV2ZW4gYXQgdGhlXHJcbiAqIHJvb3QgbGV2ZWwpLlxyXG4gKi9cclxuZnVuY3Rpb24gc2hhbGxvd1JlYWN0aXZlKHRhcmdldCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIHNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzLCBzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzLCBzaGFsbG93UmVhY3RpdmVNYXApO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgcmVhZG9ubHkgY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LiBOb3RlIHRoZSByZXR1cm5lZCBjb3B5IGlzIG5vdFxyXG4gKiBtYWRlIHJlYWN0aXZlLCBidXQgYHJlYWRvbmx5YCBjYW4gYmUgY2FsbGVkIG9uIGFuIGFscmVhZHkgcmVhY3RpdmUgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gcmVhZG9ubHkodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCByZWFkb25seUhhbmRsZXJzLCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgcmVhZG9ubHlNYXApO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcmVhY3RpdmUtY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290IGxldmVsXHJcbiAqIHByb3BlcnRpZXMgYXJlIHJlYWRvbmx5LCBhbmQgZG9lcyBOT1QgdW53cmFwIHJlZnMgbm9yIHJlY3Vyc2l2ZWx5IGNvbnZlcnRcclxuICogcmV0dXJuZWQgcHJvcGVydGllcy5cclxuICogVGhpcyBpcyB1c2VkIGZvciBjcmVhdGluZyB0aGUgcHJvcHMgcHJveHkgb2JqZWN0IGZvciBzdGF0ZWZ1bCBjb21wb25lbnRzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2hhbGxvd1JlYWRvbmx5KHRhcmdldCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgdHJ1ZSwgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMsIHNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgc2hhbGxvd1JlYWRvbmx5TWFwKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIGlzUmVhZG9ubHksIGJhc2VIYW5kbGVycywgY29sbGVjdGlvbkhhbmRsZXJzLCBwcm94eU1hcCkge1xyXG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYHZhbHVlIGNhbm5vdCBiZSBtYWRlIHJlYWN0aXZlOiAke1N0cmluZyh0YXJnZXQpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLy8gdGFyZ2V0IGlzIGFscmVhZHkgYSBQcm94eSwgcmV0dXJuIGl0LlxyXG4gICAgLy8gZXhjZXB0aW9uOiBjYWxsaW5nIHJlYWRvbmx5KCkgb24gYSByZWFjdGl2ZSBvYmplY3RcclxuICAgIGlmICh0YXJnZXRbXCJfX3ZfcmF3XCIgLyogUkFXICovXSAmJlxyXG4gICAgICAgICEoaXNSZWFkb25seSAmJiB0YXJnZXRbXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIElTX1JFQUNUSVZFICovXSkpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLy8gdGFyZ2V0IGFscmVhZHkgaGFzIGNvcnJlc3BvbmRpbmcgUHJveHlcclxuICAgIGNvbnN0IGV4aXN0aW5nUHJveHkgPSBwcm94eU1hcC5nZXQodGFyZ2V0KTtcclxuICAgIGlmIChleGlzdGluZ1Byb3h5KSB7XHJcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nUHJveHk7XHJcbiAgICB9XHJcbiAgICAvLyBvbmx5IGEgd2hpdGVsaXN0IG9mIHZhbHVlIHR5cGVzIGNhbiBiZSBvYnNlcnZlZC5cclxuICAgIGNvbnN0IHRhcmdldFR5cGUgPSBnZXRUYXJnZXRUeXBlKHRhcmdldCk7XHJcbiAgICBpZiAodGFyZ2V0VHlwZSA9PT0gMCAvKiBJTlZBTElEICovKSB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxuICAgIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KHRhcmdldCwgdGFyZ2V0VHlwZSA9PT0gMiAvKiBDT0xMRUNUSU9OICovID8gY29sbGVjdGlvbkhhbmRsZXJzIDogYmFzZUhhbmRsZXJzKTtcclxuICAgIHByb3h5TWFwLnNldCh0YXJnZXQsIHByb3h5KTtcclxuICAgIHJldHVybiBwcm94eTtcclxufVxyXG5mdW5jdGlvbiBpc1JlYWN0aXZlKHZhbHVlKSB7XHJcbiAgICBpZiAoaXNSZWFkb25seSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZVtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dKTtcclxuICAgIH1cclxuICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1JlYWN0aXZlXCIgLyogSVNfUkVBQ1RJVkUgKi9dKTtcclxufVxyXG5mdW5jdGlvbiBpc1JlYWRvbmx5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovXSk7XHJcbn1cclxuZnVuY3Rpb24gaXNQcm94eSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGlzUmVhY3RpdmUodmFsdWUpIHx8IGlzUmVhZG9ubHkodmFsdWUpO1xyXG59XHJcbmZ1bmN0aW9uIHRvUmF3KG9ic2VydmVkKSB7XHJcbiAgICByZXR1cm4gKChvYnNlcnZlZCAmJiB0b1JhdyhvYnNlcnZlZFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dKSkgfHwgb2JzZXJ2ZWQpO1xyXG59XHJcbmZ1bmN0aW9uIG1hcmtSYXcodmFsdWUpIHtcclxuICAgIGRlZih2YWx1ZSwgXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi8sIHRydWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XG5cbmNvbnN0IGNvbnZlcnQgPSAodmFsKSA9PiBpc09iamVjdCh2YWwpID8gcmVhY3RpdmUodmFsKSA6IHZhbDtcclxuZnVuY3Rpb24gaXNSZWYocikge1xyXG4gICAgcmV0dXJuIEJvb2xlYW4ociAmJiByLl9fdl9pc1JlZiA9PT0gdHJ1ZSk7XHJcbn1cclxuZnVuY3Rpb24gcmVmKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVmKHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiBzaGFsbG93UmVmKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVmKHZhbHVlLCB0cnVlKTtcclxufVxyXG5jbGFzcyBSZWZJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKF9yYXdWYWx1ZSwgX3NoYWxsb3cpIHtcclxuICAgICAgICB0aGlzLl9yYXdWYWx1ZSA9IF9yYXdWYWx1ZTtcclxuICAgICAgICB0aGlzLl9zaGFsbG93ID0gX3NoYWxsb3c7XHJcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gX3NoYWxsb3cgPyBfcmF3VmFsdWUgOiBjb252ZXJ0KF9yYXdWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgdHJhY2sodG9SYXcodGhpcyksIFwiZ2V0XCIgLyogR0VUICovLCAndmFsdWUnKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgaWYgKGhhc0NoYW5nZWQodG9SYXcobmV3VmFsKSwgdGhpcy5fcmF3VmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jhd1ZhbHVlID0gbmV3VmFsO1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX3NoYWxsb3cgPyBuZXdWYWwgOiBjb252ZXJ0KG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIHRyaWdnZXIodG9SYXcodGhpcyksIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnLCBuZXdWYWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWYocmF3VmFsdWUsIHNoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgaWYgKGlzUmVmKHJhd1ZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiByYXdWYWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgUmVmSW1wbChyYXdWYWx1ZSwgc2hhbGxvdyk7XHJcbn1cclxuZnVuY3Rpb24gdHJpZ2dlclJlZihyZWYpIHtcclxuICAgIHRyaWdnZXIodG9SYXcocmVmKSwgXCJzZXRcIiAvKiBTRVQgKi8sICd2YWx1ZScsIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHJlZi52YWx1ZSA6IHZvaWQgMCk7XHJcbn1cclxuZnVuY3Rpb24gdW5yZWYocmVmKSB7XHJcbiAgICByZXR1cm4gaXNSZWYocmVmKSA/IHJlZi52YWx1ZSA6IHJlZjtcclxufVxyXG5jb25zdCBzaGFsbG93VW53cmFwSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6ICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IHVucmVmKFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikpLFxyXG4gICAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XHJcbiAgICAgICAgaWYgKGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIG9sZFZhbHVlLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3Quc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gcHJveHlSZWZzKG9iamVjdFdpdGhSZWZzKSB7XHJcbiAgICByZXR1cm4gaXNSZWFjdGl2ZShvYmplY3RXaXRoUmVmcylcclxuICAgICAgICA/IG9iamVjdFdpdGhSZWZzXHJcbiAgICAgICAgOiBuZXcgUHJveHkob2JqZWN0V2l0aFJlZnMsIHNoYWxsb3dVbndyYXBIYW5kbGVycyk7XHJcbn1cclxuY2xhc3MgQ3VzdG9tUmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihmYWN0b3J5KSB7XHJcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IHsgZ2V0LCBzZXQgfSA9IGZhY3RvcnkoKCkgPT4gdHJhY2sodGhpcywgXCJnZXRcIiAvKiBHRVQgKi8sICd2YWx1ZScpLCAoKSA9PiB0cmlnZ2VyKHRoaXMsIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnKSk7XHJcbiAgICAgICAgdGhpcy5fZ2V0ID0gZ2V0O1xyXG4gICAgICAgIHRoaXMuX3NldCA9IHNldDtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KCk7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0KG5ld1ZhbCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3VzdG9tUmVmKGZhY3RvcnkpIHtcclxuICAgIHJldHVybiBuZXcgQ3VzdG9tUmVmSW1wbChmYWN0b3J5KTtcclxufVxyXG5mdW5jdGlvbiB0b1JlZnMob2JqZWN0KSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1Byb3h5KG9iamVjdCkpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oYHRvUmVmcygpIGV4cGVjdHMgYSByZWFjdGl2ZSBvYmplY3QgYnV0IHJlY2VpdmVkIGEgcGxhaW4gb25lLmApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmV0ID0gaXNBcnJheShvYmplY3QpID8gbmV3IEFycmF5KG9iamVjdC5sZW5ndGgpIDoge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcclxuICAgICAgICByZXRba2V5XSA9IHRvUmVmKG9iamVjdCwga2V5KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuY2xhc3MgT2JqZWN0UmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfb2JqZWN0LCBfa2V5KSB7XHJcbiAgICAgICAgdGhpcy5fb2JqZWN0ID0gX29iamVjdDtcclxuICAgICAgICB0aGlzLl9rZXkgPSBfa2V5O1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb2JqZWN0W3RoaXMuX2tleV07XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgdGhpcy5fb2JqZWN0W3RoaXMuX2tleV0gPSBuZXdWYWw7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdG9SZWYob2JqZWN0LCBrZXkpIHtcclxuICAgIHJldHVybiBpc1JlZihvYmplY3Rba2V5XSlcclxuICAgICAgICA/IG9iamVjdFtrZXldXHJcbiAgICAgICAgOiBuZXcgT2JqZWN0UmVmSW1wbChvYmplY3QsIGtleSk7XHJcbn1cblxuY2xhc3MgQ29tcHV0ZWRSZWZJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGdldHRlciwgX3NldHRlciwgaXNSZWFkb25seSkge1xyXG4gICAgICAgIHRoaXMuX3NldHRlciA9IF9zZXR0ZXI7XHJcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmVmZmVjdCA9IGVmZmVjdChnZXR0ZXIsIHtcclxuICAgICAgICAgICAgbGF6eTogdHJ1ZSxcclxuICAgICAgICAgICAgc2NoZWR1bGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2RpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodG9SYXcodGhpcyksIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXNbXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovXSA9IGlzUmVhZG9ubHk7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgLy8gdGhlIGNvbXB1dGVkIHJlZiBtYXkgZ2V0IHdyYXBwZWQgYnkgb3RoZXIgcHJveGllcyBlLmcuIHJlYWRvbmx5KCkgIzMzNzZcclxuICAgICAgICBjb25zdCBzZWxmID0gdG9SYXcodGhpcyk7XHJcbiAgICAgICAgaWYgKHNlbGYuX2RpcnR5KSB7XHJcbiAgICAgICAgICAgIHNlbGYuX3ZhbHVlID0gdGhpcy5lZmZlY3QoKTtcclxuICAgICAgICAgICAgc2VsZi5fZGlydHkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJhY2soc2VsZiwgXCJnZXRcIiAvKiBHRVQgKi8sICd2YWx1ZScpO1xyXG4gICAgICAgIHJldHVybiBzZWxmLl92YWx1ZTtcclxuICAgIH1cclxuICAgIHNldCB2YWx1ZShuZXdWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX3NldHRlcihuZXdWYWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY29tcHV0ZWQoZ2V0dGVyT3JPcHRpb25zKSB7XHJcbiAgICBsZXQgZ2V0dGVyO1xyXG4gICAgbGV0IHNldHRlcjtcclxuICAgIGlmIChpc0Z1bmN0aW9uKGdldHRlck9yT3B0aW9ucykpIHtcclxuICAgICAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnM7XHJcbiAgICAgICAgc2V0dGVyID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgID8gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCB2YWx1ZSBpcyByZWFkb25seScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDogTk9PUDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucy5nZXQ7XHJcbiAgICAgICAgc2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zLnNldDtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgQ29tcHV0ZWRSZWZJbXBsKGdldHRlciwgc2V0dGVyLCBpc0Z1bmN0aW9uKGdldHRlck9yT3B0aW9ucykgfHwgIWdldHRlck9yT3B0aW9ucy5zZXQpO1xyXG59XG5cbmV4cG9ydCB7IElURVJBVEVfS0VZLCBjb21wdXRlZCwgY3VzdG9tUmVmLCBlZmZlY3QsIGVuYWJsZVRyYWNraW5nLCBpc1Byb3h5LCBpc1JlYWN0aXZlLCBpc1JlYWRvbmx5LCBpc1JlZiwgbWFya1JhdywgcGF1c2VUcmFja2luZywgcHJveHlSZWZzLCByZWFjdGl2ZSwgcmVhZG9ubHksIHJlZiwgcmVzZXRUcmFja2luZywgc2hhbGxvd1JlYWN0aXZlLCBzaGFsbG93UmVhZG9ubHksIHNoYWxsb3dSZWYsIHN0b3AsIHRvUmF3LCB0b1JlZiwgdG9SZWZzLCB0cmFjaywgdHJpZ2dlciwgdHJpZ2dlclJlZiwgdW5yZWYgfTtcbiIsImV4cG9ydCBmdW5jdGlvbiBmaW5kRGF0YUluU2VyaWVzKHgsIHNlcmllc01ldGEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllc01ldGEubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHgxID0gc2VyaWVzTWV0YVtpXS54O1xuICAgICAgICBjb25zdCB4MiA9IHNlcmllc01ldGFbaSArIDFdLng7XG5cbiAgICAgICAgaWYgKHggPiB4MSAmJiB4IDwgeDIpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYmVsb25nOiB4IC0geDEgPiB4MiAtIHggPyAnbmV4dCcgOiAnY3VycicsXG4gICAgICAgICAgICAgICAgY3Vycjogc2VyaWVzTWV0YVtpXSxcbiAgICAgICAgICAgICAgICBuZXh0OiBzZXJpZXNNZXRhW2kgKyAxXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRGF0YUluQmFyU2VyaWVzKHgsIHksIHNlcmllc01ldGEsIHNlcmllc1N0ZXApIHtcbiAgICBjb25zdCBoYWxmU3RlcCA9IHNlcmllc1N0ZXAvMjtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VyaWVzTWV0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyTWV0YSA9IHNlcmllc01ldGFbaV07XG4gICAgICAgIGNvbnN0IHByZSA9IHNlcmllc01ldGFbaSAtIDFdO1xuICAgICAgICBjb25zdCBuZXh0ID0gc2VyaWVzTWV0YVtpICsgMV07XG5cbiAgICAgICAgY29uc3QgeDEgPSBwcmUgPyBwcmUueCArIGhhbGZTdGVwIDogY3Vyck1ldGEueCAtIGhhbGZTdGVwO1xuICAgICAgICBjb25zdCB4MiA9IG5leHQgPyBuZXh0LnggLSBoYWxmU3RlcCA6IGN1cnJNZXRhLnggKyBoYWxmU3RlcDtcbiAgICAgICAgXG4gICAgICAgIGlmKHggPiB4MSAmJiB4IDwgeDIpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllcyA9IGN1cnJNZXRhLnNlcmllcztcbiAgICAgICAgICAgIGxldCBjdXJyTGVnZW5kO1xuICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHNlcmllcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1clNlcmllcyA9IHNlcmllc1tqXTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGN1clBvaW50ID0gY3VyU2VyaWVzLnA7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFyV2lkdGggPSBjdXJTZXJpZXMuYmFyV2lkdGg7XG4gICAgICAgICAgICAgICAgY29uc3QgeDEgPSBjdXJQb2ludC54O1xuICAgICAgICAgICAgICAgIGNvbnN0IHlzID0gY3VyUG9pbnQubGFzdFk7XG4gICAgICAgICAgICAgICAgY29uc3QgeTEgPSBjdXJQb2ludC55O1xuICAgICAgICAgICAgICAgIGNvbnN0IHgyID0geDEgKyBiYXJXaWR0aDtcblxuICAgICAgICAgICAgICAgIGlmKHggPiB4MSAmJiB4IDwgeDIgJiYgeSA8IHkxICYmIHkgPiB5cykge1xuICAgICAgICAgICAgICAgICAgICBjdXJyTGVnZW5kID0gc2VyaWVzW2pdLmxlZ2VuZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBiZWxvbmc6IGN1cnJNZXRhLFxuICAgICAgICAgICAgICAgIG1vdXNlOiB7IHgsIHkgfSxcbiAgICAgICAgICAgICAgICBjdXJyTGVnZW5kLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn0iLCJpbXBvcnQgY29sb3JTdHJpbmcgZnJvbSAnY29sb3Itc3RyaW5nJztcbmltcG9ydCB7IGVmZmVjdCB9IGZyb20gJ0B2dWUvcmVhY3Rpdml0eSc7XG5pbXBvcnQge1xuICAgIHZlYzIsXG59IGZyb20gJ2dsLW1hdHJpeCc7XG5pbXBvcnQgeyBBbmltZUFycmF5LCBBbmltZU51bWJlciwgbWFrZVJlbmRlckNhbGxiYWNrIH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL2FuaW1lJztcbmltcG9ydCB7XG4gICAgLy8gUkVGRVJFTkNFX1RZUEUsXG4gICAgZGlzdFRvU2VnbWVudFNxdWFyZWQsXG4gICAgcG9pbnRJblBvbHlnb24sXG4gICAgZGlzdFRvQmV6aWVyU2VnbWVudFNxdWFyZWQsXG4gICAgYmV6aWVyUG9pbnRzLFxufSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMnO1xuaW1wb3J0IHsgZmluZERhdGFJblNlcmllcyB9IGZyb20gJy4vdXRpbHMnO1xuXG5cbmNsYXNzIExpbmVDaGFydCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm5hbWUgPSAnTGluZUNoYXJ0JztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBzbW9vdGg6IGZhbHNlLFxuICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDAsXG4gICAgICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5hbmltYXRpb25Db250ZXh0ID0ge307XG4gICAgfVxuXG4gICAgYXBwbHkoZ2xvYmFsQ3R4KSB7XG4gICAgICAgIGdsb2JhbEN0eC5DaGFydC5ob29rcy5pbml0Q2hhcnQudGFwKHRoaXMubmFtZSwgY29udGV4dDJkID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdChjb250ZXh0MmQsIGdsb2JhbEN0eCk7XG4gICAgICAgIH0pO1xuICAgICAgICBnbG9iYWxDdHguQ2hhcnQuaG9va3MucmVuZGVyQ2hhcnQudGFwKHRoaXMubmFtZSwgY29udGV4dDJkID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKGNvbnRleHQyZCwgZ2xvYmFsQ3R4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGdsb2JhbEN0eC5DaGFydC5ob29rcy5hZnRlclJlbmRlckNoYXJ0LnRhcCh0aGlzLm5hbWUsIGNvbnRleHQyZCA9PiB7XG4gICAgICAgICAgICB0aGlzLmFmdGVyUmVuZGVyKGNvbnRleHQyZCwgZ2xvYmFsQ3R4KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5pdChjb250ZXh0MmQsIGdsb2JhbEN0eCkge1xuICAgICAgICBjb25zdCByZW5kZXIgPSBjb250ZXh0MmQucmVuZGVyLmJpbmQoY29udGV4dDJkKTtcbiAgICAgICAgY29uc3QgcmVuZGVyQ2FsbGJhY2sgPSBtYWtlUmVuZGVyQ2FsbGJhY2socmVuZGVyKTtcbiAgICAgICAgZ2xvYmFsQ3R4LmVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZWZmZWN0IGluaXQgbGluZWNoYXJ0Jyk7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICBsZWdlbmQsXG4gICAgICAgICAgICAgICAgc3RhY2s6IGlzU3RhY2ssXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4Lmdsb2JhbERhdGEuc291cmNlO1xuICAgICAgICAgICAgLy8gY29uc3Qge1xuICAgICAgICAgICAgLy8gICAgIHNwYW5Ib3Jpem9udGFsLFxuICAgICAgICAgICAgLy8gfSA9IGdsb2JhbEN0eC5MYXlvdXQ7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgY29udmVydERhdGFUb0Nvb3JkWCxcbiAgICAgICAgICAgICAgICBjb252ZXJ0RGF0YVRvQ29vcmRZLFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5Db29yZGluYXRlLnRyYW5zZm9ybU1ldGE7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgZ2V0Q29sb3IsXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4LnRoZW1lO1xuXG4gICAgICAgICAgICBjb25zdCBzZXJpZXNJbkNvb3JkID0gW107XG4gICAgICAgICAgICBjb25zdCBzZXJpZXNNZXRhID0gW107XG4gICAgICAgICAgICBjb25zdCBzZXJpZXMgPSBkYXRhLnNsaWNlKCk7XG4gICAgICAgICAgICBsZWdlbmQuc2xpY2UoKS5mb3JFYWNoKChkLCBzaWQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJpID0gc2VyaWVzW3NpZF0uc2xpY2UoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGVtZSA9IGdldENvbG9yKHNpZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5pbWVBcnIgPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcblxuICAgICAgICAgICAgICAgIHNlcmkuZm9yRWFjaCgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkeCA9IHZbMF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBkeTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGR5cmF3O1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVmO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdGFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHlyYXcgPSB2WzNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHkgPSB2WzFdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHkgPSBkeXJhdyA9IHZbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVmID0gZHg7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IGNvbnZlcnREYXRhVG9Db29yZFgocmVmKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeSA9IGNvbnZlcnREYXRhVG9Db29yZFkoZHkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0WSA9IGlzU3RhY2sgPyBjb252ZXJ0RGF0YVRvQ29vcmRZKHZbMl0pIDogMDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IHsgeCwgeSwgbGFzdFkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdHAgPSB7IHgsIHk6IGxhc3RZIH07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXJpZXNNZXRhW3JlZl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllc01ldGFbcmVmXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlcmllc01ldGFbcmVmXS5zZXJpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWdlbmQ6IHsgLi4uZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgZHk6IGR5cmF3LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0cCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYW5pbWVBcnIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4LCB5LCBsYXN0WSBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgsIHksIGxhc3RZIFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHNlcmllc0luQ29vcmQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRoZW1lLFxuICAgICAgICAgICAgICAgICAgICBsZWdlbmQ6IHsgLi4uZCB9LFxuICAgICAgICAgICAgICAgICAgICBpc1N0YWNrLFxuICAgICAgICAgICAgICAgICAgICBwb2ludHMsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZighdGhpcy5hbmltYXRpb25Db250ZXh0W2QubmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Db250ZXh0W2QubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHM6IG5ldyBBbmltZUFycmF5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEFycmF5OiBhbmltZUFycixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxCYWNrT25NYWtlVXAobWFrZXVwLCByYXRpbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZXVwLm1hcChwID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBwLnggKiByYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHAueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RZOiBwLmxhc3RZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja09uRWxlbWVudChuZXdTdGF0ZSwgb2xkU3RhdGUsIGlkeCwgcmF0aW8sIGN1cnJlbnRBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihyYXRpbyA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBcnJheVtpZHhdID0gey4uLm5ld1N0YXRlfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBcnJheVtpZHhdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IG9sZFN0YXRlLnggKyAobmV3U3RhdGUueC1vbGRTdGF0ZS54KSAqIHJhdGlvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IG9sZFN0YXRlLnkgKyAobmV3U3RhdGUueS1vbGRTdGF0ZS55KSAqIHJhdGlvLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0WTogb2xkU3RhdGUubGFzdFkgKyAobmV3U3RhdGUubGFzdFktb2xkU3RhdGUubGFzdFkpICogcmF0aW8sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpcFg6IG5ldyBBbmltZU51bWJlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnROdW1iZXI6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IG5ldyBBbmltZU51bWJlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnROdW1iZXI6IDAuNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJPcGFjaXR5OiBuZXcgQW5pbWVOdW1iZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TnVtYmVyOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZ2xvYmFsQ3R4LkNoYXJ0LmNoYXJ0TWV0YSwge1xuICAgICAgICAgICAgICAgIHNlcmllc0luQ29vcmQsXG4gICAgICAgICAgICAgICAgc2VyaWVzTWV0YTogT2JqZWN0LnZhbHVlcyhzZXJpZXNNZXRhKS5zb3J0KChhLCBiKSA9PiBhLnggLSBiLngpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAvLyDpgb/lhY3kuLvlm77lpJrmrKHph43nu5hcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzZXJpZXNNZXRhLFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5DaGFydC5jaGFydE1ldGE7XG4gICAgICAgICAgICBjb25zdCB7IFxuICAgICAgICAgICAgICAgIHgsIHlcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHguX21vdXNlO1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgICBib3R0b20sXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4LkxheW91dDtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1NdHhSYXdJbnZlcnQsXG4gICAgICAgICAgICAgICAgeEF4aXNZLFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5Db29yZGluYXRlLnRyYW5zZm9ybU1ldGE7XG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IGdsb2JhbEN0eC5nbG9iYWxEYXRhLnNvdXJjZS5zdGFjaztcbiAgICAgICAgICAgIGlmKHkgPiBib3R0b20gfHwgeSA8IHRvcCkge1xuICAgICAgICAgICAgICAgIGdsb2JhbEN0eC5DaGFydC5jaGFydE1ldGEuZm9jdXNlZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdmVjID0gdmVjMi5mcm9tVmFsdWVzKHgsIHkpO1xuICAgICAgICAgICAgdmVjMi50cmFuc2Zvcm1NYXQyZCh2ZWMsIHZlYywgdHJhbnNmb3JtTXR4UmF3SW52ZXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IHNlZ21lbnQgPSBmaW5kRGF0YUluU2VyaWVzKHZlY1swXSwgc2VyaWVzTWV0YSk7XG5cbiAgICAgICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgWyB4LCB5IF0gPSB2ZWM7XG4gICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICBjdXJyLCBuZXh0LFxuICAgICAgICAgICAgICAgIH0gPSBzZWdtZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBjdXJyLnNlcmllcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgY29uc3QgY3MgPSBjdXJyLnNlcmllcztcbiAgICAgICAgICAgICAgICBjb25zdCBucyA9IG5leHQuc2VyaWVzO1xuICAgICAgICAgICAgICAgIGxldCBzZm9jdXMgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChzdGFjayAmJiB0aGlzLm9wdGlvbnMuZmlsbCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYjEgPSBbIGNzW2ldLnAueCwgY3NbaV0ucC55IF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiMiA9IGNzW2kgLSAxXSA/IFsgY3NbaSAtIDFdLnAueCwgY3NbaSAtIDFdLnAueSBdIDogWyBjdXJyLngsIHhBeGlzWSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjMSA9IFsgbnNbaV0ucC54LCBuc1tpXS5wLnkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMyID0gbnNbaSAtIDFdID8gWyBuc1tpIC0gMV0ucC54LCBuc1tpIC0gMV0ucC55IF0gOiBbIG5leHQueCwgeEF4aXNZIF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnRJblBvbHlnb24oWyB4LCB5IF0sIFsgYjIsIGIxLCBjMSwgYzIgXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZm9jdXMgPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbnNbaV0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IGNzW2ldLnA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjID0gbnNbaV0ucDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSB0aGlzLm9wdGlvbnMuc21vb3RoID8gZGlzdFRvQmV6aWVyU2VnbWVudFNxdWFyZWQgOiBkaXN0VG9TZWdtZW50U3F1YXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gZnVuYyh2ZWMsIFsgYi54LCBiLnkgXSwgWyBjLngsIGMueSBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNmb2N1cyA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBiZWxvbmcgPSBzZWdtZW50W3NlZ21lbnQuYmVsb25nXTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhID0geyBiZWxvbmcsIG1vdXNlOiB7IHgsIHkgfSB9O1xuICAgICAgICAgICAgICAgIGlmIChzZm9jdXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0YS5jdXJyTGVnZW5kID0gY3Vyci5zZXJpZXNbc2ZvY3VzXS5sZWdlbmQ7XG4gICAgICAgICAgICAgICAgfSAgXG4gICAgICAgICAgICAgICAgZ2xvYmFsQ3R4LkNoYXJ0LmNoYXJ0TWV0YS5mb2N1c2VkID0gbWV0YTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsQ3R4LkNoYXJ0LmNoYXJ0TWV0YS5mb2N1c2VkID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZHJhd1Nlcmllc0xpbmUoY3R4LCBkYXRhLCBzbW9vdGgsIGdldFBvaW50KSB7XG4gICAgICAgIGZvciAobGV0IGwgPSAwOyBsIDwgZGF0YS5sZW5ndGggLSAxOyBsKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHAyID0gZGF0YVtsICsgMV07XG4gICAgICAgICAgICBpZiAoc21vb3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcDEgPSBkYXRhW2xdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvaW50cyA9IGJlemllclBvaW50cyhnZXRQb2ludChwMSksIGdldFBvaW50KHAyKSk7XG4gICAgICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oLi4ucG9pbnRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUby5hcHBseShjdHgsIGdldFBvaW50KHAyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3TGluZShsZ25hbWUsIHRoZW1lLCBzcGFuVmVydGljYWwsIGN0eCwgeEF4aXNZLCBpc1N0YWNrKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRBbmltZUNvbnRleHQgPSB0aGlzLmFuaW1hdGlvbkNvbnRleHRbbGduYW1lXTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc21vb3RoLCBcbiAgICAgICAgICAgIGZpbGxcbiAgICAgICAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguZnVuY3Rpb25DYWxsV2l0aER5bmFtaWNQYXJhbWV0ZXIoXG4gICAgICAgICAgICAncmVjdCcsIDAsIDAsXG4gICAgICAgICAgICAoKSA9PiBjdXJyZW50QW5pbWVDb250ZXh0LmNsaXBYLnZhbHVlLFxuICAgICAgICAgICAgc3BhblZlcnRpY2FsXG4gICAgICAgICk7XG4gICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgICAgICBjb25zdCBnZXRQID0gcCA9PiBbcC54LCBwLnldO1xuICAgICAgICBjb25zdCBnZXRQbGFzdCA9IHAgPT4gW3AueCwgcC5sYXN0WV07XG5cbiAgICAgICAgY3R4LmZ1bmN0aW9uc0NhbGwoXG4gICAgICAgICAgICAoY3R4KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGN1cnJlbnRBbmltZUNvbnRleHQucG9pbnRzLnZhbHVlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oZGF0YVswXS54LCBkYXRhWzBdLnkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1Nlcmllc0xpbmUoY3R4LCBkYXRhLCBzbW9vdGgsIGdldFApO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICBpZihmaWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGxDb2xvciA9IGNvbG9yU3RyaW5nLnRvLnJnYihbXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGVtZS5jb2xvci5zbGljZSgwLCAzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBbmltZUNvbnRleHQub3BhY2l0eS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGlzU3RhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldmVyc2VkREFUQSA9IGRhdGEuc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKHJldmVyc2VkREFUQVswXS54LCByZXZlcnNlZERBVEFbMF0ubGFzdFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3U2VyaWVzTGluZShjdHgsIHJldmVyc2VkREFUQSwgc21vb3RoLCBnZXRQbGFzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oZGF0YVtkYXRhLmxlbmd0aCAtIDFdLngsIHhBeGlzWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKGRhdGFbMF0ueCwgeEF4aXNZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZmlsbENvbG9yO1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXIoY3R4LCBnbG9iYWxDdHgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3JlbmRlcicpO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzcGFuVmVydGljYWwsXG4gICAgICAgIH0gPSBnbG9iYWxDdHguTGF5b3V0O1xuICAgICAgICBjb25zdCBzZXJpZXNJbkNvb3JkID0gZ2xvYmFsQ3R4LkNoYXJ0LmNoYXJ0TWV0YS5zZXJpZXNJbkNvb3JkO1xuICAgICAgICBjb25zdCB4QXhpc1kgPSBnbG9iYWxDdHguQ29vcmRpbmF0ZS50cmFuc2Zvcm1NZXRhLnhBeGlzWTtcblxuICAgICAgICBzZXJpZXNJbkNvb3JkLmZvckVhY2goKHsgbGVnZW5kLCB0aGVtZSwgaXNTdGFjayB9KSA9PiB7XG4gICAgICAgICAgICBjdHguYWRkQ29uZGl0aW9uQmxvY2tCZWdpbigoKSA9PiBsZWdlbmQuZGlzYWJsZWQpO1xuICAgICAgICAgICAgY29uc3QgbGduYW1lID0gbGVnZW5kLm5hbWU7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50QW5pbWVDb250ZXh0ID0gdGhpcy5hbmltYXRpb25Db250ZXh0W2xnbmFtZV07XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDE7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjdHguZmlsbFN0eWxlID0gY29sb3JTdHJpbmcudG8ucmdiKFtcbiAgICAgICAgICAgICAgICAuLi50aGVtZS5jb2xvci5zbGljZSgwLCAzKSxcbiAgICAgICAgICAgICAgICBjdXJyZW50QW5pbWVDb250ZXh0LnN1Yk9wYWNpdHkudmFsdWUsXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgdGhpcy5kcmF3TGluZShsZ25hbWUsIHRoZW1lLCBzcGFuVmVydGljYWwsIGN0eCwgeEF4aXNZLCBpc1N0YWNrKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICBjdHguYWRkQ29uZGl0aW9uQmxvY2tFbmQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWZ0ZXJSZW5kZXIoY29udGV4dDJkLCBnbG9iYWxDdHgpIHtcbiAgICAgICAgZ2xvYmFsQ3R4LmVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgc2VyaWVzSW5Db29yZCxcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHguQ2hhcnQuY2hhcnRNZXRhO1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHNwYW5Ib3Jpem9udGFsLFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5MYXlvdXQ7XG5cbiAgICAgICAgICAgIHNlcmllc0luQ29vcmQuZm9yRWFjaCgoeyBsZWdlbmQsIHBvaW50cyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Db250ZXh0W2xlZ2VuZC5uYW1lXS5jbGlwWC5hbmltZVRvKHNwYW5Ib3Jpem9udGFsKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRleHRbbGVnZW5kLm5hbWVdLnBvaW50cy5hbmltZVRvKHBvaW50cy5zbGljZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBnbG9iYWxDdHguZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzZWQgPSBnbG9iYWxDdHguQ2hhcnQuY2hhcnRNZXRhLmZvY3VzZWQ7XG4gICAgICAgICAgICBjb25zdCBsZWdlbmQgPSBnbG9iYWxDdHguZ2xvYmFsRGF0YS5zb3VyY2UubGVnZW5kO1xuICAgICAgICAgICAgbGVnZW5kLmZpbHRlcihsID0+ICFsLmRpc2FibGVkKS5mb3JFYWNoKGwgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBsLm5hbWU7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VyciA9IHRoaXMuYW5pbWF0aW9uQ29udGV4dFtuYW1lXTtcbiAgICAgICAgICAgICAgICBpZihmb2N1c2VkICYmIGZvY3VzZWQuY3VyckxlZ2VuZCkge1xuICAgICAgICAgICAgICAgICAgICBpZihuYW1lID09PSBmb2N1c2VkLmN1cnJMZWdlbmQubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyci5vcGFjaXR5LmFuaW1lVG8oMC40KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIuc3ViT3BhY2l0eS5hbmltZVRvKDEpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyci5vcGFjaXR5LmFuaW1lVG8oMC4xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIuc3ViT3BhY2l0eS5hbmltZVRvKDAuNik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdXJyLm9wYWNpdHkuYW5pbWVUbygwLjQpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyLnN1Yk9wYWNpdHkuYW5pbWVUbygxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBMaW5lQ2hhcnQ7IiwiaW1wb3J0IHsgZWZmZWN0IH0gZnJvbSAnQHZ1ZS9yZWFjdGl2aXR5JztcbmltcG9ydCB7XG4gICAgdmVjMixcbn0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCBjb2xvclN0cmluZyBmcm9tICdjb2xvci1zdHJpbmcnO1xuaW1wb3J0IHsgQW5pbWVBcnJheSwgQW5pbWVOdW1iZXIsIG1ha2VSZW5kZXJDYWxsYmFjayB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi9hbmltZSc7XG5pbXBvcnQgeyBmaW5kRGF0YUluQmFyU2VyaWVzIH0gZnJvbSAnLi91dGlscyc7XG5jbGFzcyBCYXJDaGFydCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubmFtZSA9ICdCYXJDaGFydCc7XG4gICAgICAgIC8vIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAvLyAgICAgZ2FwOiA1LFxuICAgICAgICAvLyB9LCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRleHQgPSB7fTtcbiAgICB9XG5cbiAgICBhcHBseShnbG9iYWxDdHgpIHtcbiAgICAgICAgZ2xvYmFsQ3R4LkNoYXJ0Lmhvb2tzLmluaXRDaGFydC50YXAodGhpcy5uYW1lLCBjb250ZXh0MmQgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbml0KGNvbnRleHQyZCwgZ2xvYmFsQ3R4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGdsb2JhbEN0eC5DaGFydC5ob29rcy5yZW5kZXJDaGFydC50YXAodGhpcy5uYW1lLCBjb250ZXh0MmQgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoY29udGV4dDJkLCBnbG9iYWxDdHgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZ2xvYmFsQ3R4LkNoYXJ0Lmhvb2tzLmFmdGVyUmVuZGVyQ2hhcnQudGFwKHRoaXMubmFtZSwgY29udGV4dDJkID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXIoY29udGV4dDJkLCBnbG9iYWxDdHgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpbml0KGNvbnRleHQyZCwgZ2xvYmFsQ3R4KSB7XG4gICAgICAgIGNvbnN0IHJlbmRlciA9IGNvbnRleHQyZC5yZW5kZXIuYmluZChjb250ZXh0MmQpO1xuICAgICAgICBjb25zdCByZW5kZXJDYWxsYmFjayA9IG1ha2VSZW5kZXJDYWxsYmFjayhyZW5kZXIpO1xuICAgICAgICBnbG9iYWxDdHguZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlZmZlY3QgaW5pdCBsaW5lY2hhcnQnKTtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIGxlZ2VuZCxcbiAgICAgICAgICAgICAgICBzdGFjazogaXNTdGFjayxcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHguZ2xvYmFsRGF0YS5zb3VyY2U7XG5cbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzcGFuSG9yaXpvbnRhbFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5MYXlvdXQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBjb252ZXJ0RGF0YVRvQ29vcmRYLFxuICAgICAgICAgICAgICAgIGNvbnZlcnREYXRhVG9Db29yZFksXG4gICAgICAgICAgICAgICAgeEZsb2F0LFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5Db29yZGluYXRlLnRyYW5zZm9ybU1ldGE7XG5cbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBnZXRDb2xvcixcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHgudGhlbWU7XG5cbiAgICAgICAgICAgIGxldCBiYXJXaWR0aDtcbiAgICAgICAgICAgIGxldCBnYXA7XG4gICAgICAgICAgICBsZXQgc2VyaWVzX3NpemUgPSAwO1xuXG4gICAgICAgICAgICBkYXRhLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICAgICAgc2VyaWVzX3NpemUgPSBNYXRoLm1heChkLmxlbmd0aCwgc2VyaWVzX3NpemUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBsZWdlbmRMZW5ndGggPSBsZWdlbmQuZmlsdGVyKGwgPT4gIWwuZGlzYWJsZWQpLmxlbmd0aDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc3Bhbkhvcml6b250YWx3aXRocGFkZGluZyA9IChzcGFuSG9yaXpvbnRhbCAtIHhGbG9hdCAqIDIpO1xuICAgICAgICAgICAgbGV0IHNlcmllc19zdGVwID0gc3Bhbkhvcml6b250YWx3aXRocGFkZGluZyAvIHNlcmllc19zaXplO1xuICAgICAgICAgICAgaWYgKGlzU3RhY2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXJMZW5ndGggPSBzZXJpZXNfc2l6ZSArIHNlcmllc19zaXplIC0gMTtcbiAgICAgICAgICAgICAgICBpZihiYXJMZW5ndGggPiAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgYmFyV2lkdGggPSBzcGFuSG9yaXpvbnRhbHdpdGhwYWRkaW5nIC8gc2VyaWVzX3NpemU7XG4gICAgICAgICAgICAgICAgICAgIGdhcCA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYmFyV2lkdGggPSBzcGFuSG9yaXpvbnRhbHdpdGhwYWRkaW5nIC8gYmFyTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBnYXAgPSBiYXJXaWR0aC8yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFyTGVuZ3RoID0gc2VyaWVzX3NpemUgKiBsZWdlbmRMZW5ndGggKyBzZXJpZXNfc2l6ZSAtIDE7XG4gICAgICAgICAgICAgICAgaWYoYmFyTGVuZ3RoID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhcldpZHRoID0gc3Bhbkhvcml6b250YWx3aXRocGFkZGluZyAvIHNlcmllc19zaXplIC8gbGVnZW5kTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBnYXAgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJhcldpZHRoID0gc3Bhbkhvcml6b250YWx3aXRocGFkZGluZyAvIGJhckxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZ2FwID0gYmFyV2lkdGgvMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNlcmllc0luQ29vcmQgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllc01ldGEgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllcyA9IGRhdGEuc2xpY2UoKTtcbiAgICAgICAgICAgIGxldCBsaWQgPSAwO1xuICAgICAgICAgICAgbGVnZW5kLmZvckVhY2goKGQsIHNpZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcmkgPSBzZXJpZXNbc2lkXS5zbGljZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lID0gZ2V0Q29sb3Ioc2lkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmltZUFyciA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvaW50cyA9IFtdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNlcmkuZm9yRWFjaCgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkeCA9IHZbMF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBkeTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGR5cmF3O1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVmO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdGFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHlyYXcgPSB2WzNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHkgPSB2WzFdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHkgPSBkeXJhdyA9IHZbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZWYgPSBkeDtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB4ID0gY29udmVydERhdGFUb0Nvb3JkWChyZWYpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gY29udmVydERhdGFUb0Nvb3JkWShkeSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RZID0gaXNTdGFjayA/IGNvbnZlcnREYXRhVG9Db29yZFkodlsyXSkgOiAwO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXJ4ID0gaXNTdGFjayA/ICh4IC0gZ2FwKSA6ICh4IC0gc2VyaWVzX3N0ZXAvMiArIGdhcCArIGJhcldpZHRoICogbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IHsgXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBiYXJ4LCB5LCBsYXN0WVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0cCA9IHsgeDogYmFyeCwgeTogbGFzdFkgfTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlcmllc01ldGFbcmVmXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzTWV0YVtyZWZdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNNZXRhW3JlZl0uc2VyaWVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVnZW5kOiB7IC4uLmQgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR5OiBkeXJhdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdHAsXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBhbmltZUFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGJhcngsIHk6IDAsIGxhc3RZOiAwLCBiYXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogYmFyeCwgeSwgbGFzdFksIGJhcldpZHRoXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlcmllc0luQ29vcmQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRoZW1lLFxuICAgICAgICAgICAgICAgICAgICBsZWdlbmQ6IHsgLi4uZCB9LFxuICAgICAgICAgICAgICAgICAgICBpc1N0YWNrLFxuICAgICAgICAgICAgICAgICAgICBwb2ludHMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYoIWQuZGlzYWJsZWQpe1xuICAgICAgICAgICAgICAgICAgICBsaWQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuYW5pbWF0aW9uQ29udGV4dFtkLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uQ29udGV4dFtkLm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiBuZXcgQW5pbWVBcnJheSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBcnJheTogYW5pbWVBcnIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDU1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJDYWxsYmFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsQmFja09uTWFrZVVwKG1ha2V1cCwgcmF0aW8sIHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0eCA9IHN0YXJ0ID8gc3RhcnQueCA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJhdGlvLCBzdGFydHgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtldXAubWFwKHAgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IChwLnggLSBzdGFydHgpICogcmF0aW8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tPbkVsZW1lbnQobmV3U3RhdGUsIG9sZFN0YXRlLCBpZHgsIHJhdGlvLCBjdXJyZW50QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmF0aW8gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QXJyYXlbaWR4XSA9IHsuLi5uZXdTdGF0ZX07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QXJyYXlbaWR4XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBvbGRTdGF0ZS54ICsgKG5ld1N0YXRlLngtb2xkU3RhdGUueCkgKiByYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBvbGRTdGF0ZS55ICsgKG5ld1N0YXRlLnktb2xkU3RhdGUueSkgKiByYXRpbywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFk6IG9sZFN0YXRlLmxhc3RZICsgKG5ld1N0YXRlLmxhc3RZLW9sZFN0YXRlLmxhc3RZKSAqIHJhdGlvLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXJXaWR0aDogb2xkU3RhdGUuYmFyV2lkdGggKyAobmV3U3RhdGUuYmFyV2lkdGgtb2xkU3RhdGUuYmFyV2lkdGgpICogcmF0aW8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGlwWDogbmV3IEFuaW1lTnVtYmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBzdGFydE51bWJlcjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBkdXJhdGlvbjogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICByZW5kZXJDYWxsYmFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogbmV3IEFuaW1lTnVtYmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE51bWJlcjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWJPcGFjaXR5OiBuZXcgQW5pbWVOdW1iZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHN0YXJ0TnVtYmVyOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGR1cmF0aW9uOiAyNTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmVuZGVyQ2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9KSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihnbG9iYWxDdHguQ2hhcnQuY2hhcnRNZXRhLCB7XG4gICAgICAgICAgICAgICAgc2VyaWVzSW5Db29yZCxcbiAgICAgICAgICAgICAgICBzZXJpZXNNZXRhOiBPYmplY3QudmFsdWVzKHNlcmllc01ldGEpLnNvcnQoKGEsIGIpID0+IGEueCAtIGIueCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzZXJpZXNNZXRhLFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5DaGFydC5jaGFydE1ldGE7XG4gICAgICAgICAgICBjb25zdCB7IFxuICAgICAgICAgICAgICAgIHgsIHlcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHguX21vdXNlO1xuXG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgICAgIGJvdHRvbSxcbiAgICAgICAgICAgICAgICBzZXJpZXNTdGVwXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4LkxheW91dDtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1NdHhSYXdJbnZlcnQsXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4LkNvb3JkaW5hdGUudHJhbnNmb3JtTWV0YTtcblxuICAgICAgICAgICAgaWYoeSA+IGJvdHRvbSB8fCB5IDwgdG9wKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsQ3R4LkNoYXJ0LmNoYXJ0TWV0YS5mb2N1c2VkID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHZlYyA9IHZlYzIuZnJvbVZhbHVlcyh4LCB5KTtcbiAgICAgICAgICAgIHZlYzIudHJhbnNmb3JtTWF0MmQodmVjLCB2ZWMsIHRyYW5zZm9ybU10eFJhd0ludmVydCk7XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gZmluZERhdGFJbkJhclNlcmllcyh2ZWNbMF0sIHZlY1sxXSwgc2VyaWVzTWV0YSwgc2VyaWVzU3RlcCk7XG4gICAgICAgICAgICBpZihtZXRhKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsQ3R4LkNoYXJ0LmNoYXJ0TWV0YS5mb2N1c2VkID0gbWV0YTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsQ3R4LkNoYXJ0LmNoYXJ0TWV0YS5mb2N1c2VkID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoY3R4LCBnbG9iYWxDdHgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc2VyaWVzSW5Db29yZCxcbiAgICAgICAgfSA9IGdsb2JhbEN0eC5DaGFydC5jaGFydE1ldGE7XG4gICAgICAgIHNlcmllc0luQ29vcmQuZm9yRWFjaCgoeyB0aGVtZSwgbGVnZW5kIH0pID0+IHtcbiAgICAgICAgICAgIGN0eC5hZGRDb25kaXRpb25CbG9ja0JlZ2luKCgpID0+IGxlZ2VuZC5kaXNhYmxlZCk7XG4gICAgICAgICAgICBjb25zdCBsZ25hbWUgPSBsZWdlbmQubmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBbmltZUNvbnRleHQgPSB0aGlzLmFuaW1hdGlvbkNvbnRleHRbbGduYW1lXTtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHgubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgIGN0eC5mdW5jdGlvbnNDYWxsKFxuICAgICAgICAgICAgICAgIChjdHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yU3RyaW5nLnRvLnJnYihbXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGVtZS5jb2xvci5zbGljZSgwLCAzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBbmltZUNvbnRleHQub3BhY2l0eS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjdXJyZW50QW5pbWVDb250ZXh0LnBvaW50cy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbCA9IDA7IGwgPCBkYXRhLmxlbmd0aDsgbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gZGF0YVtsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChwLngsIHAubGFzdFksIHAuYmFyV2lkdGgsIHAueSAtIHAubGFzdFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3QocC54LCBwLmxhc3RZLCBwLmJhcldpZHRoLCBwLnkgLSBwLmxhc3RZKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgY3R4LmFkZENvbmRpdGlvbkJsb2NrRW5kKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFmdGVyUmVuZGVyKGNvbnRleHQyZCwgZ2xvYmFsQ3R4KSB7XG4gICAgICAgIGdsb2JhbEN0eC5lZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHNlcmllc0luQ29vcmQsXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4LkNoYXJ0LmNoYXJ0TWV0YTtcbiAgICAgICAgICAgIHNlcmllc0luQ29vcmQuZm9yRWFjaCgoeyBsZWdlbmQsIHBvaW50cyB9KSA9PiB7ICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uQ29udGV4dFtsZWdlbmQubmFtZV0ucG9pbnRzLmFuaW1lVG8ocG9pbnRzLnNsaWNlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGdsb2JhbEN0eC5lZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZm9jdXNlZCA9IGdsb2JhbEN0eC5DaGFydC5jaGFydE1ldGEuZm9jdXNlZDtcbiAgICAgICAgICAgIGNvbnN0IGxlZ2VuZCA9IGdsb2JhbEN0eC5nbG9iYWxEYXRhLnNvdXJjZS5sZWdlbmQ7XG4gICAgICAgICAgICBsZWdlbmQuZmlsdGVyKGwgPT4gIWwuZGlzYWJsZWQpLmZvckVhY2gobCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGwubmFtZTtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyID0gdGhpcy5hbmltYXRpb25Db250ZXh0W25hbWVdO1xuICAgICAgICAgICAgICAgIGlmKGZvY3VzZWQgJiYgZm9jdXNlZC5jdXJyTGVnZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKG5hbWUgPT09IGZvY3VzZWQuY3VyckxlZ2VuZC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyLm9wYWNpdHkuYW5pbWVUbygxKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIub3BhY2l0eS5hbmltZVRvKDAuNik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdXJyLm9wYWNpdHkuYW5pbWVUbygxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXJDaGFydDsiLCJpbXBvcnQgeyBlZmZlY3QgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHtcbiAgICB2ZWMyXG59IGZyb20gJ2dsLW1hdHJpeCc7XG5pbXBvcnQgY29sb3JTdHJpbmcgZnJvbSAnY29sb3Itc3RyaW5nJztcbmltcG9ydCB7IGNsb25lIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEFuaW1lQXJyYXksIG1ha2VSZW5kZXJDYWxsYmFjayB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi9hbmltZSc7XG5cbmNsYXNzIFBpZUNoYXJ0IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJQaWVDaGFydFwiO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRleHQgPSB7fTtcbiAgICB9XG5cbiAgICBhcHBseShnbG9iYWxDdHgpIHtcbiAgICAgICAgZ2xvYmFsQ3R4LkNoYXJ0Lmhvb2tzLmluaXRDaGFydC50YXAodGhpcy5uYW1lLCBjb250ZXh0MmQgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbml0KGNvbnRleHQyZCwgZ2xvYmFsQ3R4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGdsb2JhbEN0eC5DaGFydC5ob29rcy5yZW5kZXJDaGFydC50YXAodGhpcy5uYW1lLCBjb250ZXh0MmQgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoY29udGV4dDJkLCBnbG9iYWxDdHgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZ2xvYmFsQ3R4LkNoYXJ0Lmhvb2tzLmFmdGVyUmVuZGVyQ2hhcnQudGFwKHRoaXMubmFtZSwgY29udGV4dDJkID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXIoY29udGV4dDJkLCBnbG9iYWxDdHgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpbml0KGNvbnRleHQyZCwgZ2xvYmFsQ3R4KSB7XG4gICAgICAgIGNvbnN0IHJlbmRlciA9IGNvbnRleHQyZC5yZW5kZXIuYmluZChjb250ZXh0MmQpO1xuICAgICAgICBjb25zdCByZW5kZXJDYWxsYmFjayA9IG1ha2VSZW5kZXJDYWxsYmFjayhyZW5kZXIpO1xuICAgICAgICBnbG9iYWxDdHguZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIGxlZ2VuZCxcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHguZ2xvYmFsRGF0YS5zb3VyY2U7XG5cbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzcGFuSG9yaXpvbnRhbCxcbiAgICAgICAgICAgICAgICBzcGFuVmVydGljYWwsXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4LkxheW91dDtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBnZXRDb2xvcixcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHgudGhlbWU7XG4gICAgICAgICAgICBjb25zdCBwYWRkaW5nID0gNTA7XG4gICAgICAgICAgICBjb25zdCByYWRpdXMgPSAoTWF0aC5taW4oc3Bhbkhvcml6b250YWwsIHNwYW5WZXJ0aWNhbCkgLSBwYWRkaW5nKSAvMjtcbiAgICAgICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICAgICAgICAgICAgbGV0IHN1bXVwID0gMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGVnZW5kLmZvckVhY2goKGwsIHNpZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKCFsLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1bXVwICs9IGRhdGFbc2lkXTtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBzZXJpZXNJbkNvb3JkID0gW107XG4gICAgICAgICAgICAvLyBjb25zdCBzZXJpZXNNZXRhID0gW107XG4gICAgICAgICAgICBsZXQgYWNjdSA9IDA7XG4gICAgICAgICAgICBsZWdlbmQuZm9yRWFjaCgobCwgc2lkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGhlbWUgPSBnZXRDb2xvcihzaWQpO1xuICAgICAgICAgICAgICAgIGxldCBzcGFuUmFkaXVzID0gMDtcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogYWNjdSxcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxlQW5nbGU6IGFjY3UgKyBzcGFuUmFkaXVzIC8gMixcbiAgICAgICAgICAgICAgICAgICAgZW5kQW5nbGU6IGFjY3UgKyBzcGFuUmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgIHNwYW5SYWRpdXMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZighbC5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkID0gZGF0YVtzaWRdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByYXRpbyA9IGQgLyBzdW11cDtcbiAgICAgICAgICAgICAgICAgICAgc3BhblJhZGl1cyA9IHJhdGlvICogTWF0aC5QSSAqIDI7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWlkZGxlQW5nbGU6IGFjY3UgKyBzcGFuUmFkaXVzIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiBhY2N1ICsgc3BhblJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5SYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGFjY3UgKz0gc3BhblJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNlcmllc0luQ29vcmQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRoZW1lLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZDogbCxcbiAgICAgICAgICAgICAgICAgICAgcCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZighdGhpcy5hbmltYXRpb25Db250ZXh0LmFyY3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmltZUFyciA9IGxlZ2VuZC5tYXAoKCkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogMCxcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxlQW5nbGU6IDAsXG4gICAgICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiAwLFxuICAgICAgICAgICAgICAgICAgICBzcGFuUmFkaXVzOiAwLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uQ29udGV4dC5hcmNzID0gXG4gICAgICAgICAgICAgICAgICAgIG5ldyBBbmltZUFycmF5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QXJyYXk6IGFuaW1lQXJyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDU1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbEJhY2tPbk1ha2VVcChtYWtldXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZXVwLm1hcCgoKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaWRkbGVBbmdsZTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQW5nbGU6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhblJhZGl1czogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tPbkVsZW1lbnQobmV3U3RhdGUsIG9sZFN0YXRlLCBpZHgsIHJhdGlvLCBjdXJyZW50QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihyYXRpbyA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEFycmF5W2lkeF0gPSB7Li4ubmV3U3RhdGV9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBcnJheVtpZHhdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogb2xkU3RhdGUuc3RhcnRBbmdsZSArIChuZXdTdGF0ZS5zdGFydEFuZ2xlLW9sZFN0YXRlLnN0YXJ0QW5nbGUpICogcmF0aW8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaWRkbGVBbmdsZTogb2xkU3RhdGUubWlkZGxlQW5nbGUgKyAobmV3U3RhdGUubWlkZGxlQW5nbGUtb2xkU3RhdGUubWlkZGxlQW5nbGUpICogcmF0aW8sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQW5nbGU6IG9sZFN0YXRlLmVuZEFuZ2xlICsgKG5ld1N0YXRlLmVuZEFuZ2xlLW9sZFN0YXRlLmVuZEFuZ2xlKSAqIHJhdGlvLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5SYWRpdXM6IG9sZFN0YXRlLnNwYW5SYWRpdXMgKyAobmV3U3RhdGUuc3BhblJhZGl1cy1vbGRTdGF0ZS5zcGFuUmFkaXVzKSAqIHJhdGlvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBvbGRTdGF0ZS5yYWRpdXMgKyAobmV3U3RhdGUucmFkaXVzLW9sZFN0YXRlLnJhZGl1cykgKiByYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGdsb2JhbEN0eC5DaGFydC5jaGFydE1ldGEsIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNJbkNvb3JkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgc2VyaWVzSW5Db29yZCxcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHguQ2hhcnQuY2hhcnRNZXRhO1xuICAgICAgICAgICAgY29uc3QgeyBcbiAgICAgICAgICAgICAgICB4LCB5XG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4Ll9tb3VzZTtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgICAgYm90dG9tLFxuICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgICAgcmlnaHRcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHguTGF5b3V0O1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU10eFJhd0ludmVydCxcbiAgICAgICAgICAgIH0gPSBnbG9iYWxDdHguQ29vcmRpbmF0ZS50cmFuc2Zvcm1NZXRhO1xuXG4gICAgICAgICAgICBpZih5ID4gYm90dG9tIHx8IHkgPCB0b3AgfHwgeCA8IGxlZnQgfHwgeCA+IHJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsQ3R4LkNoYXJ0LmNoYXJ0TWV0YS5mb2N1c2VkID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHZlYyA9IHZlYzIuZnJvbVZhbHVlcyh4LCB5KTtcbiAgICAgICAgICAgIHZlYzIudHJhbnNmb3JtTWF0MmQodmVjLCB2ZWMsIHRyYW5zZm9ybU10eFJhd0ludmVydCk7XG4gICAgICAgICAgICBjb25zdCB4MSA9IHZlY1swXTtcbiAgICAgICAgICAgIGNvbnN0IHkxID0gdmVjWzFdO1xuICAgICAgICAgICAgY29uc3QgZGlzdCA9IE1hdGguaHlwb3QoeDEsIHkxKTtcbiAgICAgICAgICAgIGlmKGRpc3QgPiB0aGlzLnJhZGl1cykge1xuICAgICAgICAgICAgICAgIGdsb2JhbEN0eC5DaGFydC5jaGFydE1ldGEuZm9jdXNlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHgyID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHkyID0gMTtcbiAgICAgICAgICAgIGNvbnN0IGRvdCA9IHgxKngyICsgeTEqeTI7XG4gICAgICAgICAgICBjb25zdCBkZXQgPSB4MSp5MiAtIHkxKngyO1xuXG4gICAgICAgICAgICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKGRvdCwgZGV0KTtcbiAgICAgICAgICAgIGlmKGFuZ2xlIDwgMCkge1xuICAgICAgICAgICAgICAgIGFuZ2xlID0gTWF0aC5QSSoyICsgYW5nbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbG9iYWxDdHguQ2hhcnQuY2hhcnRNZXRhLmZvY3VzZWQgPSBzZXJpZXNJbkNvb3JkLmZpbmRJbmRleCgocykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgc3RhcnRBbmdsZSwgZW5kQW5nbGUgfSA9IHMucDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5nbGUgPiBzdGFydEFuZ2xlICYmIGFuZ2xlIDwgZW5kQW5nbGU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoY3R4LCBnbG9iYWxDdHgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc2VyaWVzSW5Db29yZCxcbiAgICAgICAgfSA9IGdsb2JhbEN0eC5DaGFydC5jaGFydE1ldGE7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGZvbnRTaXplLFxuICAgICAgICB9ID0gZ2xvYmFsQ3R4LnRoZW1lO1xuXG4gICAgICAgIHNlcmllc0luQ29vcmQuZm9yRWFjaCgoeyB0aGVtZSwgbGVnZW5kLCByYWRpdXMgfSwgc2lkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0UmFkaXVzID0gcmFkaXVzICsgMjA7XG4gICAgICAgICAgICAvLyBjb25zdCBsZ25hbWUgPSBsZWdlbmQubmFtZTtcbiAgICAgICAgICAgIGN0eC5hZGRDb25kaXRpb25CbG9ja0JlZ2luKCgpID0+IHRoaXMuYW5pbWF0aW9uQ29udGV4dC5hcmNzLnZhbHVlW3NpZF0uc3BhblJhZGl1cyA9PT0gMCk7XG4gICAgICAgICAgICBjdHguZnVuY3Rpb25zQ2FsbChcbiAgICAgICAgICAgICAgICAoY3R4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VyQXJjID0gdGhpcy5hbmltYXRpb25Db250ZXh0LmFyY3MudmFsdWVbc2lkXTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yU3RyaW5nLnRvLnJnYih0aGVtZS5jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5hcmMoMCwwLGN1ckFyYy5yYWRpdXMsIGN1ckFyYy5zdGFydEFuZ2xlLCBjdXJBcmMuZW5kQW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKDAsIDApO1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbygwLCAwKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWRkbGVBbmdsZSA9IGN1ckFyYy5taWRkbGVBbmdsZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2luciA9IE1hdGguc2luKG1pZGRsZUFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29zciA9IE1hdGguY29zKG1pZGRsZUFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dHggPSB0ZXh0UmFkaXVzICogY29zcjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dHkgPSB0ZXh0UmFkaXVzICogc2lucjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlyID0gY29zciAvIE1hdGguYWJzKGNvc3IpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0c3ggPSB0ZXh0eCArIGRpciAqIDIwO1xuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8odGV4dHgsIHRleHR5KTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh0ZXh0c3gsIHRleHR5KTtcblxuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSBkaXIgPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsVGV4dChgJHtsZWdlbmQubmFtZX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHN4ICsgZGlyICogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0eSArIGZvbnRTaXplLzIpO1xuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGN0eC5hZGRDb25kaXRpb25CbG9ja0VuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZnRlclJlbmRlcihjb250ZXh0MmQsIGdsb2JhbEN0eCkge1xuICAgICAgICBnbG9iYWxDdHguZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzZXJpZXNJbkNvb3JkLFxuICAgICAgICAgICAgfSA9IGdsb2JhbEN0eC5DaGFydC5jaGFydE1ldGE7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRleHQuYXJjcy5hbmltZVRvKHNlcmllc0luQ29vcmQubWFwKHMgPT4gY2xvbmUocy5wKSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICBnbG9iYWxDdHguZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzZWQgPSBnbG9iYWxDdHguQ2hhcnQuY2hhcnRNZXRhLmZvY3VzZWQ7XG4gICAgICAgICAgICBjb25zdCBsZWdlbmQgPSBnbG9iYWxDdHguZ2xvYmFsRGF0YS5zb3VyY2UubGVnZW5kO1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHNlcmllc0luQ29vcmQsXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4LkNoYXJ0LmNoYXJ0TWV0YTtcbiAgICAgICAgICAgIGNvbnN0IHBzID0gc2VyaWVzSW5Db29yZC5tYXAocyA9PiBjbG9uZShzLnApKSBcbiAgICAgICAgICAgIGxlZ2VuZC5mb3JFYWNoKChsLCBsaWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZihmb2N1c2VkID09PSBsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHNbbGlkXS5yYWRpdXMgPSB0aGlzLnJhZGl1cyAqIDEuMTU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHNbbGlkXS5yYWRpdXMgPSB0aGlzLnJhZGl1cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uQ29udGV4dC5hcmNzLmFuaW1lVG8ocHMpO1xuICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGllQ2hhcnQ7IiwiaW1wb3J0IGNvbG9yU3RyaW5nIGZyb20gJ2NvbG9yLXN0cmluZyc7XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRGbG9hdENvbnRlbnQoY29udGFpbmVyKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBcbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6MDtcbiAgICAgICAgdG9wOjA7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgIGZvbnQtc2l6ZTogLjhlbTtcbiAgICAgICAgei1pbmRleDogOTk5O1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNik7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIGApO1xuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgIHRpdGxlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgXG4gICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuNWVtO2ApO1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIGNvbnN0IHRhYmxld3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG4gICAgdGFibGV3cmFwcGVyLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgXG4gICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICBmb250LXNpemU6IDFlbTtcbiAgICBgKTtcbiAgICBmdW5jdGlvbiBjcmVhdGV0cihsZWdlbmQsIGNvbG9yLCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgICAgY29uc3QgdGQxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgdGQxLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAncGFkZGluZzogMnB4IDRweDsnKTtcbiAgICAgICAgY29uc3QgY29sb3JzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBjb2xvcnNwYW4uc2V0QXR0cmlidXRlKCdzdHlsZScsIGBcbiAgICAgICAgICAgIGRpc3BsYXk6aW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgd2lkdGg6LjhlbTtcbiAgICAgICAgICAgIGhlaWdodDouOGVtO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czoxMDAlO1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0Oi41ZW07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiR7Y29sb3J9O2ApO1xuICAgICAgICB0ZDEuYXBwZW5kQ2hpbGQoY29sb3JzcGFuKTtcbiAgICAgICAgY29uc3QgdGl0bGVzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICB0aXRsZXNwYW4uaW5uZXJUZXh0ID0gbGVnZW5kO1xuICAgICAgICB0ZDEuYXBwZW5kQ2hpbGQodGl0bGVzcGFuKTtcbiAgICAgICAgY29uc3QgdGQyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgY29uc3QgZGF0YXNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIGRhdGFzcGFuLmlubmVyVGV4dCA9IGRhdGE7XG4gICAgICAgIHRkMi5hcHBlbmRDaGlsZChkYXRhc3Bhbik7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkMSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkMik7XG4gICAgICAgIHRyLmNvbG9yc3BhbiA9IGNvbG9yc3BhbjtcbiAgICAgICAgdHIudGl0bGVzcGFuID0gdGl0bGVzcGFuO1xuICAgICAgICB0ci5kYXRhc3BhbiA9IGRhdGFzcGFuO1xuICAgICAgICByZXR1cm4gdHI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVkaXRUcih0ciwgbGVnZW5kLCBjb2xvciwgZGF0YSkge1xuICAgICAgICB0ci5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlLXJvdyc7XG4gICAgICAgIHRyLmNvbG9yc3Bhbi5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XG4gICAgICAgIHRyLnRpdGxlc3Bhbi5pbm5lclRleHQgPSBsZWdlbmQ7XG4gICAgICAgIHRyLmRhdGFzcGFuLmlubmVyVGV4dCA9IGRhdGE7XG4gICAgfVxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGFibGV3cmFwcGVyKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgY29uc3QgdHJCdWZmZXIgPSBbXTtcbiAgICByZXR1cm4gZnVuY3Rpb24obWV0YSkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBpZighbWV0YS5kaXNwbGF5KSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZS5pbm5lclRleHQgPSBtZXRhLnhEaW1lbnNpb247XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7bWV0YS54fXB4LCAke21ldGEueX1weClgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IobGV0IGlkeCBpbiBtZXRhLnNlcmllcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBtZXRhLnNlcmllc1tpZHhdO1xuICAgICAgICAgICAgICAgIGlmKHRyQnVmZmVyW2lkeF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdFRyKHRyQnVmZmVyW2lkeF0sIHMubmFtZSwgcy5jb2xvciwgcy5kYXRhKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmVsZW0gPSBjcmVhdGV0cihzLm5hbWUsIHMuY29sb3IsIHMuZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJCdWZmZXJbaWR4XSA9IHRyZWxlbTtcbiAgICAgICAgICAgICAgICAgICAgdGFibGV3cmFwcGVyLmFwcGVuZENoaWxkKHRyZWxlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzcGFuID0gdHJCdWZmZXIubGVuZ3RoIC0gbWV0YS5zZXJpZXM7XG4gICAgICAgICAgICBpZihzcGFuID4gMCl7XG4gICAgICAgICAgICAgICAgdHJCdWZmZXIuc2xpY2UobWV0YS5zZXJpZXMubGVuZ3RoKS5mb3JFYWNoKGUgPT4ge2Uuc3R5bGUuZGlzcGxheSA9ICdub25lJzt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbn1cbmNsYXNzIExpbmVJbmRpY2F0b3Ige1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLm5hbWUgPSAnTGluZUluZGljYXRvcic7XG4gICAgICAgIHRoaXMub3ZlcmxheWVyQW5pbWVDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIGJhcjogZmFsc2UsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICBcbiAgICB9XG5cbiAgICBhcHBseShnbG9iYWxDdHgpIHtcbiAgICAgICAgZ2xvYmFsQ3R4Lk92ZXJsYXllci5ob29rcy5pbml0T3ZlcmxheWVyLnRhcCh0aGlzLm5hbWUsIChjb250YWluZXIsIGNvbnRleHQyZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5mbG9hdENvbnRlbnRDYWxsYmFjayA9IHRoaXMub3B0aW9ucy5jYWxsYmFjayB8fCBnZXREZWZhdWx0RmxvYXRDb250ZW50KGNvbnRhaW5lcik7XG4gICAgICAgICAgICB0aGlzLmluaXQoY29udGFpbmVyLCBjb250ZXh0MmQsIGdsb2JhbEN0eCk7XG4gICAgICAgIH0pO1xuICAgICAgICBnbG9iYWxDdHguT3ZlcmxheWVyLmhvb2tzLnJlbmRlck92ZXJMYXllci50YXAodGhpcy5uYW1lLCAoY29udGV4dDJkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihjb250ZXh0MmQsIGdsb2JhbEN0eCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXQoY29udGFpbmVyLCBjdHgsIGdsb2JhbEN0eCkge1xuICAgICAgICBjb25zdCByZW5kZXIgPSBjdHgucmVuZGVyLmJpbmQoY3R4KTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgeE1ldGEsXG4gICAgICAgICAgICB5TWV0YSxcbiAgICAgICAgfSA9IGdsb2JhbEN0eC5nbG9iYWxEYXRhLnNvdXJjZU1ldGE7XG5cbiAgICAgICAgZ2xvYmFsQ3R4LmVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMub3ZlcmxheWVyQW5pbWVDYWNoZTtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzZWQgPSBnbG9iYWxDdHguQ2hhcnQuY2hhcnRNZXRhLmZvY3VzZWQ7XG4gICAgICAgICAgICBjb25zdCBzdiA9IGdsb2JhbEN0eC5MYXlvdXQuc3BhblZlcnRpY2FsO1xuICAgICAgICAgICAgY2FjaGUuc3BhblZlcnRpY2FsID0gc3Y7XG4gICAgICAgICAgICBpZiAoIWZvY3VzZWQpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS54ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb2F0Q29udGVudENhbGxiYWNrICYmIHRoaXMuZmxvYXRDb250ZW50Q2FsbGJhY2soe1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiZWxvbmcgPSBmb2N1c2VkLmJlbG9uZztcbiAgICAgICAgICAgICAgICBjb25zdCB7IHgsIHkgfSA9IGdsb2JhbEN0eC5fbW91c2U7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZm9jdXNlZC5tb3VzZS54LCBmb2N1c2VkLm1vdXNlLnkpXG4gICAgICAgICAgICAgICAgdGhpcy5mbG9hdENvbnRlbnRDYWxsYmFjayAmJiB0aGlzLmZsb2F0Q29udGVudENhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgeSxcbiAgICAgICAgICAgICAgICAgICAgeERpbWVuc2lvbjogeE1ldGEuZm9ybWF0dGVyKGJlbG9uZy5zZXJpZXNbMF0uZHgpLFxuICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IGJlbG9uZy5zZXJpZXMuZmlsdGVyKHMgPT4gIXMubGVnZW5kLmRpc2FibGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoeyBsZWdlbmQsIGR5LCB0aGVtZSB9KSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGxlZ2VuZC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvclN0cmluZy50by5yZ2IodGhlbWUuY29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHlNZXRhLmZvcm1hdHRlcihkeSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3RGF0YTogZHksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2FjaGUueCA9IGZvY3VzZWQuYmVsb25nLng7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW5kZXIoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKGN0eCwgZ2xvYmFsQ3R4KSB7XG4gICAgICAgIGNvbnN0IGJhciA9IHRoaXMub3B0aW9ucy5iYXI7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNlcmllc1N0ZXAsXG4gICAgICAgICAgICBzcGFuVmVydGljYWxcbiAgICAgICAgfSA9IGdsb2JhbEN0eC5MYXlvdXQ7XG4gICAgICAgIGN0eC5hZGRDb25kaXRpb25CbG9ja0JlZ2luKCgpID0+ICF0aGlzLm92ZXJsYXllckFuaW1lQ2FjaGUueCk7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5mdW5jdGlvbnNDYWxsKFxuICAgICAgICAgICAgKGN0eCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKGJhcikge1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjMzLCAyMzMsIDIzMywgMC40KSc7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheWVyQW5pbWVDYWNoZS54IC0gc2VyaWVzU3RlcCAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzU3RlcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5WZXJ0aWNhbFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8odGhpcy5vdmVybGF5ZXJBbmltZUNhY2hlLngsIDApO1xuICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKHRoaXMub3ZlcmxheWVyQW5pbWVDYWNoZS54LCB0aGlzLm92ZXJsYXllckFuaW1lQ2FjaGUuc3BhblZlcnRpY2FsKTtcbiAgICAgICAgICAgICAgICB9XG4gIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2IoMjM4LCAyMzgsIDIzOCknO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIGN0eC5hZGRDb25kaXRpb25CbG9ja0VuZCgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGluZUluZGljYXRvcjsiLCJpbXBvcnQgY29sb3JTdHJpbmcgZnJvbSAnY29sb3Itc3RyaW5nJztcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdExlZ2VuZENvbnRlbnQoY29udGFpbmVyLCBkaXNhYmxlc2VsZWN0KSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgbWF4LWhlaWdodDogMzUlO1xuICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxZW07XG4gICAgICAgIHBhZGRpbmc6IDVweCAyMHB4O1xuICAgIGApO1xuICAgIGxldCBmb2N1c2VkO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUxlZ2VuZEVsZW0obWV0YSwgbGVnZW5kTWV0YSkge1xuICAgICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdzdHlsZScsIGBcbiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogLjhlbTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxZW07XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICBwYWRkaW5nOiAwIC41ZW07XG4gICAgICAgIGApO1xuICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSgnYWN0aXZlJywgbWV0YS5sZWdlbmQuZGlzYWJsZWQpO1xuICAgICAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgXG4gICAgICAgICAgICBkaXNwbGF5OmlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHdpZHRoOi41ZW07XG4gICAgICAgICAgICBoZWlnaHQ6LjVlbTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6MTAwJTtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogLjFlbTtcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke21ldGEuY29sb3JbbWV0YS5sZWdlbmQuZGlzYWJsZWQgPyAnZGlzYWJsZScgOiAnZW5hYmxlJ119XG4gICAgICAgIGApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgbmFtZS5pbm5lclRleHQgPSBtZXRhLmxlZ2VuZC5uYW1lO1xuXG4gICAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoc3Bhbik7XG4gICAgICAgIGVsZW0uYXBwZW5kQ2hpbGQobmFtZSk7XG4gICAgICAgIFxuICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYoZGlzYWJsZXNlbGVjdCkge1xuICAgICAgICAgICAgICAgIG1ldGEubGVnZW5kLmRpc2FibGVkID0gIW1ldGEubGVnZW5kLmRpc2FibGVkO1xuICAgICAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdhY3RpdmUnLCBtZXRhLmxlZ2VuZC5kaXNhYmxlZCk7XG4gICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5iYWNrZ3JvdW5kID0gbWV0YS5jb2xvclttZXRhLmxlZ2VuZC5kaXNhYmxlZCA/ICdkaXNhYmxlJyA6ICdlbmFibGUnXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvY3VzZWQgJiYgZm9jdXNlZC5uYW1lID09PSBtZXRhLmxlZ2VuZC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZE1ldGEuZm9yRWFjaChsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwubGVnZW5kLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSgnYWN0aXZlJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5iYWNrZ3JvdW5kID0gbWV0YS5jb2xvci5lbmFibGU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBmb2N1c2VkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb2N1c2VkID0gbWV0YS5sZWdlbmQ7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZE1ldGEuZm9yRWFjaChsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwubGVnZW5kLmRpc2FibGVkID0gKGZvY3VzZWQubmFtZSAhPT0gbC5sZWdlbmQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSgnYWN0aXZlJywgbC5sZWdlbmQuZGlzYWJsZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5iYWNrZ3JvdW5kID0gbWV0YS5jb2xvcltsLmxlZ2VuZC5kaXNhYmxlZCA/ICdkaXNhYmxlJyA6ICdlbmFibGUnXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cblxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGxlZ2VuZE1ldGEpIHtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgY29uc29sZS5sb2cobGVnZW5kTWV0YSk7XG4gICAgICAgIGxlZ2VuZE1ldGEuZm9yRWFjaChtZXRhID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBjcmVhdGVMZWdlbmRFbGVtKG1ldGEsIGxlZ2VuZE1ldGEpO1xuICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH07XG59XG5cbmNsYXNzIExlZ2VuZCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMubmFtZSA9ICdMZWdlbmRQbHVnaW4nO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIGFwcGx5KGdsb2JhbEN0eCkge1xuICAgICAgICBnbG9iYWxDdHguaG9va3MuYmVmb3JlSW5pdEdsb2JhbExheW91dC50YXAodGhpcy5uYW1lLCAoY29udGFpbmVyLCBsYXlvdXRDb250ZXh0KSA9PntcbiAgICAgICAgICAgIHRoaXMubGVnZW5kQ29udGVudENhbGxiYWNrID0gdGhpcy5vcHRpb25zLmNhbGxiYWNrIHx8IGdldERlZmF1bHRMZWdlbmRDb250ZW50KGNvbnRhaW5lciwgdGhpcy5vcHRpb25zLmRpc2FibGVzZWxlY3QpO1xuICAgICAgICAgICAgdGhpcy5pbml0KGNvbnRhaW5lciwgZ2xvYmFsQ3R4LCBsYXlvdXRDb250ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGdsb2JhbEN0eC5PdmVybGF5ZXIuaG9va3MuaW5pdE92ZXJsYXllci50YXAodGhpcy5uYW1lLCBjb250YWluZXIgPT4ge1xuICAgICAgICAvLyAgICAgdGhpcy5pbml0KGNvbnRhaW5lciwgZ2xvYmFsQ3R4KTtcbiAgICAgICAgLy8gfSk7XG4gICAgfVxuXG4gICAgaW5pdChjb250YWluZXIsIGdsb2JhbEN0eCwgbGF5b3V0Q29udGV4dCkge1xuICAgICAgICBnbG9iYWxDdHguZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBsZWdlbmQsXG4gICAgICAgICAgICB9ID0gZ2xvYmFsQ3R4Lmdsb2JhbERhdGEuc291cmNlO1xuICAgICAgICAgICAgY29uc3QgZ2V0Q29sb3IgPSBnbG9iYWxDdHgudGhlbWUuZ2V0Q29sb3I7XG4gICAgICAgICAgICBjb25zdCBsZWdlbmRNZXRhID0gbGVnZW5kLm1hcCgobCwgaWR4KSA9PiAoe1xuICAgICAgICAgICAgICAgIGxlZ2VuZDogbCxcbiAgICAgICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGU6IGNvbG9yU3RyaW5nLnRvLnJnYihnZXRDb2xvcihpZHgpLmNvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZTogY29sb3JTdHJpbmcudG8ucmdiKGdldENvbG9yKGlkeCkuZGlzYWJsZWRDb2xvciksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNvbnN0IGVsZW0gPSB0aGlzLmxlZ2VuZENvbnRlbnRDYWxsYmFjayAmJiB0aGlzLmxlZ2VuZENvbnRlbnRDYWxsYmFjayhsZWdlbmRNZXRhKTtcbiAgICAgICAgICAgIGxheW91dENvbnRleHQubGVnZW5kV3JhcHBlciA9IGVsZW07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGVnZW5kOyIsInZhciBfX0RFVl9fID0gdHJ1ZTtcbmZ1bmN0aW9uIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhcbiAgICBmbixcbiAgICBpbnN0YW5jZSxcbiAgICB0eXBlLFxuICAgIGFyZ3Ncbikge1xuICAgIGxldCByZXM7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzID0gYXJncyA/IGZuKC4uLmFyZ3MpIDogZm4oKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmNvbnN0IFJFQ1VSU0lPTl9MSU1JVCA9IDUwO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFNjaGVkdWxlKCkge1xuICAgIGNvbnN0IHF1ZXVlID0gW107XG4gICAgY29uc3QgcG9zdEZsdXNoQ2JzID0gW107XG4gICAgLy8gY29uc3QgcCA9IFByb21pc2UucmVzb2x2ZSgpXG5cbiAgICBsZXQgaXNGbHVzaGluZyA9IGZhbHNlO1xuICAgIGxldCBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xuICAgIC8vIGNvbnN0IHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAvLyBleHBvcnQgZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAvLyAgIHJldHVybiBmbiA/IHAudGhlbihmbikgOiBwXG4gICAgLy8gfVxuXG4gICAgLy8g57uY5Zu+55So5Yiw55qE5pivIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIHJldHVybiBmbiA/IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICB9KSA6IHJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuICAgICAgICAvLyByZXR1cm4gZm4gPyBwLnRoZW4oZm4pIDogcFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHF1ZXVlSm9iKGpvYikge1xuICAgICAgICBpZiAoIXF1ZXVlLmluY2x1ZGVzKGpvYikpIHtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goam9iKTtcbiAgICAgICAgICAgIHF1ZXVlRmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHF1ZXVlRmx1c2goKSB7XG4gICAgICAgIGlmICghaXNGbHVzaGluZyAmJiAhaXNGbHVzaFBlbmRpbmcpIHtcbiAgICAgICAgICAgIGlzRmx1c2hQZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIG5leHRUaWNrKGZsdXNoSm9icyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZmx1c2hQb3N0Rmx1c2hDYnMoc2Vlbikge1xuICAgICAgICBpZiAocG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY2JzID0gWy4uLm5ldyBTZXQocG9zdEZsdXNoQ2JzKV07XG4gICAgICAgICAgICBwb3N0Rmx1c2hDYnMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgICAgICAgICBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgY2JzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2JzW2ldKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGNvbnN0IGdldElkID0gKGpvYikgPT4gKGpvYi5pZCA9PSBudWxsID8gSW5maW5pdHkgOiBqb2IuaWQpO1xuXG4gICAgZnVuY3Rpb24gZmx1c2hKb2JzKHNlZW4pIHtcbiAgICAgICAgaXNGbHVzaFBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgaXNGbHVzaGluZyA9IHRydWU7XG4gICAgICAgIGxldCBqb2I7XG4gICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gICAgICAgIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgICAgICAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkIHNvIGl0cyByZW5kZXIgZWZmZWN0IHdpbGwgaGF2ZSBzbWFsbGVyXG4gICAgICAgIC8vICAgIHByaW9yaXR5IG51bWJlcilcbiAgICAgICAgLy8gMi4gSWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB1cGRhdGUsXG4gICAgICAgIC8vICAgIGl0cyB1cGRhdGUgY2FuIGJlIHNraXBwZWQuXG4gICAgICAgIC8vIEpvYnMgY2FuIG5ldmVyIGJlIG51bGwgYmVmb3JlIGZsdXNoIHN0YXJ0cywgc2luY2UgdGhleSBhcmUgb25seSBpbnZhbGlkYXRlZFxuICAgICAgICAvLyBkdXJpbmcgZXhlY3V0aW9uIG9mIGFub3RoZXIgZmx1c2hlZCBqb2IuXG4gICAgICAgIHF1ZXVlLnNvcnQoKGEsIGIpID0+IGdldElkKGEpIC0gZ2V0SWQoYikpO1xuICAgICAgICB3aGlsZSAoKGpvYiA9IHF1ZXVlLnNoaWZ0KCkpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChqb2IgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGpvYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoam9iLCBudWxsLCAnU0NIRURVTEVSJyk7XG4gICAgICAgIH1cbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoc2Vlbik7XG4gICAgICAgIGlzRmx1c2hpbmcgPSBmYWxzZTtcbiAgICAgICAgLy8gc29tZSBwb3N0Rmx1c2hDYiBxdWV1ZWQgam9icyFcbiAgICAgICAgLy8ga2VlcCBmbHVzaGluZyB1bnRpbCBpdCBkcmFpbnMuXG4gICAgICAgIGlmIChxdWV1ZS5sZW5ndGggfHwgcG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xuICAgICAgICAgICAgZmx1c2hKb2JzKHNlZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGZuKSB7XG4gICAgICAgIGlmICghc2Vlbi5oYXMoZm4pKSB7XG4gICAgICAgICAgICBzZWVuLnNldChmbiwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHNlZW4uZ2V0KGZuKTtcbiAgICAgICAgICAgIGlmIChjb3VudCA+IFJFQ1VSU0lPTl9MSU1JVCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ01heGltdW0gcmVjdXJzaXZlIHVwZGF0ZXMgZXhjZWVkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICBcIllvdSBtYXkgaGF2ZSBjb2RlIHRoYXQgaXMgbXV0YXRpbmcgc3RhdGUgaW4geW91ciBjb21wb25lbnQncyBcIiArXG4gICAgICAgICAgICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb24gb3IgdXBkYXRlZCBob29rIG9yIHdhdGNoZXIgc291cmNlIGZ1bmN0aW9uLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWVuLnNldChmbiwgY291bnQgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBxdWV1ZUpvYiwgbmV4dFRpY2sgfTtcbn0iLCJpbXBvcnQgeyByZWFjdGl2ZSB9IGZyb20gJ0B2dWUvcmVhY3Rpdml0eSc7XG5pbXBvcnQgeyBTeW5jSG9vayB9IGZyb20gJ3RhcGFibGUnO1xuY2xhc3MgRGF0YSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gcmVhY3RpdmUoe30pO1xuICAgICAgICB0aGlzLnNvdXJjZU1ldGEgPSByZWFjdGl2ZSh7fSk7XG5cbiAgICAgICAgdGhpcy5ob29rcyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgaW5pdERhdGE6IG5ldyBTeW5jSG9vayhbICdkYXRhT3B0aW9ucycsICdzb3VyY2UnLCAnc291cmNlTWV0YScgXSksXG4gICAgICAgICAgICAvLyBhZnRlckluaXREYXRhOiBuZXcgU3luY0hvb2soKSxcbiAgICAgICAgICAgIHJlc2V0RGF0YTogbmV3IFN5bmNIb29rKFsgJ2RhdGFPcHRpb25zJywgJ3NvdXJjZScsICdzb3VyY2VNZXRhJyBdKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5pdChkYXRhT3B0aW9ucykge1xuICAgICAgICB0aGlzLmhvb2tzLmluaXREYXRhLmNhbGwoZGF0YU9wdGlvbnMsIHRoaXMuc291cmNlLCB0aGlzLnNvdXJjZU1ldGEpO1xuICAgICAgICAvLyB0aGlzLmhvb2tzLmFmdGVySW5pdERhdGEuY2FsbCgpO1xuICAgIH1cblxuICAgIHJlc2V0RGF0YShkYXRhT3B0aW9ucykge1xuICAgICAgICB0aGlzLmhvb2tzLnJlc2V0RGF0YS5jYWxsKGRhdGFPcHRpb25zLCB0aGlzLnNvdXJjZSwgdGhpcy5zb3VyY2VNZXRhKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGE7IiwiY2xhc3MgQmFzZUNvbnRleHQge1xuICAgIGdldCBjb250ZXh0MmQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0MmQ7XG4gICAgfVxuICAgIGdldCBjYW52YXNFbG0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYW52YXNFbG07XG4gICAgfVxuICAgIHNldCBjb250ZXh0MmQodmFsKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb250ZXh0MmQpIHtcbiAgICAgICAgICAgIHRocm93ICd5b3UgY2Fubm90IHJlcGxhY2UgY29udGV4dDJkISc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29udGV4dDJkID0gdmFsO1xuICAgIH1cbiAgICBzZXQgY2FudmFzRWxtKHZhbCkge1xuICAgICAgICBpZiAodGhpcy5fY2FudmFzRWxtKSB7XG4gICAgICAgICAgICB0aHJvdyAneW91IGNhbm5vdCByZXBsYWNlIGNhbnZhc0VsbSEnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NhbnZhc0VsbSA9IHZhbDtcbiAgICB9XG5cbiAgICBnZXQgY2FudmFzQ2FjaGVJbWFnZSgpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl9jYW52YXNFbG0ud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2NhbnZhc0VsbS5oZWlnaHQ7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQyZC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQmFzZUNvbnRleHQ7IiwiaW1wb3J0IHsgcmVhY3RpdmUgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgU3luY0hvb2sgfSBmcm9tICd0YXBhYmxlJztcbmltcG9ydCB7IG1hdDJkLCB2ZWMyIH0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCBCYXNlQ29udGV4dCBmcm9tICcuL2Jhc2UnO1xuY2xhc3MgQ29vcmRpbmF0ZSBleHRlbmRzIEJhc2VDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ob29rcyA9IHtcbiAgICAgICAgICAgIGluaXRDb29yZDogbmV3IFN5bmNIb29rKFsgJ2NvbnRleHQyZCcgXSksXG4gICAgICAgICAgICByZW5kZXJDb29yZDogbmV3IFN5bmNIb29rKFsgJ2NvbnRleHQyZCcgXSksXG4gICAgICAgICAgICBhZnRlclJlbmRlckNoYXJ0OiBuZXcgU3luY0hvb2soWyAnY29udGV4dDJkJyBdKSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRyYW5zZm9ybU1ldGEgPSByZWFjdGl2ZSh7XG4gICAgICAgICAgICBvcmlnaW5WZWM6ICAgICAgICAgICAgICB2ZWMyLmNyZWF0ZSgpLFxuICAgICAgICAgICAgYm9yZGVyVmVjOiAgICAgICAgICAgICAgdmVjMi5jcmVhdGUoKSxcbiAgICAgICAgICAgIHRyYW5zZm9ybU10eFJhdzogICAgICAgIG1hdDJkLmNyZWF0ZSgpLFxuICAgICAgICAgICAgdHJhbnNmb3JtTXR4UmF3SW52ZXJ0OiAgbWF0MmQuY3JlYXRlKCksXG4gICAgICAgICAgICB0cmFuc2Zvcm1NdHg6ICAgICAgICAgICBtYXQyZC5jcmVhdGUoKSxcbiAgICAgICAgICAgIHRyYW5zZm9ybU10eEludmVydDogICAgIG1hdDJkLmNyZWF0ZSgpLFxuICAgICAgICAgICAgY29udmVydERhdGFUb0Nvb3JkWDogICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29udmVydERhdGFUb0Nvb3JkWTogICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgeF9zY2FsZXI6ICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIHhGbG9hdDogICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBmb3JtYXRGdW5jOiAgICAgICAgICAgICB7IHhGb3JtYXQ6IHggPT4geCB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLmhvb2tzLmluaXRDb29yZC5jYWxsKHRoaXMuY29udGV4dDJkKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuaG9va3MucmVuZGVyQ29vcmQuY2FsbCh0aGlzLmNvbnRleHQyZCk7XG4gICAgfVxuXG4gICAgYWZ0ZXJSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuaG9va3MuYWZ0ZXJSZW5kZXJDaGFydC5jYWxsKHRoaXMuY29udGV4dDJkKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvb3JkaW5hdGU7IiwiaW1wb3J0IHsgcmVhY3RpdmUgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgU3luY0hvb2sgfSBmcm9tICd0YXBhYmxlJztcbmltcG9ydCBCYXNlQ29udGV4dCBmcm9tICcuL2Jhc2UnO1xuY2xhc3MgQ2hhcnQgZXh0ZW5kcyBCYXNlQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaG9va3MgPSB7XG4gICAgICAgICAgICBpbml0Q2hhcnQ6IG5ldyBTeW5jSG9vayhbICdjb250ZXh0MmQnIF0pLFxuICAgICAgICAgICAgcmVuZGVyQ2hhcnQ6IG5ldyBTeW5jSG9vayhbICdjb250ZXh0MmQnIF0pLFxuICAgICAgICAgICAgYWZ0ZXJSZW5kZXJDaGFydDogbmV3IFN5bmNIb29rKFsgJ2NvbnRleHQyZCcgXSksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2hhcnRNZXRhID0gcmVhY3RpdmUoe1xuICAgICAgICAgICAgc2VyaWVzSW5Db29yZDogICAgICBbXSwgLy8gbGVnZW5kIOe7tOW6puWMuuWIhueahOS/oeaBryAgIOaVsOaNrue7j+i/h+WdkOagh+ezu+WPmOaNouWQjueahOS9jee9rlxuICAgICAgICAgICAgc2VyaWVzTWV0YTogICAgICAgICBbXSwgLy8geCDnu7TluqbnurXlkJHnmoTkv6Hmga8gICDlhYPmlbDmja7kv6Hmga9cbiAgICAgICAgICAgIC8vIGxlZ2VuZFhJbkNvb3JkOiAgICAge30sIC8vIOS7pXjkuLrntKLlvJXnmoTmlbDmja4geDogW3NlcmllczEsIHNlcmllczIsIC4uLiBdXG4gICAgICAgICAgICAvLyB4U2VyaWVzOiAgICAgICAgICAgIFtdLCAvLyB457Si5byV5YiX6KGoXG4gICAgICAgICAgICAvLyBpbmRleE1hcHBpbmc6ICAgICAgIFtdLCAvLyBsZWdlbmTov4fmu6TlkI7luo/liJflm75cbiAgICAgICAgICAgIGZvY3VzZWQ6ICAgICAgICAgICAgbnVsbCwgLy8g5b2T5YmN6IGa54Sm5pWw5o2u6ZuGXG4gICAgICAgICAgICAvLyBsYXN0Rm9jdXNlZDogICAgICAgIHVuZGVmaW5lZCwgLy8g5LiK5LiA5qyh6IGa54Sm5pWw5o2u6ZuGXG4gICAgICAgICAgICAvLyBmb2N1c1NvdXJjZTogICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5ob29rcy5pbml0Q2hhcnQuY2FsbCh0aGlzLmNvbnRleHQyZCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmhvb2tzLnJlbmRlckNoYXJ0LmNhbGwodGhpcy5jb250ZXh0MmQpO1xuICAgIH1cblxuICAgIGFmdGVyUmVuZGVyKCkge1xuICAgICAgICB0aGlzLmhvb2tzLmFmdGVyUmVuZGVyQ2hhcnQuY2FsbCh0aGlzLmNvbnRleHQyZCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQ2hhcnQ7XG4iLCJpbXBvcnQgeyByZWFjdGl2ZSB9IGZyb20gJ0B2dWUvcmVhY3Rpdml0eSc7XG5pbXBvcnQgeyBTeW5jSG9vayB9IGZyb20gJ3RhcGFibGUnO1xuaW1wb3J0IEJhc2VDb250ZXh0IGZyb20gJy4vYmFzZSc7XG5cbmNsYXNzIE92ZXJsYXllciBleHRlbmRzIEJhc2VDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ob29rcyA9IHtcbiAgICAgICAgICAgIHJlZ2lzdE92ZXJsYXllcjogbmV3IFN5bmNIb29rKCksXG4gICAgICAgICAgICBpbml0T3ZlcmxheWVyOiBuZXcgU3luY0hvb2soWyAnY29udGFpbmVyJywgJ2NvbnRleHQyZCcgXSksXG4gICAgICAgICAgICByZW5kZXJPdmVyTGF5ZXI6IG5ldyBTeW5jSG9vayhbICdjb250ZXh0MmQnIF0pLFxuICAgICAgICAgICAgYWZ0ZXJSZW5kZXJDaGFydDogbmV3IFN5bmNIb29rKFsgJ2NvbnRleHQyZCcgXSksXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5vdmVyTGF5ZXJNZXRhID0gcmVhY3RpdmUoe1xuICAgICAgICAgICAgZm9jdXM6IHVuZGVmaW5lZCwgLy8g6IGa54Sm55qE57G75YirXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlZ2lzdGVkUmVuZGVyRnVuY3Rpb24gPSBbXTtcbiAgICAgICAgdGhpcy5pbml0RnVuY3Rpb25DYWNoZSA9IFtdO1xuICAgICAgICB0aGlzLnRlbXBDYWNoZSA9IHt9O1xuICAgIH1cblxuICAgIHJlZ2lzdEVsZW1lbnQoKSB7XG4gICAgICAgIHRoaXMuaG9va3MucmVnaXN0T3ZlcmxheWVyLmNhbGwoKTtcbiAgICB9XG5cbiAgICBpbml0KGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmhvb2tzLmluaXRPdmVybGF5ZXIuY2FsbChjb250YWluZXIsIHRoaXMuY29udGV4dDJkKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuaG9va3MucmVuZGVyT3ZlckxheWVyLmNhbGwodGhpcy5jb250ZXh0MmQpO1xuICAgIH1cblxuICAgIGFmdGVyUmVuZGVyKCkge1xuICAgICAgICB0aGlzLmhvb2tzLmFmdGVyUmVuZGVyQ2hhcnQuY2FsbCh0aGlzLmNvbnRleHQyZCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgT3ZlcmxheWVyO1xuIiwiLypcbiAgQ3JlYXRlZCBieSBNaWtlIENoYW1iZXJzXG4gIENvcHlyaWdodCAyMDE4XG5cbiAgUmVsZWFzZWQgdW5kZXIgYW4gTUlUIExpY2Vuc2VcblxuICBodHRwczovL2dpdGh1Yi5jb20vbWlrZWNoYW1iZXJzXG5cbiAgRVM2IEphdmFTY3JpcHQgbW9kdWxlIGFuZCBjbGFzcyB0aGF0IHByb3hpZXMsXG4gIGNhcHR1cmVzIGFuZCBiYXRjaGVzIGFsbCBjYW52YXMgY29udGV4dCAyZCBhcGlcbiAgY2FsbHMuXG5cbiAgVGhpcyBjYW4gYmUgdXNlZnVsIGlmIHlvdSB3YW50IHRvIHRyYW5zZm9ybSB0aGVcbiAgb3V0cHV0IGFuZCBjYWxscyBpbnRvIGFub3RoZXIgZm9ybWF0IHN1Y2ggYXMgU1ZHLlxuXG4gIFRvIHVzZSwganVzdCBwYXNzIHRoZSBjb250ZXh0IGZyb20gdGhlIGNhbnZhcyBpbnRvXG4gIHRoZSBjb25zdHJ1Y3RvciBhbmQgbWFrZSBjb250ZXh0IGNhbGxzIG9uIGl0IGFzIG5vcm1hbC5cbiAgVGhlIHNlY29uZCBhcmd1bWVudCB0byB0aGUgY29uc3RydXRvciBpcyBhIGJvb2xlYW4gd2hpY2hcbiAgc3BlY2lmaWVzIHdoZXRoZXIgdGhlIGNhbGxzIHdpbGwgYmUgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcbiAgb3IgYmF0Y2hlZCB1bnRpbCByZW5kZXIgaXMgY2FsbCAoZGVmYXVsdCBpcyB0cnVlKVxuXG4gIGNhbGxzIHdpbGwgYmUgYmF0Y2hlZCB1bnRpbCB5b3UgY2FsbCByZW5kZXIuXG5cbiAgaW1wb3J0IENvbnRleHQyRCBmcm9tIFwiLi9jb250ZXh0X3Byb3h5LmpzXCJcbiAgbGV0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmQpO1xuICBsZXQgY29udGV4dCA9IG5ldyBDb250ZXh0MkQoY3R4LCB0cnVlKTtcblxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICBjb250ZXh0LmFyYygxMDAsIDEwMCwgNTAsIDAsIE1hdGguUEkgKiAyKTtcbiAgY29udGV4dC5zdHJva2UoKTtcblxuICBjb250ZXh0LnJlbmRlcigpO1xuXG4gIFlvdSBjYW4gYWxzbyBzZXQ6XG5cbiAgY29udGV4dC5kZWJ1ZyA9IHRydWU7XG5cbiAgdG8gZ2V0IHNvbWUgcnVudGltZVxuICBpbmZvcm1hdGlvbiBzZW50IHRvIHRoZSAvLyBjb25zb2xlIChjdXJyZW50bHkganVzdCBudW1iZXJcbiAgb2YgY2FsbHMgLyBjb21tYW5kcyBhYm91dCB0byBiZSBydW4sIGFzIHdlbGwgYXMgdGltZSBpdFxuICB0b29rIHRvIG1ha2UgdGhlIGNhbGxzKS5cblxuICBOb3RlIHRoZXJlIGlzIHJvb20gZm9yIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbnMsIGJ1dCBJXG4gIHdhbnRlZCB0byBzaGFyZSB0aGlzIGFzIGEgZ2VuZXJhbCB0ZW1wbGF0ZSBpbiBjYXNlXG4gIGFueW9uZSBlbHNlIGZvdW5kIGl0IHVzZWZ1bC5cblxuICBQbGVhc2UgcG9zdCBhbnkgc3VnZ2VzdGlvbnMsIGZpeGVzIGluIHRoZSBjb21tZW50c1xuICAqL1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJ2xvZGFzaCc7XG4vLyBpbXBvcnQgQW5pbWF0aW9uIGZyb20gJy4vQW5pbWF0aW9uJztcbi8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRleHQgZXh0ZW5kcyBBbmltYXRpb24ge1xuXG5DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLndyYXBUZXh0ID0gZnVuY3Rpb24odGV4dCwgeCwgeSwgbWF4V2lkdGgsIGxpbmVIZWlnaHQpIHtcbiAgICBpZiAodHlwZW9mIHRleHQgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiB4ICE9PSAnbnVtYmVyJyB8fCB0eXBlb2YgeSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcztcbiAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcblxuICAgIGlmICh0eXBlb2YgbWF4V2lkdGggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1heFdpZHRoID0gKGNhbnZhcyAmJiBjYW52YXMud2lkdGgpIHx8IDMwMDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBsaW5lSGVpZ2h0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsaW5lSGVpZ2h0ID0gMjA7XG4gICAgfVxuICAgIGNvbnN0IGFyclRleHQgPSB0ZXh0LnNwbGl0KCcsJyk7XG4gICAgbGV0IGxpbmUgPSAnJztcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IGFyclRleHQubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgY29uc3QgdGVzdExpbmUgPSAobGluZSArIGFyclRleHRbbl0pLnRyaW0oKTtcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IGNvbnRleHQubWVhc3VyZVRleHQodGVzdExpbmUpO1xuICAgICAgICBjb25zdCB0ZXN0V2lkdGggPSBtZXRyaWNzLndpZHRoO1xuICAgICAgICBpZiAodGVzdFdpZHRoID4gbWF4V2lkdGggJiYgbiA+IDApIHtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQobGluZSwgeCwgeSk7XG4gICAgICAgICAgICBsaW5lID0gYXJyVGV4dFtuXTtcbiAgICAgICAgICAgIHkgKz0gbGluZUhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmUgPSB0ZXN0TGluZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb250ZXh0LmZpbGxUZXh0KGxpbmUudHJpbSgpLCB4LCB5KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhcHR1cmUgPSBmYWxzZSkge1xuICAgIC8vICAgc3VwZXIob3B0aW9ucy5hbmltYXRpb24pO1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5fY29tbWFuZHMgPSBbXTtcbiAgICAgICAgdGhpcy5fY2FwdHVyZSA9IGNhcHR1cmU7XG4gICAgICAgIHRoaXMuX2RlYnVnID0gZmFsc2U7XG5cbiAgICB9XG5cbiAgICBoYW5kbGVDb21tYW5kKGNtZCkge1xuICAgICAgICBpZiAodGhpcy5fY2FwdHVyZSkge1xuICAgICAgICAgICAgdGhpcy5fY29tbWFuZHMucHVzaChjbWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY21kKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhckNvbW1hbmRzKCkge1xuICAgICAgICB0aGlzLl9jb21tYW5kcyA9IFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uQ2FsbFdpdGhDb25kaXRpb24oZnVuYywgY29uZGl0aW9uLCAuLi5hcmdzKSB7XG4gICAgICAgIGZ1bmMgPSB0aGlzLl9jb250ZXh0W2Z1bmNdO1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbmRpdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgZnVuYy5hcHBseSh0aGlzLl9jb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb25DYWxsV2l0aER5bmFtaWNQYXJhbWV0ZXIoZnVuYywgLi4uYXJndXMpIHtcbiAgICAgICAgZnVuYyA9IHRoaXMuX2NvbnRleHRbZnVuY107XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gYXJndXMubWFwKGFyZyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oYXJnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhcmc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIC8vIGNvbnNvbGUubG9nKHBhcmFtZXRlcnMpXG4gICAgICAgICAgICBmdW5jLmFwcGx5KHRoaXMuX2NvbnRleHQsIHBhcmFtZXRlcnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbkNhbGxXaXRoTG9vcGluZyhsb29wVGFyZ2V0RnVuYywgZnVuYykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9vcFRhcmdldCA9IGxvb3BUYXJnZXRGdW5jKCk7XG4gICAgICAgICAgICBsb29wVGFyZ2V0LmZvckVhY2goKHQsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgIGZ1bmModGhpcy5fY29udGV4dCwgbG9vcFRhcmdldCwgdCwgaWR4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuXG4gICAgcHJvcGVydHlTZXRXaXRoRHluYW1pY1BhcmFtZXRlcihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIGxldCB2O1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdiA9IHZhbHVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0W3Byb3BlcnR5XSA9IHY7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cblxuICAgIGFkZENvbmRpdGlvbkJsb2NrQmVnaW4oY29uZGl0aW9uKSB7XG4gICAgICAgIGNvbnN0IGMgPSB7XG4gICAgICAgICAgICBiZWdpbkNvbmRpdGlvbjogKCkgPT4gY29uZGl0aW9uKCksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBhZGRDb25kaXRpb25CbG9ja0VuZCgpIHtcbiAgICAgICAgY29uc3QgYyA9IHtcbiAgICAgICAgICAgIGVuZENvbmRpdGlvbjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uc0NhbGxXaXRoRHluYW1pY1BhcmFtZXRlcihjb21wdXRlVmFsdWVzLCBvcGVyYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBjb21wdXRlVmFsdWVzKCk7XG4gICAgICAgICAgICBvcGVyYXRpb25zKHRoaXMuX2NvbnRleHQsIHZhbHVlcyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbnNDYWxsKGZ1bmMpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIGZ1bmModGhpcy5fY29udGV4dCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIC8vIGxldCBzdGFydDtcbiAgICAgICAgLy8gaWYgKHRoaXMuX2RlYnVnKSB7XG4gICAgICAgIC8vICAgICBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgbGV0IGNvbmRpdGlvbiA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGNvbW1hbmQgb2YgdGhpcy5fY29tbWFuZHMpIHtcbiAgICAgICAgICAgIGlmIChjb21tYW5kLmVuZENvbmRpdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbmRpdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbW1hbmQuYmVnaW5Db25kaXRpb24pIHtcbiAgICAgICAgICAgICAgICBjb25kaXRpb24gPSBjb21tYW5kLmJlZ2luQ29uZGl0aW9uKCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21tYW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcy5jbGVhckNvbW1hbmRzKCk7XG5cbiAgICAgICAgLy8gaWYgKHRoaXMuX2RlYnVnKSB7XG4gICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhgUkVOREVSX0NPTVBMRVRFIDogJHtEYXRlLm5vdygpIC0gc3RhcnR9bXNgKTtcbiAgICAgICAgLy8gfVxuICAgIH1cblxuICAgIG9uU3RvcEFuaW1hdGlvbigpIHtcbiAgICAgICAgdGhpcy5jbGVhckNvbW1hbmRzKCk7XG4gICAgfVxuXG4gICAgc2V0IGRlYnVnKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2RlYnVnID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBkZWJ1ZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlYnVnO1xuICAgIH1cblxuICAgIGdldCBjYW52YXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmNhbnZhcztcbiAgICB9XG5cbiAgICAvKiogKioqKiogY3VycmVudFRyYW5zZm9ybSoqKioqKiovXG4gICAgc2V0IGN1cnJlbnRUcmFuc2Zvcm0odmFsdWUpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuY3VycmVudFRyYW5zZm9ybSA9IHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudFRyYW5zZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuY3VycmVudFRyYW5zZm9ybTtcbiAgICB9XG5cbiAgICAvKiogKioqKiogZGlyZWN0aW9uKioqKioqKi9cbiAgICBzZXQgZGlyZWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmRpcmVjdGlvbiA9IHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBnZXQgZGlyZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgLyoqICoqKioqIGZpbGxTdHlsZSoqKioqKiovXG4gICAgc2V0IGZpbGxTdHlsZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5maWxsU3R5bGUgPSB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuXG4gICAgZ2V0IGZpbGxTdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZmlsbFN0eWxlO1xuICAgIH1cblxuICAgIC8qKiAqKioqKiBmaWx0ZXIqKioqKioqL1xuICAgIHNldCBmaWx0ZXIodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZmlsdGVyID0gdmFsdWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cblxuICAgIGdldCBmaWx0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmZpbHRlcjtcbiAgICB9XG5cbiAgICAvKiogKioqKiogZm9udCoqKioqKiovXG4gICAgc2V0IGZvbnQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZm9udCA9IHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBnZXQgZm9udCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZm9udDtcbiAgICB9XG5cbiAgICAvKiogKioqKiogZ2xvYmFsQWxwaGEqKioqKioqL1xuICAgIHNldCBnbG9iYWxBbHBoYSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5nbG9iYWxBbHBoYSA9IHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBnZXQgZ2xvYmFsQWxwaGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0Lmdsb2JhbEFscGhhO1xuICAgIH1cblxuICAgIC8qKiAqKioqKiBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24qKioqKioqL1xuICAgIHNldCBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24odmFsdWUpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gdmFsdWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cblxuICAgIGdldCBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbjtcbiAgICB9XG5cbiAgICAvKiogKioqKiogaW1hZ2VTbW9vdGhpbmdFbmFibGVkKioqKioqKi9cbiAgICBzZXQgaW1hZ2VTbW9vdGhpbmdFbmFibGVkKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBnZXQgaW1hZ2VTbW9vdGhpbmdFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5pbWFnZVNtb290aGluZ0VuYWJsZWQ7XG4gICAgfVxuXG4gICAgLyoqICoqKioqIGltYWdlU21vb3RoaW5nUXVhbGl0eSoqKioqKiovXG4gICAgc2V0IGltYWdlU21vb3RoaW5nUXVhbGl0eSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5pbWFnZVNtb290aGluZ1F1YWxpdHkgPSB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuXG4gICAgZ2V0IGltYWdlU21vb3RoaW5nUXVhbGl0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuaW1hZ2VTbW9vdGhpbmdRdWFsaXR5O1xuICAgIH1cblxuICAgIC8qKiAqKioqKiBsaW5lQ2FwKioqKioqKi9cbiAgICBzZXQgbGluZUNhcCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lQ2FwID0gdmFsdWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cblxuICAgIGdldCBsaW5lQ2FwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5saW5lQ2FwO1xuICAgIH1cblxuICAgIC8qKiAqKioqKiBsaW5lRGFzaE9mZnNldCoqKioqKiovXG4gICAgc2V0IGxpbmVEYXNoT2Zmc2V0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cblxuICAgIGdldCBsaW5lRGFzaE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQubGluZURhc2hPZmZzZXQ7XG4gICAgfVxuXG4gICAgLyoqICoqKioqIGxpbmVKb2luKioqKioqKi9cbiAgICBzZXQgbGluZUpvaW4odmFsdWUpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZUpvaW4gPSB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuXG4gICAgZ2V0IGxpbmVKb2luKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5saW5lSm9pbjtcbiAgICB9XG5cbiAgICAvKiogKioqKiogbGluZVdpZHRoKioqKioqKi9cbiAgICBzZXQgbGluZVdpZHRoKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVXaWR0aCA9IHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBnZXQgbGluZVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5saW5lV2lkdGg7XG4gICAgfVxuXG4gICAgLyoqICoqKioqIG1pdGVyTGltaXQqKioqKioqL1xuICAgIHNldCBtaXRlckxpbWl0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0Lm1pdGVyTGltaXQgPSB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuXG4gICAgZ2V0IG1pdGVyTGltaXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0Lm1pdGVyTGltaXQ7XG4gICAgfVxuXG4gICAgLyoqICoqKioqIHNoYWRvd0JsdXIqKioqKioqL1xuICAgIHNldCBzaGFkb3dCbHVyKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnNoYWRvd0JsdXIgPSB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuXG4gICAgZ2V0IHNoYWRvd0JsdXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0LnNoYWRvd0JsdXI7XG4gICAgfVxuXG4gICAgLyoqICoqKioqIHNoYWRvd0NvbG9yKioqKioqKi9cbiAgICBzZXQgc2hhZG93Q29sb3IodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuc2hhZG93Q29sb3IgPSB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuXG4gICAgZ2V0IHNoYWRvd0NvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5zaGFkb3dDb2xvcjtcbiAgICB9XG5cbiAgICAvKiogKioqKiogc2hhZG93T2Zmc2V0WCoqKioqKiovXG4gICAgc2V0IHNoYWRvd09mZnNldFgodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuc2hhZG93T2Zmc2V0WCA9IHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBnZXQgc2hhZG93T2Zmc2V0WCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuc2hhZG93T2Zmc2V0WDtcbiAgICB9XG5cbiAgICAvKiogKioqKiogc2hhZG93T2Zmc2V0WSoqKioqKiovXG4gICAgc2V0IHNoYWRvd09mZnNldFkodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuc2hhZG93T2Zmc2V0WSA9IHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBnZXQgc2hhZG93T2Zmc2V0WSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuc2hhZG93T2Zmc2V0WTtcbiAgICB9XG5cbiAgICBzZXQgc3Ryb2tlU3R5bGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlU3R5bGUgPSB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuXG4gICAgZ2V0IHN0cm9rZVN0eWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5zdHJva2VTdHlsZTtcbiAgICB9XG5cbiAgICAvKiogKioqKiogdGV4dEFsaWduKioqKioqKi9cbiAgICBzZXQgdGV4dEFsaWduKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnRleHRBbGlnbiA9IHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG5cbiAgICBnZXQgdGV4dEFsaWduKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC50ZXh0QWxpZ247XG4gICAgfVxuXG4gICAgLyoqICoqKioqIHRleHRCYXNlbGluZSoqKioqKiovXG4gICAgc2V0IHRleHRCYXNlbGluZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC50ZXh0QmFzZWxpbmUgPSB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuXG4gICAgZ2V0IHRleHRCYXNlbGluZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQudGV4dEJhc2VsaW5lO1xuICAgIH1cblxuICAgIGFkZEhpdFJlZ2lvbiguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmFkZEhpdFJlZ2lvbiguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIGFyYyguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmFyYyguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIGFyY1RvKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuYXJjVG8oLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBiZWdpblBhdGgoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBiZXppZXJDdXJ2ZVRvKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIGNsZWFySGl0UmVnaW9ucyguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsZWFySGl0UmVnaW9ucyguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIGNsZWFyUmVjdCguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsZWFyUmVjdCguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIGNsaXAoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5jbGlwKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgY2xvc2VQYXRoKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgY3JlYXRlSW1hZ2VEYXRhKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgY3JlYXRlTGluZWFyR3JhZGllbnQoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIGNyZWF0ZVBhdHRlcm4oLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5jcmVhdGVQYXR0ZXJuKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgY3JlYXRlUmFkaWFsR3JhZGllbnQoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5jcmVhdGVSYWRpYWxHcmFkaWVudCguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIGRyYXdGb2N1c0lmTmVlZGVkKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZHJhd0ZvY3VzSWZOZWVkZWQoLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBkcmF3SW1hZ2UoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5kcmF3SW1hZ2UoLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBkcmF3V2lkZ2V0QXNPblNjcmVlbiguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmRyYXdXaWRnZXRBc09uU2NyZWVuKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgZHJhd1dpbmRvdyguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmRyYXdXaW5kb3coLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBlbGxpcHNlKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZWxsaXBzZSguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIGZpbGwoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5maWxsKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgZmlsbFJlY3QoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5maWxsUmVjdCguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIGZpbGxUZXh0KC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZmlsbFRleHQoLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBnZXRJbWFnZURhdGEoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5nZXRJbWFnZURhdGEoLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBnZXRMaW5lRGFzaCguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmdldExpbmVEYXNoKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgaXNQb2ludEluUGF0aCguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmlzUG9pbnRJblBhdGgoLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBpc1BvaW50SW5TdHJva2UoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5pc1BvaW50SW5TdHJva2UoLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBsaW5lVG8oLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICB3cmFwVGV4dCguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LndyYXBUZXh0KC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgbW92ZVRvKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgcHV0SW1hZ2VEYXRhKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQucHV0SW1hZ2VEYXRhKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgcXVhZHJhdGljQ3VydmVUbyguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICByZWN0KC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQucmVjdCguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIHJlbW92ZUhpdFJlZ2lvbiguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnJlbW92ZUhpdFJlZ2lvbiguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIHJlc2V0VHJhbnNmb3JtKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQucmVzZXRUcmFuc2Zvcm0oLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICByZXN0b3JlKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQucmVzdG9yZSguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIHJvdGF0ZSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnJvdGF0ZSguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIHNhdmUoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zYXZlKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgc2NhbGUoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zY2FsZSguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIHNjcm9sbFBhdGhJbnRvVmlldyguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnNjcm9sbFBhdGhJbnRvVmlldyguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIHNldExpbmVEYXNoKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuc2V0TGluZURhc2goLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBzZXRUcmFuc2Zvcm0oLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zZXRUcmFuc2Zvcm0oLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBzdHJva2UoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zdHJva2UoLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKGMpO1xuICAgIH1cbiAgICBzdHJva2VSZWN0KC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlUmVjdCguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxuICAgIHN0cm9rZVRleHQoLi4uYXJncykge1xuICAgICAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zdHJva2VUZXh0KC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgdHJhbnNmb3JtKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQudHJhbnNmb3JtKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChjKTtcbiAgICB9XG4gICAgLy8gZ2V0VHJhbnNmb3JtKCkge1xuICAgIC8vICAgICBsZXQgYyA9ICgpID0+IHtcbiAgICAvLyAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuX2NvbnRleHQuZ2V0VHJhbnNmb3JtKCkpO1xuICAgIC8vICAgICB9O1xuICAgIC8vICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgLy8gfVxuICAgIHRyYW5zbGF0ZSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnRyYW5zbGF0ZSguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQoYyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU3luY0hvb2sgfSBmcm9tICd0YXBhYmxlJztcbmltcG9ydCB7IGVmZmVjdCwgcmVhY3RpdmUgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgaW5pdFNjaGVkdWxlIH0gZnJvbSAnLi4vc2NoZWR1bGUnO1xuaW1wb3J0IERhdGEgZnJvbSAnLi9sYXllcnMvZGF0YSc7XG5pbXBvcnQgQ29vcmRpbmF0ZSBmcm9tICcuL2xheWVycy9jb29yZGluYXRlJztcbmltcG9ydCBDaGFydCBmcm9tICcuL2xheWVycy9jaGFydCc7XG5pbXBvcnQgT3ZlcmxheWVyIGZyb20gJy4vbGF5ZXJzL292ZXJsYXllcic7XG5pbXBvcnQgeyBjcmVhdGVDYW52YXMsIGNsZWFyQ2FudmFzLCBkZXN0cm95Q2FudmFzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgY29udGV4dFByb3h5IGZyb20gJy4uL2NvbnRleHQtYXBpL2NvbnRleHQtcHJveHknO1xuXG5jbGFzcyBHbG9iYWxDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgcXVldWVKb2IsXG4gICAgICAgICAgICBuZXh0VGljayxcbiAgICAgICAgfSA9IGluaXRTY2hlZHVsZSgpO1xuICAgICAgICB0aGlzLmVmZmVjdCA9IChmbikgPT4ge1xuICAgICAgICAgICAgZWZmZWN0KGZuLCB7IHNjaGVkdWxlcjogcXVldWVKb2IgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuJG5leHRUaWNrID0gbmV4dFRpY2s7XG4gICAgICAgIC8vIHRoaXMuZ2xvYmFsRGF0YSA9IGdsb2JhbERhdGE7XG5cbiAgICAgICAgdGhpcy5ib3VuZGluZ0JveCA9IHJlYWN0aXZlKHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5EUFJNYXQgPSBudWxsO1xuICAgICAgICB0aGlzLkRQUiA9IDA7XG4gICAgICAgIHRoaXMudGhlbWUgPSB7XG4gICAgICAgICAgICBnZXRDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZm9udFNpemU6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9tb3VzZSA9IHJlYWN0aXZlKHtcbiAgICAgICAgICAgIHg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGV2ZW50OiB1bmRlZmluZWQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuTGF5b3V0ID0gcmVhY3RpdmUoe1xuICAgICAgICAgICAgdHJhbnNsYXRlTXR4OiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0cmFuc2xhdGVNdHhJbnZlcnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNwYW5Ib3Jpem9udGFsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByYXdTcGFuSG9yaXpvbnRhbDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3BhblZlcnRpY2FsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB4U3RlcDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgeFNjYWxlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgeVN0ZXA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHlTY2FsZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxlZnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRvcDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJvdHRvbTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgeEZsb2F0OiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5ob29rcyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgaW5pdFRoZW1lOiBuZXcgU3luY0hvb2soWyAnY29udGFpbmVyJyBdKSxcbiAgICAgICAgICAgIGJlZm9yZUluaXRHbG9iYWxMYXlvdXQ6IG5ldyBTeW5jSG9vayhbICdjb250YWluZXInLCAnbGF5b3V0Q29udGV4dCcgXSksXG4gICAgICAgICAgICBpbml0R2xvYmFsTGF5b3V0OiBuZXcgU3luY0hvb2soWyAnY29udGFpbmVyJywgJ2xheW91dENvbnRleHQnIF0pLFxuICAgICAgICAgICAgYWZ0ZXJEYXRhQW5kTGF5b3V0UmVhZHk6IG5ldyBTeW5jSG9vaygpLFxuICAgICAgICAgICAgaW5pdENhbnZhczogbmV3IFN5bmNIb29rKFsgJ2NhbnZhcycgXSksXG4gICAgICAgICAgICBpbml0Q29udGV4dDogbmV3IFN5bmNIb29rKFsgJ2NvbnRleHQnLCAnY2FudmFzRWxlbScsICdjb250YWluZXInIF0pLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhID0gbmV3IERhdGEoKTtcbiAgICAgICAgdGhpcy5Db29yZGluYXRlID0gbmV3IENvb3JkaW5hdGUoKTtcbiAgICAgICAgdGhpcy5DaGFydCA9IG5ldyBDaGFydCgpO1xuICAgICAgICB0aGlzLk92ZXJsYXllciA9IG5ldyBPdmVybGF5ZXIoKTtcbiAgICB9XG5cbiAgICBpbml0KGNvbnRhaW5lciwgZGF0YU9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5ob29rcy5pbml0VGhlbWUuY2FsbChjb250YWluZXIpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmluaXQoZGF0YU9wdGlvbnMpO1xuICAgICAgICBjb25zdCBsYXlvdXRDb250ZXh0ID0ge1xuICAgICAgICAgICAgY2FudmFzV3JhcHBlcjogbnVsbCxcbiAgICAgICAgICAgIGxlZ2VuZFdyYXBwZXI6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaG9va3MuYmVmb3JlSW5pdEdsb2JhbExheW91dC5jYWxsKGNvbnRhaW5lciwgbGF5b3V0Q29udGV4dCk7XG4gICAgICAgIHRoaXMuaG9va3MuaW5pdEdsb2JhbExheW91dC5jYWxsKGNvbnRhaW5lciwgbGF5b3V0Q29udGV4dCk7XG5cbiAgICAgICAgdGhpcy5ob29rcy5hZnRlckRhdGFBbmRMYXlvdXRSZWFkeS5jYWxsKCk7XG4gICAgICAgIHRoaXMuaW5pdENvbnRleHQobGF5b3V0Q29udGV4dC5jYW52YXNXcmFwcGVyLCAoQ29udGV4dFByb3h5LCBjYW52YXMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuQ29vcmRpbmF0ZS5jb250ZXh0MmQgPSBDb250ZXh0UHJveHk7XG4gICAgICAgICAgICB0aGlzLkNvb3JkaW5hdGUuY2FudmFzRWxtID0gY2FudmFzO1xuICAgICAgICAgICAgdGhpcy5Db29yZGluYXRlLmluaXQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbml0Q29udGV4dChsYXlvdXRDb250ZXh0LmNhbnZhc1dyYXBwZXIsIChDb250ZXh0UHJveHksIGNhbnZhcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5DaGFydC5jb250ZXh0MmQgPSBDb250ZXh0UHJveHk7XG4gICAgICAgICAgICB0aGlzLkNoYXJ0LmNhbnZhc0VsbSA9IGNhbnZhcztcbiAgICAgICAgICAgIHRoaXMuQ2hhcnQuaW5pdCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluaXRDb250ZXh0KGxheW91dENvbnRleHQuY2FudmFzV3JhcHBlciwgKENvbnRleHRQcm94eSwgY2FudmFzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLk92ZXJsYXllci5jb250ZXh0MmQgPSBDb250ZXh0UHJveHk7XG4gICAgICAgICAgICB0aGlzLk92ZXJsYXllci5jYW52YXNFbG0gPSBjYW52YXM7XG4gICAgICAgICAgICB0aGlzLk92ZXJsYXllci5pbml0KGxheW91dENvbnRleHQuY2FudmFzV3JhcHBlcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXRDb250ZXh0KGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY29udGV4dDJkLFxuICAgICAgICAgICAgY2FudmFzXG4gICAgICAgIH0gPSBjcmVhdGVDYW52YXMoY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5ob29rcy5pbml0Q2FudmFzLmNhbGwoY2FudmFzKTtcbiAgICAgICAgY29uc3QgQ29udGV4dFByb3h5ID0gbmV3IGNvbnRleHRQcm94eShjb250ZXh0MmQsIHRydWUpO1xuICAgICAgICB0aGlzLmhvb2tzLmluaXRDb250ZXh0LmNhbGwoQ29udGV4dFByb3h5LCBjYW52YXMsIGNvbnRhaW5lcik7XG4gICAgICAgIGNhbGxiYWNrKENvbnRleHRQcm94eSwgY2FudmFzKTtcbiAgICB9XG5cbiAgICBzZXRUcmFuc2Zvcm0oY3R4KSB7XG4gICAgICAgIGNvbnN0IG10eCA9IHRoaXMuQ29vcmRpbmF0ZS50cmFuc2Zvcm1NZXRhLnRyYW5zZm9ybU10eDtcbiAgICAgICAgY3R4LnNldFRyYW5zZm9ybShtdHhbMF0sIG10eFsxXSwgbXR4WzJdLCBtdHhbM10sIG10eFs0XSwgbXR4WzVdKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBjb250ZXh0MmQsXG4gICAgICAgICAgICAgICAgY2FudmFzRWxtXG4gICAgICAgICAgICB9ID0gdGhpcy5Db29yZGluYXRlO1xuICAgICAgICAgICAgY2xlYXJDYW52YXMoY29udGV4dDJkLCBjYW52YXNFbG0pO1xuICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2Zvcm0oY29udGV4dDJkKTtcbiAgICAgICAgICAgIHRoaXMuQ29vcmRpbmF0ZS5yZW5kZXIoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlbmRlciBiZWdpbicpXG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgY29udGV4dDJkLFxuICAgICAgICAgICAgICAgIGNhbnZhc0VsbVxuICAgICAgICAgICAgfSA9IHRoaXMuQ2hhcnQ7XG4gICAgICAgICAgICBjbGVhckNhbnZhcyhjb250ZXh0MmQsIGNhbnZhc0VsbSk7XG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zZm9ybShjb250ZXh0MmQpO1xuICAgICAgICAgICAgdGhpcy5DaGFydC5yZW5kZXIoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIGNvbnRleHQyZCxcbiAgICAgICAgICAgICAgICBjYW52YXNFbG0sXG4gICAgICAgICAgICB9ID0gdGhpcy5PdmVybGF5ZXI7XG4gICAgICAgICAgICBjbGVhckNhbnZhcyhjb250ZXh0MmQsIGNhbnZhc0VsbSk7XG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zZm9ybShjb250ZXh0MmQpO1xuICAgICAgICAgICAgdGhpcy5PdmVybGF5ZXIucmVuZGVyKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuQ29vcmRpbmF0ZS5hZnRlclJlbmRlcigpO1xuICAgICAgICB0aGlzLkNoYXJ0LmFmdGVyUmVuZGVyKCk7XG4gICAgICAgIHRoaXMuT3ZlcmxheWVyLmFmdGVyUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgcmVzZXREYXRhKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLnJlc2V0RGF0YShvcHRpb25zKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBkZXN0cm95Q2FudmFzKHRoaXMuY29udGFpbmVyLCB0aGlzLk92ZXJsYXllci5jYW52YXNFbG0pO1xuICAgICAgICBkZXN0cm95Q2FudmFzKHRoaXMuY29udGFpbmVyLCB0aGlzLkNoYXJ0LmNhbnZhc0VsbSk7XG4gICAgICAgIGRlc3Ryb3lDYW52YXModGhpcy5jb250YWluZXIsIHRoaXMuQ29vcmRpbmF0ZS5jYW52YXNFbG0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR2xvYmFsQ29udGV4dDsiLCJpbXBvcnQgeyBtYXQyZCB9IGZyb20gJ2dsLW1hdHJpeCc7XG5cbmNsYXNzIERQSVBsdWdpbiB7XG4gICAgYXBwbHkoZ2xvYmFsQ3R4KSB7XG4gICAgICAgIGdsb2JhbEN0eC5ob29rcy5pbml0Q2FudmFzLnRhcCgnRFBJUGx1Z2luJywgKGNhbnZhc0VsZW0pID0+IHtcbiAgICAgICAgICAgIGdsb2JhbEN0eC5lZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IGdsb2JhbEN0eC5ib3VuZGluZ0JveDtcbiAgICAgICAgICAgICAgICBjYW52YXNFbGVtLndpZHRoID0gcmVjdC53aWR0aCAqIGRwcjtcbiAgICAgICAgICAgICAgICBjYW52YXNFbGVtLmhlaWdodCA9IHJlY3QuaGVpZ2h0ICogZHByO1xuXG4gICAgICAgICAgICAgICAgaWYoIWdsb2JhbEN0eC5EUFJNYXQpe1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxDdHguRFBSID0gZHByO1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxDdHguRFBSTWF0ID0gbWF0MmQuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIG1hdDJkLm11bHRpcGx5U2NhbGFyKGdsb2JhbEN0eC5EUFJNYXQsIGdsb2JhbEN0eC5EUFJNYXQsIGRwcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2FudmFzRWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgICAgICBjYW52YXNFbGVtLnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICAgICAgICAgICAgICBjYW52YXNFbGVtLnN0eWxlLnRvcCA9IFwiMFwiO1xuICAgICAgICAgICAgICAgIGNhbnZhc0VsZW0uc3R5bGUud2lkdGggPSBgJHtyZWN0LndpZHRofXB4YDtcbiAgICAgICAgICAgICAgICBjYW52YXNFbGVtLnN0eWxlLmhlaWdodCA9IGAke3JlY3QuaGVpZ2h0fXB4YDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERQSVBsdWdpbjtcbiIsIi8vIGltcG9ydCBjb2xvclN0cmluZyBmcm9tICdjb2xvci1zdHJpbmcnO1xuXG5jb25zdCBERUZBVUxUX0NPTE9SUyA9IFtcbiAgICBbIDEwMywgMTcwLCAyNDUgXSxcbiAgICBbIDI1NSwgMTc0LCA2MCBdLFxuICAgIFsgNzgsIDIwMSwgMTcxIF0sXG4gICAgWyAyNDUsIDEzMSwgMTIyIF0sXG4gICAgWyAxNTgsIDE1NiwgMjQ2IF0sXG4gICAgWyAzMCwgMTkyLCAyMTYgXSxcbiAgICBbIDEzOCwgMjA1LCA3OCBdLFxuICAgIFsgMjM3LCAxMzksIDIwNCBdLFxuICAgIFsgMTM1LCAyMDYsIDIzMiBdLFxuICAgIFsgOTcsIDIxOCwgMTk4IF0sXG4gICAgWyAxOTgsIDE1NiwgMjQ2IF0sXG4gICAgWyAxMzcsIDE3MCwgMjQ3IF0sXG4gICAgWyAxMzQsIDE4NywgMjMxIF0sXG4gICAgWyAyNDUsIDE5NiwgODAgXSxcbiAgICBbIDEzNSwgMjA2LCAyMzIgXSxcbiAgICBbIDIzOSwgMjE2LCAyMiBdLFxuICAgIFsgOTIsIDIwOCwgMTMzIF0sXG4gICAgWyAyNDEsIDEyNiwgMjQ4IF1cbl07XG5cblxuY2xhc3MgVGhlbWVQbHVnaW4ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLm5hbWUgPSAnVGhlbWVQbHVnaW4nO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjb2xvcnMsXG4gICAgICAgICAgICBkaXNhYmxlZE9wYWNpdHksXG4gICAgICAgICAgICBmYWRlT3BhY2l0eSxcbiAgICAgICAgfSA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sb3JzID0gY29sb3JzIHx8IERFRkFVTFRfQ09MT1JTO1xuICAgICAgICB0aGlzLmRpc2FibGVkT3BhY2l0eSA9IGRpc2FibGVkT3BhY2l0eSB8fCAwLjE7XG4gICAgICAgIHRoaXMuZmFkZU9wYWNpdHkgPSBmYWRlT3BhY2l0eSB8fCAwLjQ7XG5cbiAgICB9XG5cbiAgICBhcHBseShnbG9iYWxDdHgpIHtcbiAgICAgICAgZ2xvYmFsQ3R4Lmhvb2tzLmluaXRUaGVtZS50YXAodGhpcy5uYW1lLFxuICAgICAgICAgICAgKGNvbnRhaW5lcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzLCBkaXNhYmxlZE9wYWNpdHksIGZhZGVPcGFjaXR5XG4gICAgICAgICAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gY29sb3JzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNhYmxlZENvbG9ycyA9IGNvbG9ycy5tYXAoYyA9PiBbLi4uYywgZGlzYWJsZWRPcGFjaXR5XSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmFkZUNvbG9ycyA9IGNvbG9ycy5tYXAoYyA9PiBbLi4uYywgZmFkZU9wYWNpdHldKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmb250ID0gZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIpLmZvbnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSBwYXJzZUZsb2F0KGZvbnQpO1xuXG4gICAgICAgICAgICAgICAgZ2xvYmFsQ3R4LnRoZW1lID0ge1xuICAgICAgICAgICAgICAgICAgICBnZXRDb2xvcihpZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBpZHggJSBsZW5ndGggKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JzW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkQ29sb3I6IGRpc2FibGVkQ29sb3JzW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhZGVDb2xvcjogZmFkZUNvbG9yc1tpXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICBheGlzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogJyNlZWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lUGx1Z2luO1xuIiwiY29uc3QgREVGQVVMVF9PUFRJT04gPSB7XG4gICAgbGVmdDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCwgdG9wOiAwLFxufTtcblxuY2xhc3MgTGF5b3V0UGx1Z2luIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubmFtZSA9ICdsYXlvdXRQbHVnaW4nO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFwcGx5KGdsb2JhbEN0eCkge1xuICAgICAgICBnbG9iYWxDdHguaG9va3MuYWZ0ZXJEYXRhQW5kTGF5b3V0UmVhZHkudGFwKHRoaXMubmFtZSwgKCkgPT4ge1xuICAgICAgICAgICAgZ2xvYmFsQ3R4LmVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VmZmVjdCBpbml0IGxheW91dCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLFxuICAgICAgICAgICAgICAgICAgICB4RmxvYXQgPSAxMCxcbiAgICAgICAgICAgICAgICB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihnbG9iYWxDdHguTGF5b3V0LCB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICB4RmxvYXRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGdsb2JhbEN0eC5MYXlvdXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGF5b3V0UGx1Z2luO1xuIiwiaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICdsb2Rhc2gnO1xuY2xhc3MgRXZlbnRMaXN0ZW5lclBsdWdpbiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubmFtZSA9ICdFdmVudExpc3RlbmVyJztcbiAgICB9XG5cbiAgICBhcHBseShnbG9iYWxDdHgpIHtcbiAgICAgICAgZ2xvYmFsQ3R4Lk92ZXJsYXllci5ob29rcy5pbml0T3ZlcmxheWVyLnRhcCh0aGlzLm5hbWUsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihnbG9iYWxDdHgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRFdmVudExpc3RlbmVyKGdsb2JhbEN0eCkge1xuICAgICAgICBjb25zdCBjYW52YXNFbGVtID0gZ2xvYmFsQ3R4Lk92ZXJsYXllci5jYW52YXNFbG07XG4gICAgICAgIHRoaXMuYmluZExpc3RlbmVyKGNhbnZhc0VsZW0sICdwb2ludGVyZG93bicsIGdsb2JhbEN0eCk7XG4gICAgICAgIHRoaXMuYmluZFRocm90dGxlTGlzdGVuZXIoY2FudmFzRWxlbSwgJ3BvaW50ZXJtb3ZlJywgZ2xvYmFsQ3R4KTtcbiAgICAgICAgdGhpcy5iaW5kTGlzdGVuZXIoY2FudmFzRWxlbSwgJ3BvaW50ZXJ1cCcsIGdsb2JhbEN0eCk7XG5cbiAgICAgICAgLy8gdGhpcy5iaW5kTGlzdGVuZXIoY2FudmFzRWxlbSwgJ3RvdWNoc3RhcnQnLCBnbG9iYWxDdHgpO1xuICAgICAgICAvLyB0aGlzLmJpbmRMaXN0ZW5lcihjYW52YXNFbGVtLCAndG91Y2htb3ZlJywgZ2xvYmFsQ3R4KTtcbiAgICAgICAgLy8gdGhpcy5iaW5kTGlzdGVuZXIoY2FudmFzRWxlbSwgJ3RvdWNoZW5kJywgZ2xvYmFsQ3R4KTtcblxuICAgICAgICAvLyB0aGlzLmJpbmRMaXN0ZW5lcihjYW52YXNFbGVtLCAnbW91c2Vkb3duJywgZ2xvYmFsQ3R4KTtcbiAgICAgICAgLy8gdGhpcy5iaW5kTGlzdGVuZXIoY2FudmFzRWxlbSwgJ21vdXNlbW92ZScsIGdsb2JhbEN0eCk7XG4gICAgICAgIC8vIHRoaXMuYmluZExpc3RlbmVyKGNhbnZhc0VsZW0sICdtb3VzZXVwJywgZ2xvYmFsQ3R4KTtcblxuICAgICAgICB0aGlzLmJpbmRMaXN0ZW5lcihjYW52YXNFbGVtLCAnbW91c2VlbnRlcicsIGdsb2JhbEN0eCk7XG4gICAgICAgIHRoaXMuYmluZExpc3RlbmVyKGNhbnZhc0VsZW0sICdtb3VzZWxlYXZlJywgZ2xvYmFsQ3R4KTtcbiAgICAgICAgLy8gZ2xvYmFsQ3R4Ll9tb3VzZSA9IHRoaXMubW91c2U7XG4gICAgfVxuXG4gICAgYmluZFRocm90dGxlTGlzdGVuZXIoZWxlbSwgZXZlbnQsIGdsb2JhbEN0eCkge1xuICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRocm90dGxlKGUgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZS5vZmZzZXRYLCBlLm9mZnNldFkpO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihnbG9iYWxDdHguX21vdXNlLCB7XG4gICAgICAgICAgICAgICAgeDogZS5vZmZzZXRYLFxuICAgICAgICAgICAgICAgIHk6IGUub2Zmc2V0WSxcbiAgICAgICAgICAgICAgICBkZWx0YVk6IGUuZGVsdGFZLFxuICAgICAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIDE2KSk7XG4gICAgfVxuXG4gICAgYmluZExpc3RlbmVyKGVsZW0sIGV2ZW50LCBnbG9iYWxDdHgpIHtcbiAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBlID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGUub2Zmc2V0WCwgZS5vZmZzZXRZKTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZ2xvYmFsQ3R4Ll9tb3VzZSwge1xuICAgICAgICAgICAgICAgIHg6IGUub2Zmc2V0WCxcbiAgICAgICAgICAgICAgICB5OiBlLm9mZnNldFksXG4gICAgICAgICAgICAgICAgZGVsdGFZOiBlLmRlbHRhWSxcbiAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudExpc3RlbmVyUGx1Z2luO1xuIiwiY2xhc3MgR2xvYmFsTGF5b3V0UGx1Z2luIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0dsb2JhbExheW91dFBsdWdpbic7XG5cbiAgICB9XG4gICAgYXBwbHkoZ2xvYmFsQ3R4KSB7XG4gICAgICAgIGdsb2JhbEN0eC5ob29rcy5pbml0R2xvYmFsTGF5b3V0LnRhcCh0aGlzLm5hbWUsIChjb250YWluZXIsIGxheW91dENvbnRleHQpID0+e1xuICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlWydmbGV4LWRpcmVjdGlvbiddID0gJ2NvbHVtbic7XG4gICAgICAgICAgICBjb250YWluZXIuc3R5bGVbJ2p1c3RpZnktY29udGVudCddID0gJ2ZsZXgtZW5kJztcbiAgICAgICAgICAgIGNvbnN0IGNoYXJ0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjaGFydGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYFxuICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgYCk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5wcmVwZW5kKGNoYXJ0Y29udGFpbmVyKTtcbiAgICAgICAgICAgIGxheW91dENvbnRleHQuY2FudmFzV3JhcHBlciA9IGNoYXJ0Y29udGFpbmVyO1xuICAgICAgICAgICAgY29uc3QgYm94ID0gY2hhcnRjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBnbG9iYWxDdHguYm91bmRpbmdCb3gud2lkdGggPSBib3gud2lkdGg7XG4gICAgICAgICAgICBnbG9iYWxDdHguYm91bmRpbmdCb3guaGVpZ2h0ID0gYm94LmhlaWdodDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHbG9iYWxMYXlvdXRQbHVnaW47IiwiaW1wb3J0IEdsb2JhbENvbnRleHQgZnJvbSAnLi9nbG9iYWwtY29udGV4dCc7XG5pbXBvcnQgRFBJUGx1Z2luIGZyb20gJy4uL3BsdWdpbnMvaW5uZXIvRFBJUGx1Z2luJztcbmltcG9ydCBUaGVtZVBsdWdpbiBmcm9tICcuLi9wbHVnaW5zL2lubmVyL1RoZW1lUGx1Z2luJztcbmltcG9ydCBMYXlvdXRQbHVnaW4gZnJvbSAnLi4vcGx1Z2lucy9pbm5lci9MYXlvdXRQbHVnaW4nO1xuaW1wb3J0IEV2ZW50TGlzdGVuZXJQbHVnaW4gZnJvbSAnLi4vcGx1Z2lucy9pbm5lci9FdmVudExpc3RlbmVyUGx1Z2luJztcbmltcG9ydCBHbG9iYWxMYXlvdXRQbHVnaW4gZnJvbSAnLi4vcGx1Z2lucy9pbm5lci9HbG9iYWxMYXlvdXRQbHVnaW4nO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRDb250ZXh0KHBsdWdpbnMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGdsb2JhbEN0eCA9IG5ldyBHbG9iYWxDb250ZXh0KCk7XG4gICAgY29uc3QgaW5uZXJQbHVnaW5zID0gW1xuICAgICAgICBcbiAgICAgICAgbmV3IFRoZW1lUGx1Z2luKG9wdGlvbnMudGhlbWUpLFxuICAgICAgICBuZXcgTGF5b3V0UGx1Z2luKG9wdGlvbnMubGF5b3V0KSxcbiAgICAgICAgbmV3IEV2ZW50TGlzdGVuZXJQbHVnaW4oKSxcbiAgICAgICAgbmV3IEdsb2JhbExheW91dFBsdWdpbigpLFxuICAgICAgICBuZXcgRFBJUGx1Z2luKCksXG4gICAgXTtcblxuICAgIHBsdWdpbnMgPSBpbm5lclBsdWdpbnMuY29uY2F0KHBsdWdpbnMpO1xuICAgIHBsdWdpbnMuZm9yRWFjaChwbHVnaW4gPT4ge1xuICAgICAgICBwbHVnaW4uYXBwbHkoZ2xvYmFsQ3R4KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZ2xvYmFsQ3R4O1xufVxuIiwiaW1wb3J0IHsgaW5pdENvbnRleHQgfSBmcm9tICcuL2NvbnRleHQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihcbiAgICBwbHVnaW5zLCBcbiAgICBvcHRpb25zXG4pIHtcbiAgICBjb25zdCBnbG9iYWxDdHggPSBpbml0Q29udGV4dChwbHVnaW5zLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKGNvbnRhaW5lciwgZGF0YSkgPT4ge1xuICAgICAgICBnbG9iYWxDdHguaW5pdChjb250YWluZXIsIGRhdGEpO1xuICAgICAgICBnbG9iYWxDdHgucmVuZGVyKCk7XG4gICAgICAgIHJldHVybiBnbG9iYWxDdHg7XG4gICAgfTtcbn0iLCJpbXBvcnQgRGF0YTJEIGZyb20gJy4uL3NyYy9wbHVnaW5zL2RhdGEvMmQtZGF0YSc7XG5pbXBvcnQgRGF0YTFEIGZyb20gJy4uL3NyYy9wbHVnaW5zL2RhdGEvMWQtZGF0YSc7XG5pbXBvcnQgQ29vcmQyRCBmcm9tICcuLi9zcmMvcGx1Z2lucy9heGlzLzJkLWNvb3JkJztcbmltcG9ydCBHZW8yRCBmcm9tICcuLi9zcmMvcGx1Z2lucy9heGlzLzJkLWdlbyc7XG5pbXBvcnQgTGluZUNoYXJ0IGZyb20gJy4uL3NyYy9wbHVnaW5zL2NoYXJ0L0xpbmVDaGFydCc7XG5pbXBvcnQgQmFyQ2hhcnQgZnJvbSAnLi4vc3JjL3BsdWdpbnMvY2hhcnQvQmFyQ2hhcnQnO1xuaW1wb3J0IFBpZUNoYXJ0IGZyb20gJy4uL3NyYy9wbHVnaW5zL2NoYXJ0L1BpZUNoYXJ0JztcbmltcG9ydCBMaW5lSW5kaWNhdG9yIGZyb20gJy4uL3NyYy9wbHVnaW5zL292ZXJsYXllci9MaW5lSW5kaWNhdG9yJztcbmltcG9ydCBMZWdlbmQgZnJvbSAnLi4vc3JjL3BsdWdpbnMvb3ZlcmxheWVyL0xlZ2VuZC5qcyc7XG5cbmltcG9ydCBKQ2hhcnQgZnJvbSAnLi4vc3JjL2luZGV4JztcbmltcG9ydCBkYXRhMSBmcm9tICcuL2RhdGEtYmlnLTEuanNvbic7XG5pbXBvcnQgZGF0YTIgZnJvbSAnLi9kYXRhLWJpZy0yLmpzb24nO1xuXG5pbXBvcnQgeyBmbGF0dGVuLCBnZXQgfSBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBjaGFydE1vZGVsID0gSkNoYXJ0KFtcbiAgICBuZXcgRGF0YTJEKCksXG4gICAgbmV3IENvb3JkMkQoe1xuICAgICAgICB0eXBlOiAndmVydGljYWwnLFxuICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICAgICAgICAgIGhvcml6b250YWw6IHRydWUsXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBuZXcgTGluZUNoYXJ0KHtcbiAgICAgICAgc21vb3RoOiB0cnVlLFxuICAgICAgICBmaWxsOiB0cnVlLFxuICAgIH0pLFxuICAgIC8vIG5ldyBCYXJDaGFydCgpLFxuICAgIG5ldyBMaW5lSW5kaWNhdG9yKCksXG4gICAgbmV3IExlZ2VuZCgpLFxuXSwge1xuICAgIGxheW91dDoge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDIwLFxuICAgICAgICBib3R0b206IDQwLFxuICAgICAgICByaWdodDogMzAsXG4gICAgICAgIHhGbG9hdDogMjBcbiAgICB9XG59KTtcblxuY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5jb250YWluZXIuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgbWFyZ2luOiAzMHB4O1xuICAgIHdpZHRoOiA2ODBweDtcbiAgICBoZWlnaHQ6IDMyMHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlYmVjY2FwdXJwbGU7YCk7XG5cbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuY29uc3QgZGF0YUZvcm1hdHRlciA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCdlbi1VUycsIHtcbiAgICB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnbnVtZXJpYycsIGRheTogJ251bWVyaWMnLFxuICAgIGhvdXI6ICdudW1lcmljJywgbWludXRlOiAnbnVtZXJpYycsIHNlY29uZDogJ251bWVyaWMnLFxuICAgIGhvdXIxMjogZmFsc2UsXG59KTtcbmNvbnN0IE51bWJlckZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZW4tR0InLCB7XG4gICAgbm90YXRpb246ICdjb21wYWN0JyxcbiAgICBjb21wYWN0RGlzcGxheTogJ3Nob3J0Jyxcbn0pO1xuXG5mdW5jdGlvbiBnZXRTZXJpZXMoZGF0YSkge1xuICAgIGxldCBsYXJnZXN0O1xuICAgIGxldCBsID0gMDtcbiAgICBjb25zdCByZXN1bHRzID0gZ2V0KGRhdGEsICdkYXRhLnJlc3VsdCcsIFtdKTtcbiAgICByZXN1bHRzLmZvckVhY2gociA9PiB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHIudmFsdWVzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA+IGwpIHtcbiAgICAgICAgICAgIGwgPSBsZW5ndGg7XG4gICAgICAgICAgICBsYXJnZXN0ID0gci52YWx1ZXMubWFwKHYgPT4gdlswXSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZmxhdHRlbihcbiAgICAgICAgZ2V0KGRhdGEsICdkYXRhLnJlc3VsdCcsIFtdKS5tYXAociA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSByLnZhbHVlcy5tYXAodiA9PiBbIHZbMF0gKiAxMDAwLCArdlsxXSBdKTtcbiAgICAgICAgICAgIGxldCB2cyA9IFtdO1xuICAgICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPCBsKSB7XG4gICAgICAgICAgICAgICAgbGFyZ2VzdC5mb3JFYWNoKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lID0gdCAqIDEwMDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHEgPSB2YWx1ZXMuZmluZCh2ID0+IHZbMF0gPT09IHRpbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdnMucHVzaChxKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZzLnB1c2goWyB0ICogMTAwMCwgMCBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2cyA9IHZhbHVlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiByLm1ldHJpYy5wb2QsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbn1cblxuXG5cbmNvbnN0IGdsb2JhbEN0eCA9IGNoYXJ0TW9kZWwoY29udGFpbmVyLCB7XG4gICAgcmVmZXJlbmNlOiB7XG4gICAgICAgIHR5cGU6ICdjb250aW51b3VzJyxcbiAgICB9LFxuICAgIHNlcmllczogZ2V0U2VyaWVzKGRhdGExKSxcbiAgICBzdGFjazogdHJ1ZSxcbiAgICB4QXhpczoge1xuICAgICAgICBzcGFuOiA2LFxuICAgICAgICBmb3JtYXQodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGV0aW1lID0gbmV3IERhdGUodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFGb3JtYXR0ZXIuZm9ybWF0KGRhdGV0aW1lKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHlBeGlzOiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgZm9ybWF0KHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyRm9ybWF0dGVyLmZvcm1hdCh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xuXG5jb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbmJ1dHRvbi5pbm5lclRleHQgPSBcImNsaWNrISFcIjtcbmxldCBmbGFnID0gZmFsc2U7XG5idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgZ2xvYmFsQ3R4LnJlc2V0RGF0YSh7XG4gICAgICAgIHJlZmVyZW5jZToge1xuICAgICAgICAgICAgdHlwZTogJ2NvbnRpbnVvdXMnLFxuICAgICAgICB9LFxuICAgICAgICBzZXJpZXM6IGdldFNlcmllcyhmbGFnID8gZGF0YTE6IGRhdGEyKSxcbiAgICAgICAgc3RhY2s6IHRydWUsXG4gICAgICAgIHhBeGlzOiB7XG4gICAgICAgICAgICBzcGFuOiA2LFxuICAgICAgICAgICAgZm9ybWF0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZXRpbWUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFGb3JtYXR0ZXIuZm9ybWF0KGRhdGV0aW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHlBeGlzOiB7XG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBmb3JtYXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyRm9ybWF0dGVyLmZvcm1hdCh2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIGZsYWcgPSAhZmxhZztcbn0pO1xuXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJ1dHRvbik7XG5cbmNvbnN0IGNvbnRhaW5lcmRpc2NyZXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5jb250YWluZXJkaXNjcmV0ZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IDMwcHg7XG4gICAgd2lkdGg6IDY4MHB4O1xuICAgIGhlaWdodDogMzIwcHg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmViZWNjYXB1cnBsZTtgKTtcblxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXJkaXNjcmV0ZSk7XG5mdW5jdGlvbiByYW5kb21EYXRhKCkge1xuICAgIGNvbnN0IGtleXMgPSBbJ2EnLCAnYicsICdjJ107XG4gICAgY29uc3QgZGF0ZSA9IFsnMjAxMicsICcyMDEzJywgJzIwMTQnLCAnMjAxNScsICcyMDE2JywgJzIwMTcnLCAnMjAxOCddO1xuICAgIGNvbnN0IHNsaWNlZERhdGEgPSBkYXRlLnNsaWNlKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQpKTtcbiAgICByZXR1cm4ga2V5cy5tYXAoayA9PiAoe1xuICAgICAgICBuYW1lOiBrLFxuICAgICAgICB2YWx1ZXM6IHNsaWNlZERhdGEubWFwKGQgPT4gW2QsIDMwMCArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDE3MDApXSlcbiAgICB9KSk7XG59XG5jb25zdCBjaGFydE1vZGVsRGlzY3JldGUgPSBKQ2hhcnQoW1xuICAgIG5ldyBEYXRhMkQoKSxcbiAgICBuZXcgQ29vcmQyRCh7XG4gICAgICAgIHR5cGU6ICd2ZXJ0aWNhbCcsXG4gICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgIHZlcnRpY2FsOiB0cnVlLFxuICAgICAgICAgICAgaG9yaXpvbnRhbDogdHJ1ZSxcbiAgICAgICAgfVxuICAgIH0pLFxuICAgIC8vIG5ldyBMaW5lQ2hhcnQoe1xuICAgIC8vICAgICBzbW9vdGg6IHRydWUsXG4gICAgLy8gICAgIGZpbGw6IHRydWUsXG4gICAgLy8gfSksXG4gICAgbmV3IEJhckNoYXJ0KCksXG4gICAgbmV3IExpbmVJbmRpY2F0b3Ioe1xuICAgICAgICBiYXI6IHRydWUsXG4gICAgfSksXG4gICAgbmV3IExlZ2VuZCgpLFxuXSwge1xuICAgIGxheW91dDoge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDIwLFxuICAgICAgICBib3R0b206IDIwLFxuICAgICAgICByaWdodDogMzAsXG4gICAgICAgIHhGbG9hdDogNTBcbiAgICB9XG59KTtcbmNvbnN0IGcyID0gY2hhcnRNb2RlbERpc2NyZXRlKGNvbnRhaW5lcmRpc2NyZXRlLCB7XG4gICAgcmVmZXJlbmNlOiB7XG4gICAgICAgIHR5cGU6ICdkaXNjcmV0ZScsXG4gICAgfSxcbiAgICBzZXJpZXM6IHJhbmRvbURhdGEoKSxcbiAgICBzdGFjazogdHJ1ZSxcbiAgICB4QXhpczoge1xuICAgICAgICBzcGFuOiA2LFxuICAgIH0sXG4gICAgeUF4aXM6IHtcbiAgICAgICAgbWluOiAwLFxuICAgICAgICBmb3JtYXQodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXJGb3JtYXR0ZXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICB9LFxufSk7XG5cbmNvbnN0IGJ1dHRvbjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbmJ1dHRvbjIuaW5uZXJUZXh0ID0gXCJjbGljayEhXCI7XG5idXR0b24yLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGcyLnJlc2V0RGF0YSh7XG4gICAgICAgIHJlZmVyZW5jZToge1xuICAgICAgICAgICAgdHlwZTogJ2Rpc2NyZXRlJyxcbiAgICAgICAgfSxcbiAgICAgICAgc2VyaWVzOiByYW5kb21EYXRhKCksXG4gICAgICAgIHN0YWNrOiB0cnVlLFxuICAgICAgICB4QXhpczoge1xuICAgICAgICAgICAgc3BhbjogNixcbiAgICAgICAgfSxcbiAgICAgICAgeUF4aXM6IHtcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXJGb3JtYXR0ZXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSk7XG59KTtcblxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChidXR0b24yKTtcblxuXG5cbmNvbnN0IGNvbnRhaW5lclBpZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuY29udGFpbmVyUGllLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG1hcmdpbjogMzBweDtcbiAgICB3aWR0aDogNjgwcHg7XG4gICAgaGVpZ2h0OiAzMjBweDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZWJlY2NhcHVycGxlO2ApO1xuXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lclBpZSk7XG5jb25zdCBkYXRhUmFuZG9tID0gKCkgPT4ge1xuICAgIGNvbnN0IHBvc3NpYmxlID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiO1xuICAgIGNvbnN0IGxlbmd0aCA9IDY7XG4gICAgY29uc3QgZGF0YSA9IFtdO1xuICAgIGZvcihsZXQgaT0wO2k8bGVuZ3RoO2krKykge1xuICAgICAgICBkYXRhLnB1c2goe1xuICAgICAgICAgICAgdmFsdWU6IDMwMCArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDE3MDApLFxuICAgICAgICAgICAgbmFtZTogcG9zc2libGUuY2hhckF0KGkpLFxuICAgICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gZGF0YVxufVxuXG5jb25zdCBjaGFydE1vZGVsUGllID0gSkNoYXJ0KFtcbiAgICBuZXcgRGF0YTFEKCksXG4gICAgbmV3IEdlbzJEKCksXG4gICAgLy8gbmV3IExpbmVDaGFydCh7XG4gICAgLy8gICAgIHNtb290aDogdHJ1ZSxcbiAgICAvLyAgICAgZmlsbDogdHJ1ZSxcbiAgICAvLyB9KSxcbiAgICBuZXcgUGllQ2hhcnQoKSxcbiAgICBuZXcgTGVnZW5kKHtcbiAgICAgICAgZGlzYWJsZXNlbGVjdDogdHJ1ZVxuICAgIH0pLFxuXSwge1xuICAgIGxheW91dDoge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDIwLFxuICAgICAgICBib3R0b206IDIwLFxuICAgICAgICByaWdodDogMzAsXG4gICAgfVxufSk7XG5cbmNvbnN0IGczID0gY2hhcnRNb2RlbFBpZShjb250YWluZXJQaWUsIHtcbiAgICBzZXJpZXM6IGRhdGFSYW5kb20oKSxcbn0pO1xuXG5jb25zdCBidXR0b24zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5idXR0b24zLmlubmVyVGV4dCA9IFwiY2xpY2shIVwiO1xuYnV0dG9uMy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBnMy5yZXNldERhdGEoe1xuICAgICAgICBzZXJpZXM6IGRhdGFSYW5kb20oKSxcbiAgICB9KTtcbn0pO1xuXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJ1dHRvbjMpO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2g1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUN4N0JBO0FBS0E7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFGQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFNQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUFBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFBQTtBQUNBOzs7Ozs7OztBQ3pOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU9BO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFWQTtBQVlBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFRQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFKQTtBQVBBO0FBY0E7QUFDQTs7Ozs7O0FBR0E7Ozs7Ozs7O0FDMUlBOzs7Ozs7O0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7OztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBTkE7QUFRQTs7Ozs7O0FBR0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9tQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBN0JBOzs7Ozs7OztBQ0pBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRkE7QUFBQTtBQUVBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXhCQTtBQUFBO0FBQUE7QUF5QkE7QUFDQTtBQTFCQTtBQUFBO0FBQUE7QUE0QkE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBOUVBO0FBQ0E7QUFEQTtBQUFBO0FBaUZBO0FBQ0E7QUFNQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQWpCQTtBQUFBO0FBQUE7QUFtQkE7QUFDQTtBQXBCQTtBQUFBO0FBQUE7QUFzQkE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXRDQTtBQUNBO0FBREE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7QUNsSkE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFJQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZBO0FBaUJBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBS0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQUNBO0FBWUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBaEJBO0FBbUJBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUdBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUtBO0FBQUE7QUFBQTtBQUlBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7OztBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7Ozs7OztBQUVBOzs7Ozs7OztBQ3RVQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBUUE7QUFDQTs7Ozs7O0FBR0E7Ozs7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3g0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BEQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUlBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVNBO0FBQ0E7QUFBQTtBQUFBO0FBREE7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQURBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFyQkE7QUF1QkE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBbENBO0FBd0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRkE7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQUE7QUFBQTtBQUdBO0FBQUE7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFJQTtBQUNBO0FBRUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFJQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzFXQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBSUE7QUFBQTtBQUFBO0FBQUE7QUFNQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFEQTtBQUdBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQUE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQXpCQTtBQTJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEzQ0E7QUE0Q0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFGQTtBQUlBO0FBRUE7QUFDQTtBQUdBO0FBQUE7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUFBO0FBS0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUdBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7QUMxU0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUtBO0FBQUE7QUFBQTtBQUlBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFBQTtBQU9BO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBQUE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBekJBO0FBNEJBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUVBO0FBQ0E7QUFHQTtBQUFBO0FBQUE7QUFHQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUdBO0FBSUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBSUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7Ozs7OztBQUdBOzs7Ozs7OztBQ3JRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWUE7QUFDQTtBQUNBO0FBSUE7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBSUE7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQUE7QUFOQTtBQWFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFJQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFHQTs7Ozs7Ozs7QUM1TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFVQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFGQTtBQUFBO0FBQ0E7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7OztBQ3BIQTtBQUNBO0FBQUE7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7Ozs7OztBQzFIQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTtBQUNBO0FBQ0E7Ozs7OztBQUdBOzs7Ozs7OztBQ3hCQTs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFSQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWEE7QUFSQTtBQXFCQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7O0FBbENBO0FBQ0E7QUFvQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQVBBO0FBaUJBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7Ozs7QUE5QkE7QUFDQTtBQStCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBT0E7QUFDQTtBQUNBO0FBRkE7QUFHQTtBQUNBO0FBQ0E7QUFkQTtBQWVBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7OztBQWhDQTtBQUNBO0FBaUNBOzs7Ozs7Ozs7Ozs7OztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQUdBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQUFBO0FBQ0E7QUFEQTtBQU1BO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUF6QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQXlCQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFLQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBQ0E7OztBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQVFBO0FBQ0E7QUFDQTtBQUVBOztBQVpBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBZUE7QUFDQTtBQUNBO0FBRUE7O0FBWkE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFlQTtBQUNBO0FBQ0E7QUFFQTs7QUFaQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWVBO0FBQ0E7QUFDQTtBQUVBOztBQVpBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBZUE7QUFDQTtBQUNBO0FBRUE7O0FBWkE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFlQTtBQUNBO0FBQ0E7QUFFQTs7QUFaQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWVBO0FBQ0E7QUFDQTtBQUVBOztBQVpBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBZUE7QUFDQTtBQUNBO0FBRUE7O0FBWkE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFlQTtBQUNBO0FBQ0E7QUFFQTs7QUFaQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWVBO0FBQ0E7QUFDQTtBQUVBOztBQVpBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBZUE7QUFDQTtBQUNBO0FBRUE7O0FBWkE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFlQTtBQUNBO0FBQ0E7QUFFQTs7QUFaQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWVBO0FBQ0E7QUFDQTtBQUVBOztBQVpBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBZUE7QUFDQTtBQUNBO0FBRUE7O0FBWkE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFlQTtBQUNBO0FBQ0E7QUFFQTs7QUFaQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWVBO0FBQ0E7QUFDQTtBQUVBOztBQVpBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBZUE7QUFDQTtBQUNBO0FBRUE7O0FBWkE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFlQTtBQUNBO0FBQ0E7QUFWQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWNBO0FBQ0E7QUFDQTtBQUVBOztBQVpBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBZUE7QUFDQTtBQUNBO0FBRUE7O0FBWkE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFlQTtBQUNBO0FBQ0E7QUFWQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQU1BO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FDaHpCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZEE7QUFpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQUdBOzs7Ozs7OztBQ3ZLQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0JBO0FBRUE7QUFDQTtBQXFCQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQVZBO0FBZUE7QUFDQTs7Ozs7O0FBR0E7Ozs7Ozs7O0FDckVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFEQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUZBO0FBREE7QUFPQTtBQUNBO0FBQ0E7Ozs7OztBQUdBOzs7Ozs7OztBQzlCQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTs7Ozs7O0FBR0E7Ozs7Ozs7O0FDMURBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQUdBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBOztBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBRkE7QUFRQTtBQUNBO0FBRkE7QUFLQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBREE7QUFVQTtBQUNBO0FBT0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBYkE7QUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQWJBO0FBb0JBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFPQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFGQTtBQUFBO0FBSUE7QUFDQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUZBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQURBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFEQTtBQVNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQVRBO0FBaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQVRBO0FBZ0JBO0FBRUE7QUFJQTtBQUNBO0FBT0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQURBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBREE7QUFTQTtBQUNBO0FBREE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///210\n')},431:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --\x3e 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return BigNumber; }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else {}\r\n})(this);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///431\n")},874:module=>{"use strict";eval('\r\n\r\nmodule.exports = {\r\n\t"aliceblue": [240, 248, 255],\r\n\t"antiquewhite": [250, 235, 215],\r\n\t"aqua": [0, 255, 255],\r\n\t"aquamarine": [127, 255, 212],\r\n\t"azure": [240, 255, 255],\r\n\t"beige": [245, 245, 220],\r\n\t"bisque": [255, 228, 196],\r\n\t"black": [0, 0, 0],\r\n\t"blanchedalmond": [255, 235, 205],\r\n\t"blue": [0, 0, 255],\r\n\t"blueviolet": [138, 43, 226],\r\n\t"brown": [165, 42, 42],\r\n\t"burlywood": [222, 184, 135],\r\n\t"cadetblue": [95, 158, 160],\r\n\t"chartreuse": [127, 255, 0],\r\n\t"chocolate": [210, 105, 30],\r\n\t"coral": [255, 127, 80],\r\n\t"cornflowerblue": [100, 149, 237],\r\n\t"cornsilk": [255, 248, 220],\r\n\t"crimson": [220, 20, 60],\r\n\t"cyan": [0, 255, 255],\r\n\t"darkblue": [0, 0, 139],\r\n\t"darkcyan": [0, 139, 139],\r\n\t"darkgoldenrod": [184, 134, 11],\r\n\t"darkgray": [169, 169, 169],\r\n\t"darkgreen": [0, 100, 0],\r\n\t"darkgrey": [169, 169, 169],\r\n\t"darkkhaki": [189, 183, 107],\r\n\t"darkmagenta": [139, 0, 139],\r\n\t"darkolivegreen": [85, 107, 47],\r\n\t"darkorange": [255, 140, 0],\r\n\t"darkorchid": [153, 50, 204],\r\n\t"darkred": [139, 0, 0],\r\n\t"darksalmon": [233, 150, 122],\r\n\t"darkseagreen": [143, 188, 143],\r\n\t"darkslateblue": [72, 61, 139],\r\n\t"darkslategray": [47, 79, 79],\r\n\t"darkslategrey": [47, 79, 79],\r\n\t"darkturquoise": [0, 206, 209],\r\n\t"darkviolet": [148, 0, 211],\r\n\t"deeppink": [255, 20, 147],\r\n\t"deepskyblue": [0, 191, 255],\r\n\t"dimgray": [105, 105, 105],\r\n\t"dimgrey": [105, 105, 105],\r\n\t"dodgerblue": [30, 144, 255],\r\n\t"firebrick": [178, 34, 34],\r\n\t"floralwhite": [255, 250, 240],\r\n\t"forestgreen": [34, 139, 34],\r\n\t"fuchsia": [255, 0, 255],\r\n\t"gainsboro": [220, 220, 220],\r\n\t"ghostwhite": [248, 248, 255],\r\n\t"gold": [255, 215, 0],\r\n\t"goldenrod": [218, 165, 32],\r\n\t"gray": [128, 128, 128],\r\n\t"green": [0, 128, 0],\r\n\t"greenyellow": [173, 255, 47],\r\n\t"grey": [128, 128, 128],\r\n\t"honeydew": [240, 255, 240],\r\n\t"hotpink": [255, 105, 180],\r\n\t"indianred": [205, 92, 92],\r\n\t"indigo": [75, 0, 130],\r\n\t"ivory": [255, 255, 240],\r\n\t"khaki": [240, 230, 140],\r\n\t"lavender": [230, 230, 250],\r\n\t"lavenderblush": [255, 240, 245],\r\n\t"lawngreen": [124, 252, 0],\r\n\t"lemonchiffon": [255, 250, 205],\r\n\t"lightblue": [173, 216, 230],\r\n\t"lightcoral": [240, 128, 128],\r\n\t"lightcyan": [224, 255, 255],\r\n\t"lightgoldenrodyellow": [250, 250, 210],\r\n\t"lightgray": [211, 211, 211],\r\n\t"lightgreen": [144, 238, 144],\r\n\t"lightgrey": [211, 211, 211],\r\n\t"lightpink": [255, 182, 193],\r\n\t"lightsalmon": [255, 160, 122],\r\n\t"lightseagreen": [32, 178, 170],\r\n\t"lightskyblue": [135, 206, 250],\r\n\t"lightslategray": [119, 136, 153],\r\n\t"lightslategrey": [119, 136, 153],\r\n\t"lightsteelblue": [176, 196, 222],\r\n\t"lightyellow": [255, 255, 224],\r\n\t"lime": [0, 255, 0],\r\n\t"limegreen": [50, 205, 50],\r\n\t"linen": [250, 240, 230],\r\n\t"magenta": [255, 0, 255],\r\n\t"maroon": [128, 0, 0],\r\n\t"mediumaquamarine": [102, 205, 170],\r\n\t"mediumblue": [0, 0, 205],\r\n\t"mediumorchid": [186, 85, 211],\r\n\t"mediumpurple": [147, 112, 219],\r\n\t"mediumseagreen": [60, 179, 113],\r\n\t"mediumslateblue": [123, 104, 238],\r\n\t"mediumspringgreen": [0, 250, 154],\r\n\t"mediumturquoise": [72, 209, 204],\r\n\t"mediumvioletred": [199, 21, 133],\r\n\t"midnightblue": [25, 25, 112],\r\n\t"mintcream": [245, 255, 250],\r\n\t"mistyrose": [255, 228, 225],\r\n\t"moccasin": [255, 228, 181],\r\n\t"navajowhite": [255, 222, 173],\r\n\t"navy": [0, 0, 128],\r\n\t"oldlace": [253, 245, 230],\r\n\t"olive": [128, 128, 0],\r\n\t"olivedrab": [107, 142, 35],\r\n\t"orange": [255, 165, 0],\r\n\t"orangered": [255, 69, 0],\r\n\t"orchid": [218, 112, 214],\r\n\t"palegoldenrod": [238, 232, 170],\r\n\t"palegreen": [152, 251, 152],\r\n\t"paleturquoise": [175, 238, 238],\r\n\t"palevioletred": [219, 112, 147],\r\n\t"papayawhip": [255, 239, 213],\r\n\t"peachpuff": [255, 218, 185],\r\n\t"peru": [205, 133, 63],\r\n\t"pink": [255, 192, 203],\r\n\t"plum": [221, 160, 221],\r\n\t"powderblue": [176, 224, 230],\r\n\t"purple": [128, 0, 128],\r\n\t"rebeccapurple": [102, 51, 153],\r\n\t"red": [255, 0, 0],\r\n\t"rosybrown": [188, 143, 143],\r\n\t"royalblue": [65, 105, 225],\r\n\t"saddlebrown": [139, 69, 19],\r\n\t"salmon": [250, 128, 114],\r\n\t"sandybrown": [244, 164, 96],\r\n\t"seagreen": [46, 139, 87],\r\n\t"seashell": [255, 245, 238],\r\n\t"sienna": [160, 82, 45],\r\n\t"silver": [192, 192, 192],\r\n\t"skyblue": [135, 206, 235],\r\n\t"slateblue": [106, 90, 205],\r\n\t"slategray": [112, 128, 144],\r\n\t"slategrey": [112, 128, 144],\r\n\t"snow": [255, 250, 250],\r\n\t"springgreen": [0, 255, 127],\r\n\t"steelblue": [70, 130, 180],\r\n\t"tan": [210, 180, 140],\r\n\t"teal": [0, 128, 128],\r\n\t"thistle": [216, 191, 216],\r\n\t"tomato": [255, 99, 71],\r\n\t"turquoise": [64, 224, 208],\r\n\t"violet": [238, 130, 238],\r\n\t"wheat": [245, 222, 179],\r\n\t"white": [255, 255, 255],\r\n\t"whitesmoke": [245, 245, 245],\r\n\t"yellow": [255, 255, 0],\r\n\t"yellowgreen": [154, 205, 50]\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///874\n')},818:(module,__unused_webpack_exports,__webpack_require__)=>{eval("/* MIT license */\nvar colorNames = __webpack_require__(874);\nvar swizzle = __webpack_require__(851);\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d{0,3}\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///818\n")},171:module=>{eval("module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL2lzLWFycmF5aXNoL2luZGV4LmpzP2YwY2IiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0FycmF5aXNoKG9iaikge1xuXHRpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiBvYmogaW5zdGFuY2VvZiBBcnJheSB8fCBBcnJheS5pc0FycmF5KG9iaikgfHxcblx0XHQob2JqLmxlbmd0aCA+PSAwICYmIChvYmouc3BsaWNlIGluc3RhbmNlb2YgRnVuY3Rpb24gfHxcblx0XHRcdChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgKG9iai5sZW5ndGggLSAxKSkgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT09ICdTdHJpbmcnKSkpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///171\n")},486:function(module,exports,__webpack_require__){eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.21';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function',\n      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading whitespace. */\n  var reTrimStart = /^\\s+/;\n\n  /** Used to match a single whitespace character. */\n  var reWhitespace = /\\s/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /**\n   * Used to validate the `validate` option in `_.template` variable.\n   *\n   * Forbids characters which could potentially change the meaning of the function argument definition:\n   * - \"(),\" (modification of function parameters)\n   * - \"=\" (default value)\n   * - \"[]{}\" (destructuring of function parameters)\n   * - \"/\" (beginning of a comment)\n   * - whitespace\n   */\n  var reForbiddenIdentifierChars = /[()=,{}\\[\\]\\/\\s]/;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports =  true && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.trim`.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} Returns the trimmed string.\n   */\n  function baseTrim(string) {\n    return string\n      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n      : string;\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */\n  function trimmedEndIndex(string) {\n    var index = string.length;\n\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      if (iteratees.length) {\n        iteratees = arrayMap(iteratees, function(iteratee) {\n          if (isArray(iteratee)) {\n            return function(value) {\n              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n            }\n          }\n          return iteratee;\n        });\n      } else {\n        iteratees = [identity];\n      }\n\n      var index = -1;\n      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n          return object;\n        }\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      var low = 0,\n          high = array == null ? 0 : array.length;\n      if (high === 0) {\n        return 0;\n      }\n\n      value = iteratee(value);\n      var valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     *\n     * // Combining several predicates using `_.overEvery` or `_.overSome`.\n     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n     * // => objects for ['fred', 'barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 30 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = baseTrim(value);\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\n      // and escape the comment, thus injecting code that gets evaled.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/\\s/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Throw an error if a forbidden character was found in `variable`, to prevent\n      // potential command injection attacks.\n      else if (reForbiddenIdentifierChars.test(variable)) {\n        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);\n      }\n\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return baseTrim(string);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.slice(0, trimmedEndIndex(string) + 1);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     *\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (true) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else {}\n}.call(this));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///486\n")},851:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar isArrayish = __webpack_require__(171);\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3NpbXBsZS1zd2l6emxlL2luZGV4LmpzPzI1MTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheWlzaCA9IHJlcXVpcmUoJ2lzLWFycmF5aXNoJyk7XG5cbnZhciBjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG52YXIgc3dpenpsZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3dpenpsZShhcmdzKSB7XG5cdHZhciByZXN1bHRzID0gW107XG5cblx0Zm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHR2YXIgYXJnID0gYXJnc1tpXTtcblxuXHRcdGlmIChpc0FycmF5aXNoKGFyZykpIHtcblx0XHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tL2phdmFzY3JpcHQtYXJyYXktY29uY2F0LXZzLXB1c2gvOThcblx0XHRcdHJlc3VsdHMgPSBjb25jYXQuY2FsbChyZXN1bHRzLCBzbGljZS5jYWxsKGFyZykpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHRzLnB1c2goYXJnKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbnN3aXp6bGUud3JhcCA9IGZ1bmN0aW9uIChmbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBmbihzd2l6emxlKGFyZ3VtZW50cykpO1xuXHR9O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///851\n")},247:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\nconst HookCodeFactory = __webpack_require__(275);\n\nclass AsyncParallelBailHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, onDone }) {\n\t\tlet code = "";\n\t\tcode += `var _results = new Array(${this.options.taps.length});\\n`;\n\t\tcode += "var _checkDone = function() {\\n";\n\t\tcode += "for(var i = 0; i < _results.length; i++) {\\n";\n\t\tcode += "var item = _results[i];\\n";\n\t\tcode += "if(item === undefined) return false;\\n";\n\t\tcode += "if(item.result !== undefined) {\\n";\n\t\tcode += onResult("item.result");\n\t\tcode += "return true;\\n";\n\t\tcode += "}\\n";\n\t\tcode += "if(item.error) {\\n";\n\t\tcode += onError("item.error");\n\t\tcode += "return true;\\n";\n\t\tcode += "}\\n";\n\t\tcode += "}\\n";\n\t\tcode += "return false;\\n";\n\t\tcode += "}\\n";\n\t\tcode += this.callTapsParallel({\n\t\t\tonError: (i, err, done, doneBreak) => {\n\t\t\t\tlet code = "";\n\t\t\t\tcode += `if(${i} < _results.length && ((_results.length = ${i +\n\t\t\t\t\t1}), (_results[${i}] = { error: ${err} }), _checkDone())) {\\n`;\n\t\t\t\tcode += doneBreak(true);\n\t\t\t\tcode += "} else {\\n";\n\t\t\t\tcode += done();\n\t\t\t\tcode += "}\\n";\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonResult: (i, result, done, doneBreak) => {\n\t\t\t\tlet code = "";\n\t\t\t\tcode += `if(${i} < _results.length && (${result} !== undefined && (_results.length = ${i +\n\t\t\t\t\t1}), (_results[${i}] = { result: ${result} }), _checkDone())) {\\n`;\n\t\t\t\tcode += doneBreak(true);\n\t\t\t\tcode += "} else {\\n";\n\t\t\t\tcode += done();\n\t\t\t\tcode += "}\\n";\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonTap: (i, run, done, doneBreak) => {\n\t\t\t\tlet code = "";\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tcode += `if(${i} >= _results.length) {\\n`;\n\t\t\t\t\tcode += done();\n\t\t\t\t\tcode += "} else {\\n";\n\t\t\t\t}\n\t\t\t\tcode += run();\n\t\t\t\tif (i > 0) code += "}\\n";\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonDone\n\t\t});\n\t\treturn code;\n\t}\n}\n\nconst factory = new AsyncParallelBailHookCodeFactory();\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction AsyncParallelBailHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = AsyncParallelBailHook;\n\thook.compile = COMPILE;\n\thook._call = undefined;\n\thook.call = undefined;\n\treturn hook;\n}\n\nAsyncParallelBailHook.prototype = null;\n\nmodule.exports = AsyncParallelBailHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL0FzeW5jUGFyYWxsZWxCYWlsSG9vay5qcz9jODhmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgSG9vayA9IHJlcXVpcmUoXCIuL0hvb2tcIik7XG5jb25zdCBIb29rQ29kZUZhY3RvcnkgPSByZXF1aXJlKFwiLi9Ib29rQ29kZUZhY3RvcnlcIik7XG5cbmNsYXNzIEFzeW5jUGFyYWxsZWxCYWlsSG9va0NvZGVGYWN0b3J5IGV4dGVuZHMgSG9va0NvZGVGYWN0b3J5IHtcblx0Y29udGVudCh7IG9uRXJyb3IsIG9uUmVzdWx0LCBvbkRvbmUgfSkge1xuXHRcdGxldCBjb2RlID0gXCJcIjtcblx0XHRjb2RlICs9IGB2YXIgX3Jlc3VsdHMgPSBuZXcgQXJyYXkoJHt0aGlzLm9wdGlvbnMudGFwcy5sZW5ndGh9KTtcXG5gO1xuXHRcdGNvZGUgKz0gXCJ2YXIgX2NoZWNrRG9uZSA9IGZ1bmN0aW9uKCkge1xcblwiO1xuXHRcdGNvZGUgKz0gXCJmb3IodmFyIGkgPSAwOyBpIDwgX3Jlc3VsdHMubGVuZ3RoOyBpKyspIHtcXG5cIjtcblx0XHRjb2RlICs9IFwidmFyIGl0ZW0gPSBfcmVzdWx0c1tpXTtcXG5cIjtcblx0XHRjb2RlICs9IFwiaWYoaXRlbSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XFxuXCI7XG5cdFx0Y29kZSArPSBcImlmKGl0ZW0ucmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcXG5cIjtcblx0XHRjb2RlICs9IG9uUmVzdWx0KFwiaXRlbS5yZXN1bHRcIik7XG5cdFx0Y29kZSArPSBcInJldHVybiB0cnVlO1xcblwiO1xuXHRcdGNvZGUgKz0gXCJ9XFxuXCI7XG5cdFx0Y29kZSArPSBcImlmKGl0ZW0uZXJyb3IpIHtcXG5cIjtcblx0XHRjb2RlICs9IG9uRXJyb3IoXCJpdGVtLmVycm9yXCIpO1xuXHRcdGNvZGUgKz0gXCJyZXR1cm4gdHJ1ZTtcXG5cIjtcblx0XHRjb2RlICs9IFwifVxcblwiO1xuXHRcdGNvZGUgKz0gXCJ9XFxuXCI7XG5cdFx0Y29kZSArPSBcInJldHVybiBmYWxzZTtcXG5cIjtcblx0XHRjb2RlICs9IFwifVxcblwiO1xuXHRcdGNvZGUgKz0gdGhpcy5jYWxsVGFwc1BhcmFsbGVsKHtcblx0XHRcdG9uRXJyb3I6IChpLCBlcnIsIGRvbmUsIGRvbmVCcmVhaykgPT4ge1xuXHRcdFx0XHRsZXQgY29kZSA9IFwiXCI7XG5cdFx0XHRcdGNvZGUgKz0gYGlmKCR7aX0gPCBfcmVzdWx0cy5sZW5ndGggJiYgKChfcmVzdWx0cy5sZW5ndGggPSAke2kgK1xuXHRcdFx0XHRcdDF9KSwgKF9yZXN1bHRzWyR7aX1dID0geyBlcnJvcjogJHtlcnJ9IH0pLCBfY2hlY2tEb25lKCkpKSB7XFxuYDtcblx0XHRcdFx0Y29kZSArPSBkb25lQnJlYWsodHJ1ZSk7XG5cdFx0XHRcdGNvZGUgKz0gXCJ9IGVsc2Uge1xcblwiO1xuXHRcdFx0XHRjb2RlICs9IGRvbmUoKTtcblx0XHRcdFx0Y29kZSArPSBcIn1cXG5cIjtcblx0XHRcdFx0cmV0dXJuIGNvZGU7XG5cdFx0XHR9LFxuXHRcdFx0b25SZXN1bHQ6IChpLCByZXN1bHQsIGRvbmUsIGRvbmVCcmVhaykgPT4ge1xuXHRcdFx0XHRsZXQgY29kZSA9IFwiXCI7XG5cdFx0XHRcdGNvZGUgKz0gYGlmKCR7aX0gPCBfcmVzdWx0cy5sZW5ndGggJiYgKCR7cmVzdWx0fSAhPT0gdW5kZWZpbmVkICYmIChfcmVzdWx0cy5sZW5ndGggPSAke2kgK1xuXHRcdFx0XHRcdDF9KSwgKF9yZXN1bHRzWyR7aX1dID0geyByZXN1bHQ6ICR7cmVzdWx0fSB9KSwgX2NoZWNrRG9uZSgpKSkge1xcbmA7XG5cdFx0XHRcdGNvZGUgKz0gZG9uZUJyZWFrKHRydWUpO1xuXHRcdFx0XHRjb2RlICs9IFwifSBlbHNlIHtcXG5cIjtcblx0XHRcdFx0Y29kZSArPSBkb25lKCk7XG5cdFx0XHRcdGNvZGUgKz0gXCJ9XFxuXCI7XG5cdFx0XHRcdHJldHVybiBjb2RlO1xuXHRcdFx0fSxcblx0XHRcdG9uVGFwOiAoaSwgcnVuLCBkb25lLCBkb25lQnJlYWspID0+IHtcblx0XHRcdFx0bGV0IGNvZGUgPSBcIlwiO1xuXHRcdFx0XHRpZiAoaSA+IDApIHtcblx0XHRcdFx0XHRjb2RlICs9IGBpZigke2l9ID49IF9yZXN1bHRzLmxlbmd0aCkge1xcbmA7XG5cdFx0XHRcdFx0Y29kZSArPSBkb25lKCk7XG5cdFx0XHRcdFx0Y29kZSArPSBcIn0gZWxzZSB7XFxuXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29kZSArPSBydW4oKTtcblx0XHRcdFx0aWYgKGkgPiAwKSBjb2RlICs9IFwifVxcblwiO1xuXHRcdFx0XHRyZXR1cm4gY29kZTtcblx0XHRcdH0sXG5cdFx0XHRvbkRvbmVcblx0XHR9KTtcblx0XHRyZXR1cm4gY29kZTtcblx0fVxufVxuXG5jb25zdCBmYWN0b3J5ID0gbmV3IEFzeW5jUGFyYWxsZWxCYWlsSG9va0NvZGVGYWN0b3J5KCk7XG5cbmNvbnN0IENPTVBJTEUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdGZhY3Rvcnkuc2V0dXAodGhpcywgb3B0aW9ucyk7XG5cdHJldHVybiBmYWN0b3J5LmNyZWF0ZShvcHRpb25zKTtcbn07XG5cbmZ1bmN0aW9uIEFzeW5jUGFyYWxsZWxCYWlsSG9vayhhcmdzID0gW10sIG5hbWUgPSB1bmRlZmluZWQpIHtcblx0Y29uc3QgaG9vayA9IG5ldyBIb29rKGFyZ3MsIG5hbWUpO1xuXHRob29rLmNvbnN0cnVjdG9yID0gQXN5bmNQYXJhbGxlbEJhaWxIb29rO1xuXHRob29rLmNvbXBpbGUgPSBDT01QSUxFO1xuXHRob29rLl9jYWxsID0gdW5kZWZpbmVkO1xuXHRob29rLmNhbGwgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob29rO1xufVxuXG5Bc3luY1BhcmFsbGVsQmFpbEhvb2sucHJvdG90eXBlID0gbnVsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBBc3luY1BhcmFsbGVsQmFpbEhvb2s7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///247\n')},714:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\nconst HookCodeFactory = __webpack_require__(275);\n\nclass AsyncParallelHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone }) {\n\t\treturn this.callTapsParallel({\n\t\t\tonError: (i, err, done, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonDone\n\t\t});\n\t}\n}\n\nconst factory = new AsyncParallelHookCodeFactory();\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction AsyncParallelHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = AsyncParallelHook;\n\thook.compile = COMPILE;\n\thook._call = undefined;\n\thook.call = undefined;\n\treturn hook;\n}\n\nAsyncParallelHook.prototype = null;\n\nmodule.exports = AsyncParallelHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL0FzeW5jUGFyYWxsZWxIb29rLmpzPzg5MzUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBIb29rID0gcmVxdWlyZShcIi4vSG9va1wiKTtcbmNvbnN0IEhvb2tDb2RlRmFjdG9yeSA9IHJlcXVpcmUoXCIuL0hvb2tDb2RlRmFjdG9yeVwiKTtcblxuY2xhc3MgQXN5bmNQYXJhbGxlbEhvb2tDb2RlRmFjdG9yeSBleHRlbmRzIEhvb2tDb2RlRmFjdG9yeSB7XG5cdGNvbnRlbnQoeyBvbkVycm9yLCBvbkRvbmUgfSkge1xuXHRcdHJldHVybiB0aGlzLmNhbGxUYXBzUGFyYWxsZWwoe1xuXHRcdFx0b25FcnJvcjogKGksIGVyciwgZG9uZSwgZG9uZUJyZWFrKSA9PiBvbkVycm9yKGVycikgKyBkb25lQnJlYWsodHJ1ZSksXG5cdFx0XHRvbkRvbmVcblx0XHR9KTtcblx0fVxufVxuXG5jb25zdCBmYWN0b3J5ID0gbmV3IEFzeW5jUGFyYWxsZWxIb29rQ29kZUZhY3RvcnkoKTtcblxuY29uc3QgQ09NUElMRSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ZmFjdG9yeS5zZXR1cCh0aGlzLCBvcHRpb25zKTtcblx0cmV0dXJuIGZhY3RvcnkuY3JlYXRlKG9wdGlvbnMpO1xufTtcblxuZnVuY3Rpb24gQXN5bmNQYXJhbGxlbEhvb2soYXJncyA9IFtdLCBuYW1lID0gdW5kZWZpbmVkKSB7XG5cdGNvbnN0IGhvb2sgPSBuZXcgSG9vayhhcmdzLCBuYW1lKTtcblx0aG9vay5jb25zdHJ1Y3RvciA9IEFzeW5jUGFyYWxsZWxIb29rO1xuXHRob29rLmNvbXBpbGUgPSBDT01QSUxFO1xuXHRob29rLl9jYWxsID0gdW5kZWZpbmVkO1xuXHRob29rLmNhbGwgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob29rO1xufVxuXG5Bc3luY1BhcmFsbGVsSG9vay5wcm90b3R5cGUgPSBudWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFzeW5jUGFyYWxsZWxIb29rO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///714\n")},293:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\nconst HookCodeFactory = __webpack_require__(275);\n\nclass AsyncSeriesBailHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, resultReturns, onDone }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonResult: (i, result, next) =>\n\t\t\t\t`if(${result} !== undefined) {\\n${onResult(\n\t\t\t\t\tresult\n\t\t\t\t)}\\n} else {\\n${next()}}\\n`,\n\t\t\tresultReturns,\n\t\t\tonDone\n\t\t});\n\t}\n}\n\nconst factory = new AsyncSeriesBailHookCodeFactory();\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction AsyncSeriesBailHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = AsyncSeriesBailHook;\n\thook.compile = COMPILE;\n\thook._call = undefined;\n\thook.call = undefined;\n\treturn hook;\n}\n\nAsyncSeriesBailHook.prototype = null;\n\nmodule.exports = AsyncSeriesBailHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL0FzeW5jU2VyaWVzQmFpbEhvb2suanM/YjM0OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IEhvb2sgPSByZXF1aXJlKFwiLi9Ib29rXCIpO1xuY29uc3QgSG9va0NvZGVGYWN0b3J5ID0gcmVxdWlyZShcIi4vSG9va0NvZGVGYWN0b3J5XCIpO1xuXG5jbGFzcyBBc3luY1Nlcmllc0JhaWxIb29rQ29kZUZhY3RvcnkgZXh0ZW5kcyBIb29rQ29kZUZhY3Rvcnkge1xuXHRjb250ZW50KHsgb25FcnJvciwgb25SZXN1bHQsIHJlc3VsdFJldHVybnMsIG9uRG9uZSB9KSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FsbFRhcHNTZXJpZXMoe1xuXHRcdFx0b25FcnJvcjogKGksIGVyciwgbmV4dCwgZG9uZUJyZWFrKSA9PiBvbkVycm9yKGVycikgKyBkb25lQnJlYWsodHJ1ZSksXG5cdFx0XHRvblJlc3VsdDogKGksIHJlc3VsdCwgbmV4dCkgPT5cblx0XHRcdFx0YGlmKCR7cmVzdWx0fSAhPT0gdW5kZWZpbmVkKSB7XFxuJHtvblJlc3VsdChcblx0XHRcdFx0XHRyZXN1bHRcblx0XHRcdFx0KX1cXG59IGVsc2Uge1xcbiR7bmV4dCgpfX1cXG5gLFxuXHRcdFx0cmVzdWx0UmV0dXJucyxcblx0XHRcdG9uRG9uZVxuXHRcdH0pO1xuXHR9XG59XG5cbmNvbnN0IGZhY3RvcnkgPSBuZXcgQXN5bmNTZXJpZXNCYWlsSG9va0NvZGVGYWN0b3J5KCk7XG5cbmNvbnN0IENPTVBJTEUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdGZhY3Rvcnkuc2V0dXAodGhpcywgb3B0aW9ucyk7XG5cdHJldHVybiBmYWN0b3J5LmNyZWF0ZShvcHRpb25zKTtcbn07XG5cbmZ1bmN0aW9uIEFzeW5jU2VyaWVzQmFpbEhvb2soYXJncyA9IFtdLCBuYW1lID0gdW5kZWZpbmVkKSB7XG5cdGNvbnN0IGhvb2sgPSBuZXcgSG9vayhhcmdzLCBuYW1lKTtcblx0aG9vay5jb25zdHJ1Y3RvciA9IEFzeW5jU2VyaWVzQmFpbEhvb2s7XG5cdGhvb2suY29tcGlsZSA9IENPTVBJTEU7XG5cdGhvb2suX2NhbGwgPSB1bmRlZmluZWQ7XG5cdGhvb2suY2FsbCA9IHVuZGVmaW5lZDtcblx0cmV0dXJuIGhvb2s7XG59XG5cbkFzeW5jU2VyaWVzQmFpbEhvb2sucHJvdG90eXBlID0gbnVsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBBc3luY1Nlcmllc0JhaWxIb29rO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///293\n")},617:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\nconst HookCodeFactory = __webpack_require__(275);\n\nclass AsyncSeriesHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonDone\n\t\t});\n\t}\n}\n\nconst factory = new AsyncSeriesHookCodeFactory();\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction AsyncSeriesHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = AsyncSeriesHook;\n\thook.compile = COMPILE;\n\thook._call = undefined;\n\thook.call = undefined;\n\treturn hook;\n}\n\nAsyncSeriesHook.prototype = null;\n\nmodule.exports = AsyncSeriesHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL0FzeW5jU2VyaWVzSG9vay5qcz9mNjJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgSG9vayA9IHJlcXVpcmUoXCIuL0hvb2tcIik7XG5jb25zdCBIb29rQ29kZUZhY3RvcnkgPSByZXF1aXJlKFwiLi9Ib29rQ29kZUZhY3RvcnlcIik7XG5cbmNsYXNzIEFzeW5jU2VyaWVzSG9va0NvZGVGYWN0b3J5IGV4dGVuZHMgSG9va0NvZGVGYWN0b3J5IHtcblx0Y29udGVudCh7IG9uRXJyb3IsIG9uRG9uZSB9KSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FsbFRhcHNTZXJpZXMoe1xuXHRcdFx0b25FcnJvcjogKGksIGVyciwgbmV4dCwgZG9uZUJyZWFrKSA9PiBvbkVycm9yKGVycikgKyBkb25lQnJlYWsodHJ1ZSksXG5cdFx0XHRvbkRvbmVcblx0XHR9KTtcblx0fVxufVxuXG5jb25zdCBmYWN0b3J5ID0gbmV3IEFzeW5jU2VyaWVzSG9va0NvZGVGYWN0b3J5KCk7XG5cbmNvbnN0IENPTVBJTEUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdGZhY3Rvcnkuc2V0dXAodGhpcywgb3B0aW9ucyk7XG5cdHJldHVybiBmYWN0b3J5LmNyZWF0ZShvcHRpb25zKTtcbn07XG5cbmZ1bmN0aW9uIEFzeW5jU2VyaWVzSG9vayhhcmdzID0gW10sIG5hbWUgPSB1bmRlZmluZWQpIHtcblx0Y29uc3QgaG9vayA9IG5ldyBIb29rKGFyZ3MsIG5hbWUpO1xuXHRob29rLmNvbnN0cnVjdG9yID0gQXN5bmNTZXJpZXNIb29rO1xuXHRob29rLmNvbXBpbGUgPSBDT01QSUxFO1xuXHRob29rLl9jYWxsID0gdW5kZWZpbmVkO1xuXHRob29rLmNhbGwgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob29rO1xufVxuXG5Bc3luY1Nlcmllc0hvb2sucHJvdG90eXBlID0gbnVsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBBc3luY1Nlcmllc0hvb2s7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///617\n")},996:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\nconst HookCodeFactory = __webpack_require__(275);\n\nclass AsyncSeriesLoopHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone }) {\n\t\treturn this.callTapsLooping({\n\t\t\tonError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonDone\n\t\t});\n\t}\n}\n\nconst factory = new AsyncSeriesLoopHookCodeFactory();\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction AsyncSeriesLoopHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = AsyncSeriesLoopHook;\n\thook.compile = COMPILE;\n\thook._call = undefined;\n\thook.call = undefined;\n\treturn hook;\n}\n\nAsyncSeriesLoopHook.prototype = null;\n\nmodule.exports = AsyncSeriesLoopHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL0FzeW5jU2VyaWVzTG9vcEhvb2suanM/N2NmNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IEhvb2sgPSByZXF1aXJlKFwiLi9Ib29rXCIpO1xuY29uc3QgSG9va0NvZGVGYWN0b3J5ID0gcmVxdWlyZShcIi4vSG9va0NvZGVGYWN0b3J5XCIpO1xuXG5jbGFzcyBBc3luY1Nlcmllc0xvb3BIb29rQ29kZUZhY3RvcnkgZXh0ZW5kcyBIb29rQ29kZUZhY3Rvcnkge1xuXHRjb250ZW50KHsgb25FcnJvciwgb25Eb25lIH0pIHtcblx0XHRyZXR1cm4gdGhpcy5jYWxsVGFwc0xvb3Bpbmcoe1xuXHRcdFx0b25FcnJvcjogKGksIGVyciwgbmV4dCwgZG9uZUJyZWFrKSA9PiBvbkVycm9yKGVycikgKyBkb25lQnJlYWsodHJ1ZSksXG5cdFx0XHRvbkRvbmVcblx0XHR9KTtcblx0fVxufVxuXG5jb25zdCBmYWN0b3J5ID0gbmV3IEFzeW5jU2VyaWVzTG9vcEhvb2tDb2RlRmFjdG9yeSgpO1xuXG5jb25zdCBDT01QSUxFID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXHRmYWN0b3J5LnNldHVwKHRoaXMsIG9wdGlvbnMpO1xuXHRyZXR1cm4gZmFjdG9yeS5jcmVhdGUob3B0aW9ucyk7XG59O1xuXG5mdW5jdGlvbiBBc3luY1Nlcmllc0xvb3BIb29rKGFyZ3MgPSBbXSwgbmFtZSA9IHVuZGVmaW5lZCkge1xuXHRjb25zdCBob29rID0gbmV3IEhvb2soYXJncywgbmFtZSk7XG5cdGhvb2suY29uc3RydWN0b3IgPSBBc3luY1Nlcmllc0xvb3BIb29rO1xuXHRob29rLmNvbXBpbGUgPSBDT01QSUxFO1xuXHRob29rLl9jYWxsID0gdW5kZWZpbmVkO1xuXHRob29rLmNhbGwgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob29rO1xufVxuXG5Bc3luY1Nlcmllc0xvb3BIb29rLnByb3RvdHlwZSA9IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gQXN5bmNTZXJpZXNMb29wSG9vaztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///996\n")},178:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\nconst HookCodeFactory = __webpack_require__(275);\n\nclass AsyncSeriesWaterfallHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, onDone }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonResult: (i, result, next) => {\n\t\t\t\tlet code = "";\n\t\t\t\tcode += `if(${result} !== undefined) {\\n`;\n\t\t\t\tcode += `${this._args[0]} = ${result};\\n`;\n\t\t\t\tcode += `}\\n`;\n\t\t\t\tcode += next();\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonDone: () => onResult(this._args[0])\n\t\t});\n\t}\n}\n\nconst factory = new AsyncSeriesWaterfallHookCodeFactory();\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction AsyncSeriesWaterfallHook(args = [], name = undefined) {\n\tif (args.length < 1)\n\t\tthrow new Error("Waterfall hooks must have at least one argument");\n\tconst hook = new Hook(args, name);\n\thook.constructor = AsyncSeriesWaterfallHook;\n\thook.compile = COMPILE;\n\thook._call = undefined;\n\thook.call = undefined;\n\treturn hook;\n}\n\nAsyncSeriesWaterfallHook.prototype = null;\n\nmodule.exports = AsyncSeriesWaterfallHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL0FzeW5jU2VyaWVzV2F0ZXJmYWxsSG9vay5qcz85ZmYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgSG9vayA9IHJlcXVpcmUoXCIuL0hvb2tcIik7XG5jb25zdCBIb29rQ29kZUZhY3RvcnkgPSByZXF1aXJlKFwiLi9Ib29rQ29kZUZhY3RvcnlcIik7XG5cbmNsYXNzIEFzeW5jU2VyaWVzV2F0ZXJmYWxsSG9va0NvZGVGYWN0b3J5IGV4dGVuZHMgSG9va0NvZGVGYWN0b3J5IHtcblx0Y29udGVudCh7IG9uRXJyb3IsIG9uUmVzdWx0LCBvbkRvbmUgfSkge1xuXHRcdHJldHVybiB0aGlzLmNhbGxUYXBzU2VyaWVzKHtcblx0XHRcdG9uRXJyb3I6IChpLCBlcnIsIG5leHQsIGRvbmVCcmVhaykgPT4gb25FcnJvcihlcnIpICsgZG9uZUJyZWFrKHRydWUpLFxuXHRcdFx0b25SZXN1bHQ6IChpLCByZXN1bHQsIG5leHQpID0+IHtcblx0XHRcdFx0bGV0IGNvZGUgPSBcIlwiO1xuXHRcdFx0XHRjb2RlICs9IGBpZigke3Jlc3VsdH0gIT09IHVuZGVmaW5lZCkge1xcbmA7XG5cdFx0XHRcdGNvZGUgKz0gYCR7dGhpcy5fYXJnc1swXX0gPSAke3Jlc3VsdH07XFxuYDtcblx0XHRcdFx0Y29kZSArPSBgfVxcbmA7XG5cdFx0XHRcdGNvZGUgKz0gbmV4dCgpO1xuXHRcdFx0XHRyZXR1cm4gY29kZTtcblx0XHRcdH0sXG5cdFx0XHRvbkRvbmU6ICgpID0+IG9uUmVzdWx0KHRoaXMuX2FyZ3NbMF0pXG5cdFx0fSk7XG5cdH1cbn1cblxuY29uc3QgZmFjdG9yeSA9IG5ldyBBc3luY1Nlcmllc1dhdGVyZmFsbEhvb2tDb2RlRmFjdG9yeSgpO1xuXG5jb25zdCBDT01QSUxFID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXHRmYWN0b3J5LnNldHVwKHRoaXMsIG9wdGlvbnMpO1xuXHRyZXR1cm4gZmFjdG9yeS5jcmVhdGUob3B0aW9ucyk7XG59O1xuXG5mdW5jdGlvbiBBc3luY1Nlcmllc1dhdGVyZmFsbEhvb2soYXJncyA9IFtdLCBuYW1lID0gdW5kZWZpbmVkKSB7XG5cdGlmIChhcmdzLmxlbmd0aCA8IDEpXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiV2F0ZXJmYWxsIGhvb2tzIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgYXJndW1lbnRcIik7XG5cdGNvbnN0IGhvb2sgPSBuZXcgSG9vayhhcmdzLCBuYW1lKTtcblx0aG9vay5jb25zdHJ1Y3RvciA9IEFzeW5jU2VyaWVzV2F0ZXJmYWxsSG9vaztcblx0aG9vay5jb21waWxlID0gQ09NUElMRTtcblx0aG9vay5fY2FsbCA9IHVuZGVmaW5lZDtcblx0aG9vay5jYWxsID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gaG9vaztcbn1cblxuQXN5bmNTZXJpZXNXYXRlcmZhbGxIb29rLnByb3RvdHlwZSA9IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gQXN5bmNTZXJpZXNXYXRlcmZhbGxIb29rO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///178\n')},534:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst util = __webpack_require__(517);\n\nconst deprecateContext = util.deprecate(() => {},\n"Hook.context is deprecated and will be removed");\n\nconst CALL_DELEGATE = function(...args) {\n\tthis.call = this._createCall("sync");\n\treturn this.call(...args);\n};\nconst CALL_ASYNC_DELEGATE = function(...args) {\n\tthis.callAsync = this._createCall("async");\n\treturn this.callAsync(...args);\n};\nconst PROMISE_DELEGATE = function(...args) {\n\tthis.promise = this._createCall("promise");\n\treturn this.promise(...args);\n};\n\nclass Hook {\n\tconstructor(args = [], name = undefined) {\n\t\tthis._args = args;\n\t\tthis.name = name;\n\t\tthis.taps = [];\n\t\tthis.interceptors = [];\n\t\tthis._call = CALL_DELEGATE;\n\t\tthis.call = CALL_DELEGATE;\n\t\tthis._callAsync = CALL_ASYNC_DELEGATE;\n\t\tthis.callAsync = CALL_ASYNC_DELEGATE;\n\t\tthis._promise = PROMISE_DELEGATE;\n\t\tthis.promise = PROMISE_DELEGATE;\n\t\tthis._x = undefined;\n\n\t\tthis.compile = this.compile;\n\t\tthis.tap = this.tap;\n\t\tthis.tapAsync = this.tapAsync;\n\t\tthis.tapPromise = this.tapPromise;\n\t}\n\n\tcompile(options) {\n\t\tthrow new Error("Abstract: should be overridden");\n\t}\n\n\t_createCall(type) {\n\t\treturn this.compile({\n\t\t\ttaps: this.taps,\n\t\t\tinterceptors: this.interceptors,\n\t\t\targs: this._args,\n\t\t\ttype: type\n\t\t});\n\t}\n\n\t_tap(type, options, fn) {\n\t\tif (typeof options === "string") {\n\t\t\toptions = {\n\t\t\t\tname: options.trim()\n\t\t\t};\n\t\t} else if (typeof options !== "object" || options === null) {\n\t\t\tthrow new Error("Invalid tap options");\n\t\t}\n\t\tif (typeof options.name !== "string" || options.name === "") {\n\t\t\tthrow new Error("Missing name for tap");\n\t\t}\n\t\tif (typeof options.context !== "undefined") {\n\t\t\tdeprecateContext();\n\t\t}\n\t\toptions = Object.assign({ type, fn }, options);\n\t\toptions = this._runRegisterInterceptors(options);\n\t\tthis._insert(options);\n\t}\n\n\ttap(options, fn) {\n\t\tthis._tap("sync", options, fn);\n\t}\n\n\ttapAsync(options, fn) {\n\t\tthis._tap("async", options, fn);\n\t}\n\n\ttapPromise(options, fn) {\n\t\tthis._tap("promise", options, fn);\n\t}\n\n\t_runRegisterInterceptors(options) {\n\t\tfor (const interceptor of this.interceptors) {\n\t\t\tif (interceptor.register) {\n\t\t\t\tconst newOptions = interceptor.register(options);\n\t\t\t\tif (newOptions !== undefined) {\n\t\t\t\t\toptions = newOptions;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn options;\n\t}\n\n\twithOptions(options) {\n\t\tconst mergeOptions = opt =>\n\t\t\tObject.assign({}, options, typeof opt === "string" ? { name: opt } : opt);\n\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\ttap: (opt, fn) => this.tap(mergeOptions(opt), fn),\n\t\t\ttapAsync: (opt, fn) => this.tapAsync(mergeOptions(opt), fn),\n\t\t\ttapPromise: (opt, fn) => this.tapPromise(mergeOptions(opt), fn),\n\t\t\tintercept: interceptor => this.intercept(interceptor),\n\t\t\tisUsed: () => this.isUsed(),\n\t\t\twithOptions: opt => this.withOptions(mergeOptions(opt))\n\t\t};\n\t}\n\n\tisUsed() {\n\t\treturn this.taps.length > 0 || this.interceptors.length > 0;\n\t}\n\n\tintercept(interceptor) {\n\t\tthis._resetCompilation();\n\t\tthis.interceptors.push(Object.assign({}, interceptor));\n\t\tif (interceptor.register) {\n\t\t\tfor (let i = 0; i < this.taps.length; i++) {\n\t\t\t\tthis.taps[i] = interceptor.register(this.taps[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\t_resetCompilation() {\n\t\tthis.call = this._call;\n\t\tthis.callAsync = this._callAsync;\n\t\tthis.promise = this._promise;\n\t}\n\n\t_insert(item) {\n\t\tthis._resetCompilation();\n\t\tlet before;\n\t\tif (typeof item.before === "string") {\n\t\t\tbefore = new Set([item.before]);\n\t\t} else if (Array.isArray(item.before)) {\n\t\t\tbefore = new Set(item.before);\n\t\t}\n\t\tlet stage = 0;\n\t\tif (typeof item.stage === "number") {\n\t\t\tstage = item.stage;\n\t\t}\n\t\tlet i = this.taps.length;\n\t\twhile (i > 0) {\n\t\t\ti--;\n\t\t\tconst x = this.taps[i];\n\t\t\tthis.taps[i + 1] = x;\n\t\t\tconst xStage = x.stage || 0;\n\t\t\tif (before) {\n\t\t\t\tif (before.has(x.name)) {\n\t\t\t\t\tbefore.delete(x.name);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (before.size > 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (xStage > stage) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ti++;\n\t\t\tbreak;\n\t\t}\n\t\tthis.taps[i] = item;\n\t}\n}\n\nObject.setPrototypeOf(Hook.prototype, null);\n\nmodule.exports = Hook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL0hvb2suanM/Njc0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcblxuY29uc3QgZGVwcmVjYXRlQ29udGV4dCA9IHV0aWwuZGVwcmVjYXRlKCgpID0+IHt9LFxuXCJIb29rLmNvbnRleHQgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkXCIpO1xuXG5jb25zdCBDQUxMX0RFTEVHQVRFID0gZnVuY3Rpb24oLi4uYXJncykge1xuXHR0aGlzLmNhbGwgPSB0aGlzLl9jcmVhdGVDYWxsKFwic3luY1wiKTtcblx0cmV0dXJuIHRoaXMuY2FsbCguLi5hcmdzKTtcbn07XG5jb25zdCBDQUxMX0FTWU5DX0RFTEVHQVRFID0gZnVuY3Rpb24oLi4uYXJncykge1xuXHR0aGlzLmNhbGxBc3luYyA9IHRoaXMuX2NyZWF0ZUNhbGwoXCJhc3luY1wiKTtcblx0cmV0dXJuIHRoaXMuY2FsbEFzeW5jKC4uLmFyZ3MpO1xufTtcbmNvbnN0IFBST01JU0VfREVMRUdBVEUgPSBmdW5jdGlvbiguLi5hcmdzKSB7XG5cdHRoaXMucHJvbWlzZSA9IHRoaXMuX2NyZWF0ZUNhbGwoXCJwcm9taXNlXCIpO1xuXHRyZXR1cm4gdGhpcy5wcm9taXNlKC4uLmFyZ3MpO1xufTtcblxuY2xhc3MgSG9vayB7XG5cdGNvbnN0cnVjdG9yKGFyZ3MgPSBbXSwgbmFtZSA9IHVuZGVmaW5lZCkge1xuXHRcdHRoaXMuX2FyZ3MgPSBhcmdzO1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdFx0dGhpcy50YXBzID0gW107XG5cdFx0dGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcblx0XHR0aGlzLl9jYWxsID0gQ0FMTF9ERUxFR0FURTtcblx0XHR0aGlzLmNhbGwgPSBDQUxMX0RFTEVHQVRFO1xuXHRcdHRoaXMuX2NhbGxBc3luYyA9IENBTExfQVNZTkNfREVMRUdBVEU7XG5cdFx0dGhpcy5jYWxsQXN5bmMgPSBDQUxMX0FTWU5DX0RFTEVHQVRFO1xuXHRcdHRoaXMuX3Byb21pc2UgPSBQUk9NSVNFX0RFTEVHQVRFO1xuXHRcdHRoaXMucHJvbWlzZSA9IFBST01JU0VfREVMRUdBVEU7XG5cdFx0dGhpcy5feCA9IHVuZGVmaW5lZDtcblxuXHRcdHRoaXMuY29tcGlsZSA9IHRoaXMuY29tcGlsZTtcblx0XHR0aGlzLnRhcCA9IHRoaXMudGFwO1xuXHRcdHRoaXMudGFwQXN5bmMgPSB0aGlzLnRhcEFzeW5jO1xuXHRcdHRoaXMudGFwUHJvbWlzZSA9IHRoaXMudGFwUHJvbWlzZTtcblx0fVxuXG5cdGNvbXBpbGUob3B0aW9ucykge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkFic3RyYWN0OiBzaG91bGQgYmUgb3ZlcnJpZGRlblwiKTtcblx0fVxuXG5cdF9jcmVhdGVDYWxsKHR5cGUpIHtcblx0XHRyZXR1cm4gdGhpcy5jb21waWxlKHtcblx0XHRcdHRhcHM6IHRoaXMudGFwcyxcblx0XHRcdGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG5cdFx0XHRhcmdzOiB0aGlzLl9hcmdzLFxuXHRcdFx0dHlwZTogdHlwZVxuXHRcdH0pO1xuXHR9XG5cblx0X3RhcCh0eXBlLCBvcHRpb25zLCBmbikge1xuXHRcdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0b3B0aW9ucyA9IHtcblx0XHRcdFx0bmFtZTogb3B0aW9ucy50cmltKClcblx0XHRcdH07XG5cdFx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gXCJvYmplY3RcIiB8fCBvcHRpb25zID09PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHRhcCBvcHRpb25zXCIpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIG9wdGlvbnMubmFtZSAhPT0gXCJzdHJpbmdcIiB8fCBvcHRpb25zLm5hbWUgPT09IFwiXCIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgbmFtZSBmb3IgdGFwXCIpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIG9wdGlvbnMuY29udGV4dCAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0ZGVwcmVjYXRlQ29udGV4dCgpO1xuXHRcdH1cblx0XHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IHR5cGUsIGZuIH0sIG9wdGlvbnMpO1xuXHRcdG9wdGlvbnMgPSB0aGlzLl9ydW5SZWdpc3RlckludGVyY2VwdG9ycyhvcHRpb25zKTtcblx0XHR0aGlzLl9pbnNlcnQob3B0aW9ucyk7XG5cdH1cblxuXHR0YXAob3B0aW9ucywgZm4pIHtcblx0XHR0aGlzLl90YXAoXCJzeW5jXCIsIG9wdGlvbnMsIGZuKTtcblx0fVxuXG5cdHRhcEFzeW5jKG9wdGlvbnMsIGZuKSB7XG5cdFx0dGhpcy5fdGFwKFwiYXN5bmNcIiwgb3B0aW9ucywgZm4pO1xuXHR9XG5cblx0dGFwUHJvbWlzZShvcHRpb25zLCBmbikge1xuXHRcdHRoaXMuX3RhcChcInByb21pc2VcIiwgb3B0aW9ucywgZm4pO1xuXHR9XG5cblx0X3J1blJlZ2lzdGVySW50ZXJjZXB0b3JzKG9wdGlvbnMpIHtcblx0XHRmb3IgKGNvbnN0IGludGVyY2VwdG9yIG9mIHRoaXMuaW50ZXJjZXB0b3JzKSB7XG5cdFx0XHRpZiAoaW50ZXJjZXB0b3IucmVnaXN0ZXIpIHtcblx0XHRcdFx0Y29uc3QgbmV3T3B0aW9ucyA9IGludGVyY2VwdG9yLnJlZ2lzdGVyKG9wdGlvbnMpO1xuXHRcdFx0XHRpZiAobmV3T3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0b3B0aW9ucyA9IG5ld09wdGlvbnM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG9wdGlvbnM7XG5cdH1cblxuXHR3aXRoT3B0aW9ucyhvcHRpb25zKSB7XG5cdFx0Y29uc3QgbWVyZ2VPcHRpb25zID0gb3B0ID0+XG5cdFx0XHRPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB0eXBlb2Ygb3B0ID09PSBcInN0cmluZ1wiID8geyBuYW1lOiBvcHQgfSA6IG9wdCk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bmFtZTogdGhpcy5uYW1lLFxuXHRcdFx0dGFwOiAob3B0LCBmbikgPT4gdGhpcy50YXAobWVyZ2VPcHRpb25zKG9wdCksIGZuKSxcblx0XHRcdHRhcEFzeW5jOiAob3B0LCBmbikgPT4gdGhpcy50YXBBc3luYyhtZXJnZU9wdGlvbnMob3B0KSwgZm4pLFxuXHRcdFx0dGFwUHJvbWlzZTogKG9wdCwgZm4pID0+IHRoaXMudGFwUHJvbWlzZShtZXJnZU9wdGlvbnMob3B0KSwgZm4pLFxuXHRcdFx0aW50ZXJjZXB0OiBpbnRlcmNlcHRvciA9PiB0aGlzLmludGVyY2VwdChpbnRlcmNlcHRvciksXG5cdFx0XHRpc1VzZWQ6ICgpID0+IHRoaXMuaXNVc2VkKCksXG5cdFx0XHR3aXRoT3B0aW9uczogb3B0ID0+IHRoaXMud2l0aE9wdGlvbnMobWVyZ2VPcHRpb25zKG9wdCkpXG5cdFx0fTtcblx0fVxuXG5cdGlzVXNlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy50YXBzLmxlbmd0aCA+IDAgfHwgdGhpcy5pbnRlcmNlcHRvcnMubGVuZ3RoID4gMDtcblx0fVxuXG5cdGludGVyY2VwdChpbnRlcmNlcHRvcikge1xuXHRcdHRoaXMuX3Jlc2V0Q29tcGlsYXRpb24oKTtcblx0XHR0aGlzLmludGVyY2VwdG9ycy5wdXNoKE9iamVjdC5hc3NpZ24oe30sIGludGVyY2VwdG9yKSk7XG5cdFx0aWYgKGludGVyY2VwdG9yLnJlZ2lzdGVyKSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGFwcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR0aGlzLnRhcHNbaV0gPSBpbnRlcmNlcHRvci5yZWdpc3Rlcih0aGlzLnRhcHNbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdF9yZXNldENvbXBpbGF0aW9uKCkge1xuXHRcdHRoaXMuY2FsbCA9IHRoaXMuX2NhbGw7XG5cdFx0dGhpcy5jYWxsQXN5bmMgPSB0aGlzLl9jYWxsQXN5bmM7XG5cdFx0dGhpcy5wcm9taXNlID0gdGhpcy5fcHJvbWlzZTtcblx0fVxuXG5cdF9pbnNlcnQoaXRlbSkge1xuXHRcdHRoaXMuX3Jlc2V0Q29tcGlsYXRpb24oKTtcblx0XHRsZXQgYmVmb3JlO1xuXHRcdGlmICh0eXBlb2YgaXRlbS5iZWZvcmUgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdGJlZm9yZSA9IG5ldyBTZXQoW2l0ZW0uYmVmb3JlXSk7XG5cdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGl0ZW0uYmVmb3JlKSkge1xuXHRcdFx0YmVmb3JlID0gbmV3IFNldChpdGVtLmJlZm9yZSk7XG5cdFx0fVxuXHRcdGxldCBzdGFnZSA9IDA7XG5cdFx0aWYgKHR5cGVvZiBpdGVtLnN0YWdlID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRzdGFnZSA9IGl0ZW0uc3RhZ2U7XG5cdFx0fVxuXHRcdGxldCBpID0gdGhpcy50YXBzLmxlbmd0aDtcblx0XHR3aGlsZSAoaSA+IDApIHtcblx0XHRcdGktLTtcblx0XHRcdGNvbnN0IHggPSB0aGlzLnRhcHNbaV07XG5cdFx0XHR0aGlzLnRhcHNbaSArIDFdID0geDtcblx0XHRcdGNvbnN0IHhTdGFnZSA9IHguc3RhZ2UgfHwgMDtcblx0XHRcdGlmIChiZWZvcmUpIHtcblx0XHRcdFx0aWYgKGJlZm9yZS5oYXMoeC5uYW1lKSkge1xuXHRcdFx0XHRcdGJlZm9yZS5kZWxldGUoeC5uYW1lKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoYmVmb3JlLnNpemUgPiAwKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh4U3RhZ2UgPiBzdGFnZSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdGkrKztcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHR0aGlzLnRhcHNbaV0gPSBpdGVtO1xuXHR9XG59XG5cbk9iamVjdC5zZXRQcm90b3R5cGVPZihIb29rLnByb3RvdHlwZSwgbnVsbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gSG9vaztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///534\n')},275:module=>{"use strict";eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nclass HookCodeFactory {\n\tconstructor(config) {\n\t\tthis.config = config;\n\t\tthis.options = undefined;\n\t\tthis._args = undefined;\n\t}\n\n\tcreate(options) {\n\t\tthis.init(options);\n\t\tlet fn;\n\t\tswitch (this.options.type) {\n\t\t\tcase "sync":\n\t\t\t\tfn = new Function(\n\t\t\t\t\tthis.args(),\n\t\t\t\t\t\'"use strict";\\n\' +\n\t\t\t\t\t\tthis.header() +\n\t\t\t\t\t\tthis.contentWithInterceptors({\n\t\t\t\t\t\t\tonError: err => `throw ${err};\\n`,\n\t\t\t\t\t\t\tonResult: result => `return ${result};\\n`,\n\t\t\t\t\t\t\tresultReturns: true,\n\t\t\t\t\t\t\tonDone: () => "",\n\t\t\t\t\t\t\trethrowIfPossible: true\n\t\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase "async":\n\t\t\t\tfn = new Function(\n\t\t\t\t\tthis.args({\n\t\t\t\t\t\tafter: "_callback"\n\t\t\t\t\t}),\n\t\t\t\t\t\'"use strict";\\n\' +\n\t\t\t\t\t\tthis.header() +\n\t\t\t\t\t\tthis.contentWithInterceptors({\n\t\t\t\t\t\t\tonError: err => `_callback(${err});\\n`,\n\t\t\t\t\t\t\tonResult: result => `_callback(null, ${result});\\n`,\n\t\t\t\t\t\t\tonDone: () => "_callback();\\n"\n\t\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase "promise":\n\t\t\t\tlet errorHelperUsed = false;\n\t\t\t\tconst content = this.contentWithInterceptors({\n\t\t\t\t\tonError: err => {\n\t\t\t\t\t\terrorHelperUsed = true;\n\t\t\t\t\t\treturn `_error(${err});\\n`;\n\t\t\t\t\t},\n\t\t\t\t\tonResult: result => `_resolve(${result});\\n`,\n\t\t\t\t\tonDone: () => "_resolve();\\n"\n\t\t\t\t});\n\t\t\t\tlet code = "";\n\t\t\t\tcode += \'"use strict";\\n\';\n\t\t\t\tcode += this.header();\n\t\t\t\tcode += "return new Promise((function(_resolve, _reject) {\\n";\n\t\t\t\tif (errorHelperUsed) {\n\t\t\t\t\tcode += "var _sync = true;\\n";\n\t\t\t\t\tcode += "function _error(_err) {\\n";\n\t\t\t\t\tcode += "if(_sync)\\n";\n\t\t\t\t\tcode +=\n\t\t\t\t\t\t"_resolve(Promise.resolve().then((function() { throw _err; })));\\n";\n\t\t\t\t\tcode += "else\\n";\n\t\t\t\t\tcode += "_reject(_err);\\n";\n\t\t\t\t\tcode += "};\\n";\n\t\t\t\t}\n\t\t\t\tcode += content;\n\t\t\t\tif (errorHelperUsed) {\n\t\t\t\t\tcode += "_sync = false;\\n";\n\t\t\t\t}\n\t\t\t\tcode += "}));\\n";\n\t\t\t\tfn = new Function(this.args(), code);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.deinit();\n\t\treturn fn;\n\t}\n\n\tsetup(instance, options) {\n\t\tinstance._x = options.taps.map(t => t.fn);\n\t}\n\n\t/**\n\t * @param {{ type: "sync" | "promise" | "async", taps: Array<Tap>, interceptors: Array<Interceptor> }} options\n\t */\n\tinit(options) {\n\t\tthis.options = options;\n\t\tthis._args = options.args.slice();\n\t}\n\n\tdeinit() {\n\t\tthis.options = undefined;\n\t\tthis._args = undefined;\n\t}\n\n\tcontentWithInterceptors(options) {\n\t\tif (this.options.interceptors.length > 0) {\n\t\t\tconst onError = options.onError;\n\t\t\tconst onResult = options.onResult;\n\t\t\tconst onDone = options.onDone;\n\t\t\tlet code = "";\n\t\t\tfor (let i = 0; i < this.options.interceptors.length; i++) {\n\t\t\t\tconst interceptor = this.options.interceptors[i];\n\t\t\t\tif (interceptor.call) {\n\t\t\t\t\tcode += `${this.getInterceptor(i)}.call(${this.args({\n\t\t\t\t\t\tbefore: interceptor.context ? "_context" : undefined\n\t\t\t\t\t})});\\n`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcode += this.content(\n\t\t\t\tObject.assign(options, {\n\t\t\t\t\tonError:\n\t\t\t\t\t\tonError &&\n\t\t\t\t\t\t(err => {\n\t\t\t\t\t\t\tlet code = "";\n\t\t\t\t\t\t\tfor (let i = 0; i < this.options.interceptors.length; i++) {\n\t\t\t\t\t\t\t\tconst interceptor = this.options.interceptors[i];\n\t\t\t\t\t\t\t\tif (interceptor.error) {\n\t\t\t\t\t\t\t\t\tcode += `${this.getInterceptor(i)}.error(${err});\\n`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcode += onError(err);\n\t\t\t\t\t\t\treturn code;\n\t\t\t\t\t\t}),\n\t\t\t\t\tonResult:\n\t\t\t\t\t\tonResult &&\n\t\t\t\t\t\t(result => {\n\t\t\t\t\t\t\tlet code = "";\n\t\t\t\t\t\t\tfor (let i = 0; i < this.options.interceptors.length; i++) {\n\t\t\t\t\t\t\t\tconst interceptor = this.options.interceptors[i];\n\t\t\t\t\t\t\t\tif (interceptor.result) {\n\t\t\t\t\t\t\t\t\tcode += `${this.getInterceptor(i)}.result(${result});\\n`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcode += onResult(result);\n\t\t\t\t\t\t\treturn code;\n\t\t\t\t\t\t}),\n\t\t\t\t\tonDone:\n\t\t\t\t\t\tonDone &&\n\t\t\t\t\t\t(() => {\n\t\t\t\t\t\t\tlet code = "";\n\t\t\t\t\t\t\tfor (let i = 0; i < this.options.interceptors.length; i++) {\n\t\t\t\t\t\t\t\tconst interceptor = this.options.interceptors[i];\n\t\t\t\t\t\t\t\tif (interceptor.done) {\n\t\t\t\t\t\t\t\t\tcode += `${this.getInterceptor(i)}.done();\\n`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcode += onDone();\n\t\t\t\t\t\t\treturn code;\n\t\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t);\n\t\t\treturn code;\n\t\t} else {\n\t\t\treturn this.content(options);\n\t\t}\n\t}\n\n\theader() {\n\t\tlet code = "";\n\t\tif (this.needContext()) {\n\t\t\tcode += "var _context = {};\\n";\n\t\t} else {\n\t\t\tcode += "var _context;\\n";\n\t\t}\n\t\tcode += "var _x = this._x;\\n";\n\t\tif (this.options.interceptors.length > 0) {\n\t\t\tcode += "var _taps = this.taps;\\n";\n\t\t\tcode += "var _interceptors = this.interceptors;\\n";\n\t\t}\n\t\treturn code;\n\t}\n\n\tneedContext() {\n\t\tfor (const tap of this.options.taps) if (tap.context) return true;\n\t\treturn false;\n\t}\n\n\tcallTap(tapIndex, { onError, onResult, onDone, rethrowIfPossible }) {\n\t\tlet code = "";\n\t\tlet hasTapCached = false;\n\t\tfor (let i = 0; i < this.options.interceptors.length; i++) {\n\t\t\tconst interceptor = this.options.interceptors[i];\n\t\t\tif (interceptor.tap) {\n\t\t\t\tif (!hasTapCached) {\n\t\t\t\t\tcode += `var _tap${tapIndex} = ${this.getTap(tapIndex)};\\n`;\n\t\t\t\t\thasTapCached = true;\n\t\t\t\t}\n\t\t\t\tcode += `${this.getInterceptor(i)}.tap(${\n\t\t\t\t\tinterceptor.context ? "_context, " : ""\n\t\t\t\t}_tap${tapIndex});\\n`;\n\t\t\t}\n\t\t}\n\t\tcode += `var _fn${tapIndex} = ${this.getTapFn(tapIndex)};\\n`;\n\t\tconst tap = this.options.taps[tapIndex];\n\t\tswitch (tap.type) {\n\t\t\tcase "sync":\n\t\t\t\tif (!rethrowIfPossible) {\n\t\t\t\t\tcode += `var _hasError${tapIndex} = false;\\n`;\n\t\t\t\t\tcode += "try {\\n";\n\t\t\t\t}\n\t\t\t\tif (onResult) {\n\t\t\t\t\tcode += `var _result${tapIndex} = _fn${tapIndex}(${this.args({\n\t\t\t\t\t\tbefore: tap.context ? "_context" : undefined\n\t\t\t\t\t})});\\n`;\n\t\t\t\t} else {\n\t\t\t\t\tcode += `_fn${tapIndex}(${this.args({\n\t\t\t\t\t\tbefore: tap.context ? "_context" : undefined\n\t\t\t\t\t})});\\n`;\n\t\t\t\t}\n\t\t\t\tif (!rethrowIfPossible) {\n\t\t\t\t\tcode += "} catch(_err) {\\n";\n\t\t\t\t\tcode += `_hasError${tapIndex} = true;\\n`;\n\t\t\t\t\tcode += onError("_err");\n\t\t\t\t\tcode += "}\\n";\n\t\t\t\t\tcode += `if(!_hasError${tapIndex}) {\\n`;\n\t\t\t\t}\n\t\t\t\tif (onResult) {\n\t\t\t\t\tcode += onResult(`_result${tapIndex}`);\n\t\t\t\t}\n\t\t\t\tif (onDone) {\n\t\t\t\t\tcode += onDone();\n\t\t\t\t}\n\t\t\t\tif (!rethrowIfPossible) {\n\t\t\t\t\tcode += "}\\n";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase "async":\n\t\t\t\tlet cbCode = "";\n\t\t\t\tif (onResult)\n\t\t\t\t\tcbCode += `(function(_err${tapIndex}, _result${tapIndex}) {\\n`;\n\t\t\t\telse cbCode += `(function(_err${tapIndex}) {\\n`;\n\t\t\t\tcbCode += `if(_err${tapIndex}) {\\n`;\n\t\t\t\tcbCode += onError(`_err${tapIndex}`);\n\t\t\t\tcbCode += "} else {\\n";\n\t\t\t\tif (onResult) {\n\t\t\t\t\tcbCode += onResult(`_result${tapIndex}`);\n\t\t\t\t}\n\t\t\t\tif (onDone) {\n\t\t\t\t\tcbCode += onDone();\n\t\t\t\t}\n\t\t\t\tcbCode += "}\\n";\n\t\t\t\tcbCode += "})";\n\t\t\t\tcode += `_fn${tapIndex}(${this.args({\n\t\t\t\t\tbefore: tap.context ? "_context" : undefined,\n\t\t\t\t\tafter: cbCode\n\t\t\t\t})});\\n`;\n\t\t\t\tbreak;\n\t\t\tcase "promise":\n\t\t\t\tcode += `var _hasResult${tapIndex} = false;\\n`;\n\t\t\t\tcode += `var _promise${tapIndex} = _fn${tapIndex}(${this.args({\n\t\t\t\t\tbefore: tap.context ? "_context" : undefined\n\t\t\t\t})});\\n`;\n\t\t\t\tcode += `if (!_promise${tapIndex} || !_promise${tapIndex}.then)\\n`;\n\t\t\t\tcode += `  throw new Error(\'Tap function (tapPromise) did not return promise (returned \' + _promise${tapIndex} + \')\');\\n`;\n\t\t\t\tcode += `_promise${tapIndex}.then((function(_result${tapIndex}) {\\n`;\n\t\t\t\tcode += `_hasResult${tapIndex} = true;\\n`;\n\t\t\t\tif (onResult) {\n\t\t\t\t\tcode += onResult(`_result${tapIndex}`);\n\t\t\t\t}\n\t\t\t\tif (onDone) {\n\t\t\t\t\tcode += onDone();\n\t\t\t\t}\n\t\t\t\tcode += `}), function(_err${tapIndex}) {\\n`;\n\t\t\t\tcode += `if(_hasResult${tapIndex}) throw _err${tapIndex};\\n`;\n\t\t\t\tcode += onError(`_err${tapIndex}`);\n\t\t\t\tcode += "});\\n";\n\t\t\t\tbreak;\n\t\t}\n\t\treturn code;\n\t}\n\n\tcallTapsSeries({\n\t\tonError,\n\t\tonResult,\n\t\tresultReturns,\n\t\tonDone,\n\t\tdoneReturns,\n\t\trethrowIfPossible\n\t}) {\n\t\tif (this.options.taps.length === 0) return onDone();\n\t\tconst firstAsync = this.options.taps.findIndex(t => t.type !== "sync");\n\t\tconst somethingReturns = resultReturns || doneReturns;\n\t\tlet code = "";\n\t\tlet current = onDone;\n\t\tlet unrollCounter = 0;\n\t\tfor (let j = this.options.taps.length - 1; j >= 0; j--) {\n\t\t\tconst i = j;\n\t\t\tconst unroll =\n\t\t\t\tcurrent !== onDone &&\n\t\t\t\t(this.options.taps[i].type !== "sync" || unrollCounter++ > 20);\n\t\t\tif (unroll) {\n\t\t\t\tunrollCounter = 0;\n\t\t\t\tcode += `function _next${i}() {\\n`;\n\t\t\t\tcode += current();\n\t\t\t\tcode += `}\\n`;\n\t\t\t\tcurrent = () => `${somethingReturns ? "return " : ""}_next${i}();\\n`;\n\t\t\t}\n\t\t\tconst done = current;\n\t\t\tconst doneBreak = skipDone => {\n\t\t\t\tif (skipDone) return "";\n\t\t\t\treturn onDone();\n\t\t\t};\n\t\t\tconst content = this.callTap(i, {\n\t\t\t\tonError: error => onError(i, error, done, doneBreak),\n\t\t\t\tonResult:\n\t\t\t\t\tonResult &&\n\t\t\t\t\t(result => {\n\t\t\t\t\t\treturn onResult(i, result, done, doneBreak);\n\t\t\t\t\t}),\n\t\t\t\tonDone: !onResult && done,\n\t\t\t\trethrowIfPossible:\n\t\t\t\t\trethrowIfPossible && (firstAsync < 0 || i < firstAsync)\n\t\t\t});\n\t\t\tcurrent = () => content;\n\t\t}\n\t\tcode += current();\n\t\treturn code;\n\t}\n\n\tcallTapsLooping({ onError, onDone, rethrowIfPossible }) {\n\t\tif (this.options.taps.length === 0) return onDone();\n\t\tconst syncOnly = this.options.taps.every(t => t.type === "sync");\n\t\tlet code = "";\n\t\tif (!syncOnly) {\n\t\t\tcode += "var _looper = (function() {\\n";\n\t\t\tcode += "var _loopAsync = false;\\n";\n\t\t}\n\t\tcode += "var _loop;\\n";\n\t\tcode += "do {\\n";\n\t\tcode += "_loop = false;\\n";\n\t\tfor (let i = 0; i < this.options.interceptors.length; i++) {\n\t\t\tconst interceptor = this.options.interceptors[i];\n\t\t\tif (interceptor.loop) {\n\t\t\t\tcode += `${this.getInterceptor(i)}.loop(${this.args({\n\t\t\t\t\tbefore: interceptor.context ? "_context" : undefined\n\t\t\t\t})});\\n`;\n\t\t\t}\n\t\t}\n\t\tcode += this.callTapsSeries({\n\t\t\tonError,\n\t\t\tonResult: (i, result, next, doneBreak) => {\n\t\t\t\tlet code = "";\n\t\t\t\tcode += `if(${result} !== undefined) {\\n`;\n\t\t\t\tcode += "_loop = true;\\n";\n\t\t\t\tif (!syncOnly) code += "if(_loopAsync) _looper();\\n";\n\t\t\t\tcode += doneBreak(true);\n\t\t\t\tcode += `} else {\\n`;\n\t\t\t\tcode += next();\n\t\t\t\tcode += `}\\n`;\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonDone:\n\t\t\t\tonDone &&\n\t\t\t\t(() => {\n\t\t\t\t\tlet code = "";\n\t\t\t\t\tcode += "if(!_loop) {\\n";\n\t\t\t\t\tcode += onDone();\n\t\t\t\t\tcode += "}\\n";\n\t\t\t\t\treturn code;\n\t\t\t\t}),\n\t\t\trethrowIfPossible: rethrowIfPossible && syncOnly\n\t\t});\n\t\tcode += "} while(_loop);\\n";\n\t\tif (!syncOnly) {\n\t\t\tcode += "_loopAsync = true;\\n";\n\t\t\tcode += "});\\n";\n\t\t\tcode += "_looper();\\n";\n\t\t}\n\t\treturn code;\n\t}\n\n\tcallTapsParallel({\n\t\tonError,\n\t\tonResult,\n\t\tonDone,\n\t\trethrowIfPossible,\n\t\tonTap = (i, run) => run()\n\t}) {\n\t\tif (this.options.taps.length <= 1) {\n\t\t\treturn this.callTapsSeries({\n\t\t\t\tonError,\n\t\t\t\tonResult,\n\t\t\t\tonDone,\n\t\t\t\trethrowIfPossible\n\t\t\t});\n\t\t}\n\t\tlet code = "";\n\t\tcode += "do {\\n";\n\t\tcode += `var _counter = ${this.options.taps.length};\\n`;\n\t\tif (onDone) {\n\t\t\tcode += "var _done = (function() {\\n";\n\t\t\tcode += onDone();\n\t\t\tcode += "});\\n";\n\t\t}\n\t\tfor (let i = 0; i < this.options.taps.length; i++) {\n\t\t\tconst done = () => {\n\t\t\t\tif (onDone) return "if(--_counter === 0) _done();\\n";\n\t\t\t\telse return "--_counter;";\n\t\t\t};\n\t\t\tconst doneBreak = skipDone => {\n\t\t\t\tif (skipDone || !onDone) return "_counter = 0;\\n";\n\t\t\t\telse return "_counter = 0;\\n_done();\\n";\n\t\t\t};\n\t\t\tcode += "if(_counter <= 0) break;\\n";\n\t\t\tcode += onTap(\n\t\t\t\ti,\n\t\t\t\t() =>\n\t\t\t\t\tthis.callTap(i, {\n\t\t\t\t\t\tonError: error => {\n\t\t\t\t\t\t\tlet code = "";\n\t\t\t\t\t\t\tcode += "if(_counter > 0) {\\n";\n\t\t\t\t\t\t\tcode += onError(i, error, done, doneBreak);\n\t\t\t\t\t\t\tcode += "}\\n";\n\t\t\t\t\t\t\treturn code;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonResult:\n\t\t\t\t\t\t\tonResult &&\n\t\t\t\t\t\t\t(result => {\n\t\t\t\t\t\t\t\tlet code = "";\n\t\t\t\t\t\t\t\tcode += "if(_counter > 0) {\\n";\n\t\t\t\t\t\t\t\tcode += onResult(i, result, done, doneBreak);\n\t\t\t\t\t\t\t\tcode += "}\\n";\n\t\t\t\t\t\t\t\treturn code;\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tonDone:\n\t\t\t\t\t\t\t!onResult &&\n\t\t\t\t\t\t\t(() => {\n\t\t\t\t\t\t\t\treturn done();\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\trethrowIfPossible\n\t\t\t\t\t}),\n\t\t\t\tdone,\n\t\t\t\tdoneBreak\n\t\t\t);\n\t\t}\n\t\tcode += "} while(false);\\n";\n\t\treturn code;\n\t}\n\n\targs({ before, after } = {}) {\n\t\tlet allArgs = this._args;\n\t\tif (before) allArgs = [before].concat(allArgs);\n\t\tif (after) allArgs = allArgs.concat(after);\n\t\tif (allArgs.length === 0) {\n\t\t\treturn "";\n\t\t} else {\n\t\t\treturn allArgs.join(", ");\n\t\t}\n\t}\n\n\tgetTapFn(idx) {\n\t\treturn `_x[${idx}]`;\n\t}\n\n\tgetTap(idx) {\n\t\treturn `_taps[${idx}]`;\n\t}\n\n\tgetInterceptor(idx) {\n\t\treturn `_interceptors[${idx}]`;\n\t}\n}\n\nmodule.exports = HookCodeFactory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///275\n')},459:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst util = __webpack_require__(517);\n\nconst defaultFactory = (key, hook) => hook;\n\nclass HookMap {\n\tconstructor(factory, name = undefined) {\n\t\tthis._map = new Map();\n\t\tthis.name = name;\n\t\tthis._factory = factory;\n\t\tthis._interceptors = [];\n\t}\n\n\tget(key) {\n\t\treturn this._map.get(key);\n\t}\n\n\tfor(key) {\n\t\tconst hook = this.get(key);\n\t\tif (hook !== undefined) {\n\t\t\treturn hook;\n\t\t}\n\t\tlet newHook = this._factory(key);\n\t\tconst interceptors = this._interceptors;\n\t\tfor (let i = 0; i < interceptors.length; i++) {\n\t\t\tnewHook = interceptors[i].factory(key, newHook);\n\t\t}\n\t\tthis._map.set(key, newHook);\n\t\treturn newHook;\n\t}\n\n\tintercept(interceptor) {\n\t\tthis._interceptors.push(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\tfactory: defaultFactory\n\t\t\t\t},\n\t\t\t\tinterceptor\n\t\t\t)\n\t\t);\n\t}\n}\n\nHookMap.prototype.tap = util.deprecate(function(key, options, fn) {\n\treturn this.for(key).tap(options, fn);\n}, "HookMap#tap(key,…) is deprecated. Use HookMap#for(key).tap(…) instead.");\n\nHookMap.prototype.tapAsync = util.deprecate(function(key, options, fn) {\n\treturn this.for(key).tapAsync(options, fn);\n}, "HookMap#tapAsync(key,…) is deprecated. Use HookMap#for(key).tapAsync(…) instead.");\n\nHookMap.prototype.tapPromise = util.deprecate(function(key, options, fn) {\n\treturn this.for(key).tapPromise(options, fn);\n}, "HookMap#tapPromise(key,…) is deprecated. Use HookMap#for(key).tapPromise(…) instead.");\n\nmodule.exports = HookMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL0hvb2tNYXAuanM/YzlkNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcblxuY29uc3QgZGVmYXVsdEZhY3RvcnkgPSAoa2V5LCBob29rKSA9PiBob29rO1xuXG5jbGFzcyBIb29rTWFwIHtcblx0Y29uc3RydWN0b3IoZmFjdG9yeSwgbmFtZSA9IHVuZGVmaW5lZCkge1xuXHRcdHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdHRoaXMuX2ZhY3RvcnkgPSBmYWN0b3J5O1xuXHRcdHRoaXMuX2ludGVyY2VwdG9ycyA9IFtdO1xuXHR9XG5cblx0Z2V0KGtleSkge1xuXHRcdHJldHVybiB0aGlzLl9tYXAuZ2V0KGtleSk7XG5cdH1cblxuXHRmb3Ioa2V5KSB7XG5cdFx0Y29uc3QgaG9vayA9IHRoaXMuZ2V0KGtleSk7XG5cdFx0aWYgKGhvb2sgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIGhvb2s7XG5cdFx0fVxuXHRcdGxldCBuZXdIb29rID0gdGhpcy5fZmFjdG9yeShrZXkpO1xuXHRcdGNvbnN0IGludGVyY2VwdG9ycyA9IHRoaXMuX2ludGVyY2VwdG9ycztcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGludGVyY2VwdG9ycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bmV3SG9vayA9IGludGVyY2VwdG9yc1tpXS5mYWN0b3J5KGtleSwgbmV3SG9vayk7XG5cdFx0fVxuXHRcdHRoaXMuX21hcC5zZXQoa2V5LCBuZXdIb29rKTtcblx0XHRyZXR1cm4gbmV3SG9vaztcblx0fVxuXG5cdGludGVyY2VwdChpbnRlcmNlcHRvcikge1xuXHRcdHRoaXMuX2ludGVyY2VwdG9ycy5wdXNoKFxuXHRcdFx0T2JqZWN0LmFzc2lnbihcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGZhY3Rvcnk6IGRlZmF1bHRGYWN0b3J5XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGludGVyY2VwdG9yXG5cdFx0XHQpXG5cdFx0KTtcblx0fVxufVxuXG5Ib29rTWFwLnByb3RvdHlwZS50YXAgPSB1dGlsLmRlcHJlY2F0ZShmdW5jdGlvbihrZXksIG9wdGlvbnMsIGZuKSB7XG5cdHJldHVybiB0aGlzLmZvcihrZXkpLnRhcChvcHRpb25zLCBmbik7XG59LCBcIkhvb2tNYXAjdGFwKGtleSzigKYpIGlzIGRlcHJlY2F0ZWQuIFVzZSBIb29rTWFwI2ZvcihrZXkpLnRhcCjigKYpIGluc3RlYWQuXCIpO1xuXG5Ib29rTWFwLnByb3RvdHlwZS50YXBBc3luYyA9IHV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uKGtleSwgb3B0aW9ucywgZm4pIHtcblx0cmV0dXJuIHRoaXMuZm9yKGtleSkudGFwQXN5bmMob3B0aW9ucywgZm4pO1xufSwgXCJIb29rTWFwI3RhcEFzeW5jKGtleSzigKYpIGlzIGRlcHJlY2F0ZWQuIFVzZSBIb29rTWFwI2ZvcihrZXkpLnRhcEFzeW5jKOKApikgaW5zdGVhZC5cIik7XG5cbkhvb2tNYXAucHJvdG90eXBlLnRhcFByb21pc2UgPSB1dGlsLmRlcHJlY2F0ZShmdW5jdGlvbihrZXksIG9wdGlvbnMsIGZuKSB7XG5cdHJldHVybiB0aGlzLmZvcihrZXkpLnRhcFByb21pc2Uob3B0aW9ucywgZm4pO1xufSwgXCJIb29rTWFwI3RhcFByb21pc2Uoa2V5LOKApikgaXMgZGVwcmVjYXRlZC4gVXNlIEhvb2tNYXAjZm9yKGtleSkudGFwUHJvbWlzZSjigKYpIGluc3RlYWQuXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhvb2tNYXA7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///459\n')},942:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\n\nclass MultiHook {\n\tconstructor(hooks, name = undefined) {\n\t\tthis.hooks = hooks;\n\t\tthis.name = name;\n\t}\n\n\ttap(options, fn) {\n\t\tfor (const hook of this.hooks) {\n\t\t\thook.tap(options, fn);\n\t\t}\n\t}\n\n\ttapAsync(options, fn) {\n\t\tfor (const hook of this.hooks) {\n\t\t\thook.tapAsync(options, fn);\n\t\t}\n\t}\n\n\ttapPromise(options, fn) {\n\t\tfor (const hook of this.hooks) {\n\t\t\thook.tapPromise(options, fn);\n\t\t}\n\t}\n\n\tisUsed() {\n\t\tfor (const hook of this.hooks) {\n\t\t\tif (hook.isUsed()) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tintercept(interceptor) {\n\t\tfor (const hook of this.hooks) {\n\t\t\thook.intercept(interceptor);\n\t\t}\n\t}\n\n\twithOptions(options) {\n\t\treturn new MultiHook(\n\t\t\tthis.hooks.map(h => h.withOptions(options)),\n\t\t\tthis.name\n\t\t);\n\t}\n}\n\nmodule.exports = MultiHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL011bHRpSG9vay5qcz82NTY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgSG9vayA9IHJlcXVpcmUoXCIuL0hvb2tcIik7XG5cbmNsYXNzIE11bHRpSG9vayB7XG5cdGNvbnN0cnVjdG9yKGhvb2tzLCBuYW1lID0gdW5kZWZpbmVkKSB7XG5cdFx0dGhpcy5ob29rcyA9IGhvb2tzO1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdH1cblxuXHR0YXAob3B0aW9ucywgZm4pIHtcblx0XHRmb3IgKGNvbnN0IGhvb2sgb2YgdGhpcy5ob29rcykge1xuXHRcdFx0aG9vay50YXAob3B0aW9ucywgZm4pO1xuXHRcdH1cblx0fVxuXG5cdHRhcEFzeW5jKG9wdGlvbnMsIGZuKSB7XG5cdFx0Zm9yIChjb25zdCBob29rIG9mIHRoaXMuaG9va3MpIHtcblx0XHRcdGhvb2sudGFwQXN5bmMob3B0aW9ucywgZm4pO1xuXHRcdH1cblx0fVxuXG5cdHRhcFByb21pc2Uob3B0aW9ucywgZm4pIHtcblx0XHRmb3IgKGNvbnN0IGhvb2sgb2YgdGhpcy5ob29rcykge1xuXHRcdFx0aG9vay50YXBQcm9taXNlKG9wdGlvbnMsIGZuKTtcblx0XHR9XG5cdH1cblxuXHRpc1VzZWQoKSB7XG5cdFx0Zm9yIChjb25zdCBob29rIG9mIHRoaXMuaG9va3MpIHtcblx0XHRcdGlmIChob29rLmlzVXNlZCgpKSByZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aW50ZXJjZXB0KGludGVyY2VwdG9yKSB7XG5cdFx0Zm9yIChjb25zdCBob29rIG9mIHRoaXMuaG9va3MpIHtcblx0XHRcdGhvb2suaW50ZXJjZXB0KGludGVyY2VwdG9yKTtcblx0XHR9XG5cdH1cblxuXHR3aXRoT3B0aW9ucyhvcHRpb25zKSB7XG5cdFx0cmV0dXJuIG5ldyBNdWx0aUhvb2soXG5cdFx0XHR0aGlzLmhvb2tzLm1hcChoID0+IGgud2l0aE9wdGlvbnMob3B0aW9ucykpLFxuXHRcdFx0dGhpcy5uYW1lXG5cdFx0KTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE11bHRpSG9vaztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///942\n")},922:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\nconst HookCodeFactory = __webpack_require__(275);\n\nclass SyncBailHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, resultReturns, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonResult: (i, result, next) =>\n\t\t\t\t`if(${result} !== undefined) {\\n${onResult(\n\t\t\t\t\tresult\n\t\t\t\t)};\\n} else {\\n${next()}}\\n`,\n\t\t\tresultReturns,\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncBailHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n\tthrow new Error("tapAsync is not supported on a SyncBailHook");\n};\n\nconst TAP_PROMISE = () => {\n\tthrow new Error("tapPromise is not supported on a SyncBailHook");\n};\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction SyncBailHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = SyncBailHook;\n\thook.tapAsync = TAP_ASYNC;\n\thook.tapPromise = TAP_PROMISE;\n\thook.compile = COMPILE;\n\treturn hook;\n}\n\nSyncBailHook.prototype = null;\n\nmodule.exports = SyncBailHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL1N5bmNCYWlsSG9vay5qcz9mYzYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgSG9vayA9IHJlcXVpcmUoXCIuL0hvb2tcIik7XG5jb25zdCBIb29rQ29kZUZhY3RvcnkgPSByZXF1aXJlKFwiLi9Ib29rQ29kZUZhY3RvcnlcIik7XG5cbmNsYXNzIFN5bmNCYWlsSG9va0NvZGVGYWN0b3J5IGV4dGVuZHMgSG9va0NvZGVGYWN0b3J5IHtcblx0Y29udGVudCh7IG9uRXJyb3IsIG9uUmVzdWx0LCByZXN1bHRSZXR1cm5zLCBvbkRvbmUsIHJldGhyb3dJZlBvc3NpYmxlIH0pIHtcblx0XHRyZXR1cm4gdGhpcy5jYWxsVGFwc1Nlcmllcyh7XG5cdFx0XHRvbkVycm9yOiAoaSwgZXJyKSA9PiBvbkVycm9yKGVyciksXG5cdFx0XHRvblJlc3VsdDogKGksIHJlc3VsdCwgbmV4dCkgPT5cblx0XHRcdFx0YGlmKCR7cmVzdWx0fSAhPT0gdW5kZWZpbmVkKSB7XFxuJHtvblJlc3VsdChcblx0XHRcdFx0XHRyZXN1bHRcblx0XHRcdFx0KX07XFxufSBlbHNlIHtcXG4ke25leHQoKX19XFxuYCxcblx0XHRcdHJlc3VsdFJldHVybnMsXG5cdFx0XHRvbkRvbmUsXG5cdFx0XHRyZXRocm93SWZQb3NzaWJsZVxuXHRcdH0pO1xuXHR9XG59XG5cbmNvbnN0IGZhY3RvcnkgPSBuZXcgU3luY0JhaWxIb29rQ29kZUZhY3RvcnkoKTtcblxuY29uc3QgVEFQX0FTWU5DID0gKCkgPT4ge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJ0YXBBc3luYyBpcyBub3Qgc3VwcG9ydGVkIG9uIGEgU3luY0JhaWxIb29rXCIpO1xufTtcblxuY29uc3QgVEFQX1BST01JU0UgPSAoKSA9PiB7XG5cdHRocm93IG5ldyBFcnJvcihcInRhcFByb21pc2UgaXMgbm90IHN1cHBvcnRlZCBvbiBhIFN5bmNCYWlsSG9va1wiKTtcbn07XG5cbmNvbnN0IENPTVBJTEUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdGZhY3Rvcnkuc2V0dXAodGhpcywgb3B0aW9ucyk7XG5cdHJldHVybiBmYWN0b3J5LmNyZWF0ZShvcHRpb25zKTtcbn07XG5cbmZ1bmN0aW9uIFN5bmNCYWlsSG9vayhhcmdzID0gW10sIG5hbWUgPSB1bmRlZmluZWQpIHtcblx0Y29uc3QgaG9vayA9IG5ldyBIb29rKGFyZ3MsIG5hbWUpO1xuXHRob29rLmNvbnN0cnVjdG9yID0gU3luY0JhaWxIb29rO1xuXHRob29rLnRhcEFzeW5jID0gVEFQX0FTWU5DO1xuXHRob29rLnRhcFByb21pc2UgPSBUQVBfUFJPTUlTRTtcblx0aG9vay5jb21waWxlID0gQ09NUElMRTtcblx0cmV0dXJuIGhvb2s7XG59XG5cblN5bmNCYWlsSG9vay5wcm90b3R5cGUgPSBudWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bmNCYWlsSG9vaztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///922\n')},537:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\nconst HookCodeFactory = __webpack_require__(275);\n\nclass SyncHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n\tthrow new Error("tapAsync is not supported on a SyncHook");\n};\n\nconst TAP_PROMISE = () => {\n\tthrow new Error("tapPromise is not supported on a SyncHook");\n};\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction SyncHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = SyncHook;\n\thook.tapAsync = TAP_ASYNC;\n\thook.tapPromise = TAP_PROMISE;\n\thook.compile = COMPILE;\n\treturn hook;\n}\n\nSyncHook.prototype = null;\n\nmodule.exports = SyncHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL1N5bmNIb29rLmpzP2FkYTQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBIb29rID0gcmVxdWlyZShcIi4vSG9va1wiKTtcbmNvbnN0IEhvb2tDb2RlRmFjdG9yeSA9IHJlcXVpcmUoXCIuL0hvb2tDb2RlRmFjdG9yeVwiKTtcblxuY2xhc3MgU3luY0hvb2tDb2RlRmFjdG9yeSBleHRlbmRzIEhvb2tDb2RlRmFjdG9yeSB7XG5cdGNvbnRlbnQoeyBvbkVycm9yLCBvbkRvbmUsIHJldGhyb3dJZlBvc3NpYmxlIH0pIHtcblx0XHRyZXR1cm4gdGhpcy5jYWxsVGFwc1Nlcmllcyh7XG5cdFx0XHRvbkVycm9yOiAoaSwgZXJyKSA9PiBvbkVycm9yKGVyciksXG5cdFx0XHRvbkRvbmUsXG5cdFx0XHRyZXRocm93SWZQb3NzaWJsZVxuXHRcdH0pO1xuXHR9XG59XG5cbmNvbnN0IGZhY3RvcnkgPSBuZXcgU3luY0hvb2tDb2RlRmFjdG9yeSgpO1xuXG5jb25zdCBUQVBfQVNZTkMgPSAoKSA9PiB7XG5cdHRocm93IG5ldyBFcnJvcihcInRhcEFzeW5jIGlzIG5vdCBzdXBwb3J0ZWQgb24gYSBTeW5jSG9va1wiKTtcbn07XG5cbmNvbnN0IFRBUF9QUk9NSVNFID0gKCkgPT4ge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJ0YXBQcm9taXNlIGlzIG5vdCBzdXBwb3J0ZWQgb24gYSBTeW5jSG9va1wiKTtcbn07XG5cbmNvbnN0IENPTVBJTEUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdGZhY3Rvcnkuc2V0dXAodGhpcywgb3B0aW9ucyk7XG5cdHJldHVybiBmYWN0b3J5LmNyZWF0ZShvcHRpb25zKTtcbn07XG5cbmZ1bmN0aW9uIFN5bmNIb29rKGFyZ3MgPSBbXSwgbmFtZSA9IHVuZGVmaW5lZCkge1xuXHRjb25zdCBob29rID0gbmV3IEhvb2soYXJncywgbmFtZSk7XG5cdGhvb2suY29uc3RydWN0b3IgPSBTeW5jSG9vaztcblx0aG9vay50YXBBc3luYyA9IFRBUF9BU1lOQztcblx0aG9vay50YXBQcm9taXNlID0gVEFQX1BST01JU0U7XG5cdGhvb2suY29tcGlsZSA9IENPTVBJTEU7XG5cdHJldHVybiBob29rO1xufVxuXG5TeW5jSG9vay5wcm90b3R5cGUgPSBudWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bmNIb29rO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///537\n')},74:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\nconst HookCodeFactory = __webpack_require__(275);\n\nclass SyncLoopHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsLooping({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncLoopHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n\tthrow new Error("tapAsync is not supported on a SyncLoopHook");\n};\n\nconst TAP_PROMISE = () => {\n\tthrow new Error("tapPromise is not supported on a SyncLoopHook");\n};\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction SyncLoopHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = SyncLoopHook;\n\thook.tapAsync = TAP_ASYNC;\n\thook.tapPromise = TAP_PROMISE;\n\thook.compile = COMPILE;\n\treturn hook;\n}\n\nSyncLoopHook.prototype = null;\n\nmodule.exports = SyncLoopHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qY2hhcnQvLi9ub2RlX21vZHVsZXMvdGFwYWJsZS9saWIvU3luY0xvb3BIb29rLmpzPzdhMGEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBIb29rID0gcmVxdWlyZShcIi4vSG9va1wiKTtcbmNvbnN0IEhvb2tDb2RlRmFjdG9yeSA9IHJlcXVpcmUoXCIuL0hvb2tDb2RlRmFjdG9yeVwiKTtcblxuY2xhc3MgU3luY0xvb3BIb29rQ29kZUZhY3RvcnkgZXh0ZW5kcyBIb29rQ29kZUZhY3Rvcnkge1xuXHRjb250ZW50KHsgb25FcnJvciwgb25Eb25lLCByZXRocm93SWZQb3NzaWJsZSB9KSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FsbFRhcHNMb29waW5nKHtcblx0XHRcdG9uRXJyb3I6IChpLCBlcnIpID0+IG9uRXJyb3IoZXJyKSxcblx0XHRcdG9uRG9uZSxcblx0XHRcdHJldGhyb3dJZlBvc3NpYmxlXG5cdFx0fSk7XG5cdH1cbn1cblxuY29uc3QgZmFjdG9yeSA9IG5ldyBTeW5jTG9vcEhvb2tDb2RlRmFjdG9yeSgpO1xuXG5jb25zdCBUQVBfQVNZTkMgPSAoKSA9PiB7XG5cdHRocm93IG5ldyBFcnJvcihcInRhcEFzeW5jIGlzIG5vdCBzdXBwb3J0ZWQgb24gYSBTeW5jTG9vcEhvb2tcIik7XG59O1xuXG5jb25zdCBUQVBfUFJPTUlTRSA9ICgpID0+IHtcblx0dGhyb3cgbmV3IEVycm9yKFwidGFwUHJvbWlzZSBpcyBub3Qgc3VwcG9ydGVkIG9uIGEgU3luY0xvb3BIb29rXCIpO1xufTtcblxuY29uc3QgQ09NUElMRSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ZmFjdG9yeS5zZXR1cCh0aGlzLCBvcHRpb25zKTtcblx0cmV0dXJuIGZhY3RvcnkuY3JlYXRlKG9wdGlvbnMpO1xufTtcblxuZnVuY3Rpb24gU3luY0xvb3BIb29rKGFyZ3MgPSBbXSwgbmFtZSA9IHVuZGVmaW5lZCkge1xuXHRjb25zdCBob29rID0gbmV3IEhvb2soYXJncywgbmFtZSk7XG5cdGhvb2suY29uc3RydWN0b3IgPSBTeW5jTG9vcEhvb2s7XG5cdGhvb2sudGFwQXN5bmMgPSBUQVBfQVNZTkM7XG5cdGhvb2sudGFwUHJvbWlzZSA9IFRBUF9QUk9NSVNFO1xuXHRob29rLmNvbXBpbGUgPSBDT01QSUxFO1xuXHRyZXR1cm4gaG9vaztcbn1cblxuU3luY0xvb3BIb29rLnByb3RvdHlwZSA9IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gU3luY0xvb3BIb29rO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///74\n')},76:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = __webpack_require__(534);\nconst HookCodeFactory = __webpack_require__(275);\n\nclass SyncWaterfallHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, resultReturns, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonResult: (i, result, next) => {\n\t\t\t\tlet code = "";\n\t\t\t\tcode += `if(${result} !== undefined) {\\n`;\n\t\t\t\tcode += `${this._args[0]} = ${result};\\n`;\n\t\t\t\tcode += `}\\n`;\n\t\t\t\tcode += next();\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonDone: () => onResult(this._args[0]),\n\t\t\tdoneReturns: resultReturns,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncWaterfallHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n\tthrow new Error("tapAsync is not supported on a SyncWaterfallHook");\n};\n\nconst TAP_PROMISE = () => {\n\tthrow new Error("tapPromise is not supported on a SyncWaterfallHook");\n};\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction SyncWaterfallHook(args = [], name = undefined) {\n\tif (args.length < 1)\n\t\tthrow new Error("Waterfall hooks must have at least one argument");\n\tconst hook = new Hook(args, name);\n\thook.constructor = SyncWaterfallHook;\n\thook.tapAsync = TAP_ASYNC;\n\thook.tapPromise = TAP_PROMISE;\n\thook.compile = COMPILE;\n\treturn hook;\n}\n\nSyncWaterfallHook.prototype = null;\n\nmodule.exports = SyncWaterfallHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qY2hhcnQvLi9ub2RlX21vZHVsZXMvdGFwYWJsZS9saWIvU3luY1dhdGVyZmFsbEhvb2suanM/OGU1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IEhvb2sgPSByZXF1aXJlKFwiLi9Ib29rXCIpO1xuY29uc3QgSG9va0NvZGVGYWN0b3J5ID0gcmVxdWlyZShcIi4vSG9va0NvZGVGYWN0b3J5XCIpO1xuXG5jbGFzcyBTeW5jV2F0ZXJmYWxsSG9va0NvZGVGYWN0b3J5IGV4dGVuZHMgSG9va0NvZGVGYWN0b3J5IHtcblx0Y29udGVudCh7IG9uRXJyb3IsIG9uUmVzdWx0LCByZXN1bHRSZXR1cm5zLCByZXRocm93SWZQb3NzaWJsZSB9KSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FsbFRhcHNTZXJpZXMoe1xuXHRcdFx0b25FcnJvcjogKGksIGVycikgPT4gb25FcnJvcihlcnIpLFxuXHRcdFx0b25SZXN1bHQ6IChpLCByZXN1bHQsIG5leHQpID0+IHtcblx0XHRcdFx0bGV0IGNvZGUgPSBcIlwiO1xuXHRcdFx0XHRjb2RlICs9IGBpZigke3Jlc3VsdH0gIT09IHVuZGVmaW5lZCkge1xcbmA7XG5cdFx0XHRcdGNvZGUgKz0gYCR7dGhpcy5fYXJnc1swXX0gPSAke3Jlc3VsdH07XFxuYDtcblx0XHRcdFx0Y29kZSArPSBgfVxcbmA7XG5cdFx0XHRcdGNvZGUgKz0gbmV4dCgpO1xuXHRcdFx0XHRyZXR1cm4gY29kZTtcblx0XHRcdH0sXG5cdFx0XHRvbkRvbmU6ICgpID0+IG9uUmVzdWx0KHRoaXMuX2FyZ3NbMF0pLFxuXHRcdFx0ZG9uZVJldHVybnM6IHJlc3VsdFJldHVybnMsXG5cdFx0XHRyZXRocm93SWZQb3NzaWJsZVxuXHRcdH0pO1xuXHR9XG59XG5cbmNvbnN0IGZhY3RvcnkgPSBuZXcgU3luY1dhdGVyZmFsbEhvb2tDb2RlRmFjdG9yeSgpO1xuXG5jb25zdCBUQVBfQVNZTkMgPSAoKSA9PiB7XG5cdHRocm93IG5ldyBFcnJvcihcInRhcEFzeW5jIGlzIG5vdCBzdXBwb3J0ZWQgb24gYSBTeW5jV2F0ZXJmYWxsSG9va1wiKTtcbn07XG5cbmNvbnN0IFRBUF9QUk9NSVNFID0gKCkgPT4ge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJ0YXBQcm9taXNlIGlzIG5vdCBzdXBwb3J0ZWQgb24gYSBTeW5jV2F0ZXJmYWxsSG9va1wiKTtcbn07XG5cbmNvbnN0IENPTVBJTEUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdGZhY3Rvcnkuc2V0dXAodGhpcywgb3B0aW9ucyk7XG5cdHJldHVybiBmYWN0b3J5LmNyZWF0ZShvcHRpb25zKTtcbn07XG5cbmZ1bmN0aW9uIFN5bmNXYXRlcmZhbGxIb29rKGFyZ3MgPSBbXSwgbmFtZSA9IHVuZGVmaW5lZCkge1xuXHRpZiAoYXJncy5sZW5ndGggPCAxKVxuXHRcdHRocm93IG5ldyBFcnJvcihcIldhdGVyZmFsbCBob29rcyBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50XCIpO1xuXHRjb25zdCBob29rID0gbmV3IEhvb2soYXJncywgbmFtZSk7XG5cdGhvb2suY29uc3RydWN0b3IgPSBTeW5jV2F0ZXJmYWxsSG9vaztcblx0aG9vay50YXBBc3luYyA9IFRBUF9BU1lOQztcblx0aG9vay50YXBQcm9taXNlID0gVEFQX1BST01JU0U7XG5cdGhvb2suY29tcGlsZSA9IENPTVBJTEU7XG5cdHJldHVybiBob29rO1xufVxuXG5TeW5jV2F0ZXJmYWxsSG9vay5wcm90b3R5cGUgPSBudWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bmNXYXRlcmZhbGxIb29rO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///76\n')},991:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("var __webpack_unused_export__;\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\n__webpack_unused_export__ = true;\nexports.SyncHook = __webpack_require__(537);\n/* unused reexport */ __webpack_require__(922);\n/* unused reexport */ __webpack_require__(76);\n/* unused reexport */ __webpack_require__(74);\n/* unused reexport */ __webpack_require__(714);\n/* unused reexport */ __webpack_require__(247);\n/* unused reexport */ __webpack_require__(617);\n/* unused reexport */ __webpack_require__(293);\n/* unused reexport */ __webpack_require__(996);\n/* unused reexport */ __webpack_require__(178);\n/* unused reexport */ __webpack_require__(459);\n/* unused reexport */ __webpack_require__(942);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL2luZGV4LmpzPzAyY2UiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5TeW5jSG9vayA9IHJlcXVpcmUoXCIuL1N5bmNIb29rXCIpO1xuZXhwb3J0cy5TeW5jQmFpbEhvb2sgPSByZXF1aXJlKFwiLi9TeW5jQmFpbEhvb2tcIik7XG5leHBvcnRzLlN5bmNXYXRlcmZhbGxIb29rID0gcmVxdWlyZShcIi4vU3luY1dhdGVyZmFsbEhvb2tcIik7XG5leHBvcnRzLlN5bmNMb29wSG9vayA9IHJlcXVpcmUoXCIuL1N5bmNMb29wSG9va1wiKTtcbmV4cG9ydHMuQXN5bmNQYXJhbGxlbEhvb2sgPSByZXF1aXJlKFwiLi9Bc3luY1BhcmFsbGVsSG9va1wiKTtcbmV4cG9ydHMuQXN5bmNQYXJhbGxlbEJhaWxIb29rID0gcmVxdWlyZShcIi4vQXN5bmNQYXJhbGxlbEJhaWxIb29rXCIpO1xuZXhwb3J0cy5Bc3luY1Nlcmllc0hvb2sgPSByZXF1aXJlKFwiLi9Bc3luY1Nlcmllc0hvb2tcIik7XG5leHBvcnRzLkFzeW5jU2VyaWVzQmFpbEhvb2sgPSByZXF1aXJlKFwiLi9Bc3luY1Nlcmllc0JhaWxIb29rXCIpO1xuZXhwb3J0cy5Bc3luY1Nlcmllc0xvb3BIb29rID0gcmVxdWlyZShcIi4vQXN5bmNTZXJpZXNMb29wSG9va1wiKTtcbmV4cG9ydHMuQXN5bmNTZXJpZXNXYXRlcmZhbGxIb29rID0gcmVxdWlyZShcIi4vQXN5bmNTZXJpZXNXYXRlcmZhbGxIb29rXCIpO1xuZXhwb3J0cy5Ib29rTWFwID0gcmVxdWlyZShcIi4vSG9va01hcFwiKTtcbmV4cG9ydHMuTXVsdGlIb29rID0gcmVxdWlyZShcIi4vTXVsdGlIb29rXCIpO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///991\n")},517:(__unused_webpack_module,exports)=>{"use strict";eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nexports.deprecate = (fn, msg) => {\n\tlet once = true;\n\treturn function() {\n\t\tif (once) {\n\t\t\tconsole.warn("DeprecationWarning: " + msg);\n\t\t\tonce = false;\n\t\t}\n\t\treturn fn.apply(this, arguments);\n\t};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamNoYXJ0Ly4vbm9kZV9tb2R1bGVzL3RhcGFibGUvbGliL3V0aWwtYnJvd3Nlci5qcz9iN2ZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5kZXByZWNhdGUgPSAoZm4sIG1zZykgPT4ge1xuXHRsZXQgb25jZSA9IHRydWU7XG5cdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRpZiAob25jZSkge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiRGVwcmVjYXRpb25XYXJuaW5nOiBcIiArIG1zZyk7XG5cdFx0XHRvbmNlID0gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///517\n')}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var n=__webpack_module_cache__[g]={id:g,loaded:!1,exports:{}};return __webpack_modules__[g].call(n.exports,n,n.exports,__webpack_require__),n.loaded=!0,n.exports}__webpack_require__.n=g=>{var I=g&&g.__esModule?()=>g.default:()=>g;return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=(g,I)=>{for(var n in I)__webpack_require__.o(I,n)&&!__webpack_require__.o(g,n)&&Object.defineProperty(g,n,{enumerable:!0,get:I[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(g){if("object"==typeof window)return window}}(),__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.nmd=g=>(g.paths=[],g.children||(g.children=[]),g);var __webpack_exports__=__webpack_require__(210)})();